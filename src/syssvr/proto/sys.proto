syntax = "proto3";
option go_package = "pb/sys";
import "google/protobuf/wrappers.proto";

package sys;

service User {
  rpc userCreate(UserInfo) returns(UserCreateResp);//创建用户信息
  rpc userIndex(UserIndexReq) returns(UserIndexResp);
  rpc userUpdate(UserInfo) returns(Response);//更新用户基本数据
  rpc userRead(UserReadReq) returns(UserInfo);//获取用户信息
  rpc userDelete(UserDeleteReq) returns(Response);//刪除用戶
  rpc userLogin(UserLoginReq) returns(UserLoginResp);
  rpc userCheckToken(UserCheckTokenReq) returns(UserCheckTokenResp);
  rpc userRegister1(UserRegister1Req) returns(UserRegister1Resp);
  rpc userRegister2(UserRegister2Req) returns(Response);


  rpc userAuthProjectMultiUpdate (UserAuthProjectMultiUpdateReq) returns (Response);   //授权用户数据权限
  rpc userAuthProjectIndex (UserAuthProjectIndexReq) returns (UserAuthProjectIndexResp); //获取用户数据权限列表
  rpc userAuthAreaMultiUpdate (UserAuthAreaMultiUpdateReq) returns (Response);   //授权用户数据权限
  rpc userAuthAreaIndex (UserAuthAreaIndexReq) returns (UserAuthAreaIndexResp); //获取用户数据权限列表
}

service Role {
  rpc roleCreate(RoleCreateReq) returns(Response); //添加角色
  rpc roleIndex(RoleIndexReq) returns(RoleIndexResp); //获取角色列表
  rpc roleUpdate(RoleUpdateReq) returns(Response); //更新角色
  rpc roleDelete(RoleDeleteReq) returns(Response); //删除角色
  rpc roleMenuUpdate(RoleMenuUpdateReq) returns(Response); //添加角色
  rpc roleApiAuth(RoleApiAuthReq) returns(Response);   //角色API鉴权
  rpc roleApiMultiUpdate(RoleApiMultiUpdateReq) returns (Response);  //更新角色API权限
  rpc roleApiIndex(RoleApiIndexReq) returns (RoleApiIndexResp); //获取角色API权限列表
}

service Menu {
  rpc menuCreate(MenuCreateReq) returns(Response); //添加菜单
  rpc menuIndex(MenuIndexReq) returns(MenuIndexResp); //获取菜单列表
  rpc menuUpdate(MenuUpdateReq) returns(Response); //更新菜单
  rpc menuDelete(MenuDeleteReq) returns(Response); //删除菜单
}

service Common {
  rpc config(Response) returns(configResp); //添加菜单
}

service Log {
  rpc loginLogIndex(LoginLogIndexReq) returns (LoginLogIndexResp); //获取登录日志列表
  rpc operLogIndex(OperLogIndexReq) returns (OperLogIndexResp);    //获取操作日志列表
  rpc loginLogCreate(LoginLogCreateReq) returns(Response);         //登录日志数据入库
  rpc operLogCreate(OperLogCreateReq) returns(Response);           //操作日志数据入库
}

service Api {
  rpc apiCreate(ApiCreateReq) returns(Response);   //添加接口
  rpc apiIndex(ApiIndexReq) returns(ApiIndexResp); //获取接口列表
  rpc apiUpdate(ApiUpdateReq) returns(Response);   //更新接口
  rpc apiDelete(ApiDeleteReq) returns(Response);   //删除接口
}


//项目管理
service ProjectManage {
  //新增项目
  rpc projectInfoCreate (ProjectInfo) returns (Response);
  //更新项目
  rpc projectInfoUpdate (ProjectInfo) returns (Response);
  //删除项目
  rpc projectInfoDelete (ProjectInfoDeleteReq) returns (Response);
  //获取项目信息详情
  rpc projectInfoRead (ProjectInfoReadReq) returns (ProjectInfo);
  //获取项目信息列表
  rpc projectInfoIndex (ProjectInfoIndexReq) returns (ProjectInfoIndexResp);
}


//项目区域管理
service AreaManage {
  //新增区域
  rpc areaInfoCreate (AreaInfo) returns (Response);
  //更新区域
  rpc areaInfoUpdate (AreaInfo) returns (Response);
  //删除区域
  rpc areaInfoDelete (AreaInfoDeleteReq) returns (Response);
  //获取区域信息详情
  rpc areaInfoRead (AreaInfoReadReq) returns (AreaInfo);
  //获取区域信息列表
  rpc areaInfoIndex (AreaInfoIndexReq) returns (AreaInfoIndexResp);
  //获取区域信息树
  rpc areaInfoTree (AreaInfoTreeReq) returns (AreaInfoTreeResp);
}



//----------------------------------------------------------------------------------------------

message Point{
  double  longitude = 1;//经度
  double  latitude = 2;//纬度
}

message Response {
}

message PageInfo {
    int64 page = 1;
    int64 size = 2;
    //排序信息
    repeated OrderBy orders = 3;
    message OrderBy {
        //排序的字段名
        string filed = 1;
        //排序方式：0 aes, 1 desc
        int64 sort = 2;
    }
}

//----------------------------------------------------------------------------------------------


message ProjectInfo {
  int64 createdTime = 1; //创建时间（只读）
  int64 projectID = 2; //项目id（只读）
  string projectName = 3; //项目名称（读写）
  google.protobuf.StringValue companyName = 4; //项目所属公司名称（读写）
  int64 userID = 5;//所属用户id
  google.protobuf.StringValue region = 6; //项目省市区县（读写）
  google.protobuf.StringValue address = 7; //项目详细地址（读写）
  google.protobuf.StringValue desc = 8; //项目备注（读写）
}

message ProjectInfoDeleteReq {
  int64 projectID = 1; //项目id
}

message ProjectInfoReadReq {
  int64 projectID = 1; //项目id
}

message ProjectInfoIndexReq {
  PageInfo page = 1; //进行数据分页（不传默认2000相当于全部）
  string projectName = 2; //过滤条件: 项目名称
  repeated int64 projectIDs = 3; //过滤条件: 过滤项目id列表
}

message ProjectInfoIndexResp {
  int64 total = 1; //总数
  repeated ProjectInfo list = 2; //项目列表
}

//----------------------------------------------------------------------------------------------

message AreaInfo {
  int64 createdTime = 1; //创建时间（只读）
  int64 areaID = 2; //项目区域id（只读）
  int64 parentAreaID = 3; //上级项目区域id（只读）
  int64 projectID = 4; //项目id（只读）
  string areaName = 5; //项目区域名称（读写）
  Point Position = 6; //项目区域定位，默认百度坐标系（读写）
  google.protobuf.StringValue desc = 7; //项目区域备注（读写）
  repeated AreaInfo children = 8; //下级项目区域列表（只读）
}

message AreaInfoDeleteReq {
  int64 areaID = 1; //项目区域id
}

message AreaInfoReadReq {
  int64 areaID = 1; //项目区域id
}

message AreaInfoIndexReq {
  PageInfo page = 1; //进行数据分页（不传默认2000相当于全部）
  int64 projectID = 2; //项目id
  repeated int64 projectIDs = 3; //项目ids
  int64 areaID = 4; //区域id
  repeated int64 areaIDs = 5; //区域ids
}

message AreaInfoIndexResp {
  int64 total = 1; //总数
  repeated AreaInfo list = 2; //项目区域列表
}

message AreaInfoTreeReq {
  int64 projectID = 1; //二选一条件: 项目id
  int64 areaID = 2; //二选一条件: 区域id
}

message AreaInfoTreeResp {
  AreaInfo tree = 1; //项目区域树
}


//----------------------------------------------------------------------------------------------





message AuthApiInfo{
  string route = 1;
  int64 method = 2;
}

message RoleApiMultiUpdateReq{
  uint64 roleID = 1;//角色ID
  repeated AuthApiInfo list = 2;//API列表数据
}

message RoleApiIndexReq{
  uint64 roleID = 1;//角色ID
}

message RoleApiIndexResp{
  int64 total = 1;
  repeated AuthApiInfo list = 2;//API列表数据
}


message DateRange{
  string start = 1;
  string end = 2;
}

message LoginLogIndexReq{
  PageInfo page       = 1;  // 分页信息 只获取一个则不填
  string ipAddr = 2;        // 登录IP地址
  string loginLocation = 3; // 登录地点
  DateRange date = 4;       // 时间范围
}

message LoginLogIndexData {
  int64  userID = 1;           // 用户id
  string userName = 2;      // 登录账号
  string ipAddr = 3;        // 登录IP地址
  string loginLocation = 4; // 登录地点
  string browser = 5;       // 浏览器
  string os = 6;            // 操作系统
  int64 code = 7;           // 登录状态（200成功 其它失败）
  string msg = 8;           // 提示消息
  int64  createdTime = 9;   // 登录时间
}

message LoginLogIndexResp{
  repeated LoginLogIndexData info = 1;
  int64 total = 2; //总记录数
}

message OperLogIndexReq{
  PageInfo page       = 1; //分页信息 只获取一个则不填
  string operName     = 2; //按操作名称查找
  string operUserName = 3; //按操作人员名称查找
  int64 businessType  = 4; //按业务类型（1新增 2修改 3删除 4查询）查找
}

message OperLogIndexData {
    int64  userID = 1;                //用户id
    string operUserName = 2;       //操作人员名称
    string operName = 3;           //操作名称
    int64  businessType = 4;       //业务类型（1新增 2修改 3删除 4查询）
    string uri = 5;                //请求地址
    string operIpAddr = 6;         //操作主机地址
    string operLocation = 7;       //操作地点
    string req = 8;                //请求参数
    string resp = 9;               //返回参数
    int64  code = 10;               //登录状态（200成功 其它失败）
    string msg = 11;               //提示消息
    int64  createdTime = 12;       //操作时间
}

message OperLogIndexResp{
  repeated OperLogIndexData info = 1;
  int64 total = 2; //总记录数
}

message LoginLogCreateReq{
  int64  userID = 1;           // 用户id
  string userName = 2;      // 登录账号
  string ipAddr = 3;        // 登录IP地址
  string loginLocation = 4; // 登录地点
  string browser = 5;       // 浏览器
  string os = 6;            // 操作系统
  int64 code = 7;           // 登录状态（200成功 其它失败）
  string msg = 8;           // 提示消息
}

message OperLogCreateReq{
  int64  userID = 1;                //用户id
  string operUserName = 2;       //操作人员名称
  string operName = 3;           //操作名称
  int64  businessType = 4;       //业务类型（1新增 2修改 3删除 4查询）
  string uri = 5;                //请求地址
  string route = 6;              //接口路由
  string operIpAddr = 7;         //操作主机地址
  string operLocation = 8;       //操作地点
  string req = 9;                //请求参数
  string resp = 10;              //返回参数
  int64  code = 11;              //返回状态（200成功 其它失败）
  string msg = 12;               //提示消息
}

//用户属性信息
message UserInfo{
  int64  userID = 1;
  string userName =2;
  string password = 3;
  string email = 4;
  string phone =5;
  string wechat = 6;
  string lastIP =7;
  string regIP =8;
  string nickName =9;
  string city =10;
  string country =11;
  string province =12;
  string language =13;
  string headImgUrl =14;
  int64  createdTime =15;
  int64  role = 16;
  int64  sex =17;
  int64  isAllData =18;
}



message UserCreateResp{
  int64 userID = 1;//用户id
}

message UserCheckTokenReq{
  string token = 1;
  string ip = 2;
}

message UserCheckTokenResp{
  string token = 1;  //如果时间不多会更新jwt，需要判断jwt是否为“” 如果不为空，则需要更新用户的token
  int64 userID = 2;
  int64 role = 3;
  int64 isAllData = 4;
}

message RoleApiAuthReq{
  int64 roleID = 1;
  string path = 2;
  string method = 3;
}


message UserIndexReq{
  PageInfo page       = 1;//分页信息 只获取一个则不填 搜索的字段: userID:用户id userName:登录用户名  email:邮箱  phone:手机号
  string userName = 2;
  string phone = 3;
  string email = 4;
}

message UserIndexResp{
  repeated UserInfo info = 1;
  int64 total = 2;
}



message UserReadReq{
  int64 userID=1;
}


message UserDeleteReq{
  int64 userID = 1;
}

message JwtToken{
  string accessToken = 1;
  int64 accessExpire = 2;
  int64 refreshAfter = 3;
}

message UserLoginReq{
    string account = 1; //登录账号(支持用户名,手机号登录) 账号密码登录时需要填写
    int32 pwdType = 2;//账号密码登录时需要填写.0,无密码 1，明文 2，md5加密
    string password =3;//密码，建议md5转换 密码登录时需要填写
    string loginType =4;//验证类型 phone 手机号 wxOpen 微信开放平台 wxIn 微信内 wxMiniP 微信小程序 pwd 账号密码
    string code = 5;//验证码    微信登录填code
    string codeID = 6;//验证码编号 微信登录填state
    string ip = 7;//透传请求的 ip
}

message UserLoginResp{
  UserInfo info = 1;
  JwtToken token =2;
}

//登录信息注册,注册第一步(注册核心登录信息) 返回一个jwt用来第二步注册
message UserRegister1Req{
  string regType =1; //注册方式:	phone手机号注册 wxopen 微信开放平台登录 wxin 微信内登录 wxminip 微信小程序 pwd 账号密码注册
  string note =2;    //手机号注册时填写手机号 账号密码注册时填写userName
  string code =3;    //验证码    微信登录填code 账号密码登录时填写密码
  string codeID =4;  //验证码编号 微信登录填state
  string regIP =5;
}

//返回token token在第二步使用
message UserRegister1Resp{
  string token = 1;//如果返回token则需要第二步填写信息,如果为空则为注册成功
}

message UserRegister2Req{
  string token = 1; //注册第一步的token
  string regIP =8;
  UserInfo info = 2;//填写用户信息
}

//----------------------------------------------------------------------------------------------

message UserAuthProject {
    int64 createdTime = 1; //创建时间（只读）
    int64 projectID = 5; //权限数据ID
}

message UserAuthProjectMultiUpdateReq {
    int64 userID = 1; //用户ID（必填，雪花ID）
    repeated UserAuthProject projects = 3; //权限数据IDs（必填）
}

message UserAuthProjectIndexReq {
    PageInfo page = 1 ; //进行数据分页（不传默认2000相当于全部）
    int64 userID = 2; //用户ID（必填，雪花ID）
}

message UserAuthProjectIndexResp {
    int64 total = 1;           //总数
    repeated UserAuthProject list = 2; //用户数据权限列表
}


message UserAuthArea {
  int64 areaID = 1; //项目id
}

message UserAuthAreaMultiUpdateReq {
  int64 userID = 1; //用户ID（必填，雪花ID）
  int64 projectID = 3; //项目id
  repeated UserAuthArea areas = 4; //权限数据IDs
}

message UserAuthAreaIndexReq {
  PageInfo page = 1 ; //进行数据分页（不传默认2000相当于全部）
  int64 userID = 2; //用户ID（必填，雪花ID）
  int64 projectID = 3; //项目id 可选

}
message UserAuthAreaIndexResp {
  int64 total = 1;           //总数
  repeated UserAuthArea list = 2; //用户数据权限列表
}


//----------------------------------------------------------------------------------------------

//角色相关信息
message RoleCreateReq{
  string name= 1;          // 角色名称
  string remark = 2;       // 备注
  int64  status = 3;       // 状态 1:启用,2:禁用
}

message RoleIndexReq{
  PageInfo page = 1;//分页信息
  string name = 2;
  int64 status = 3;
}

message RoleIndexResp{
  repeated  RoleIndexData list =1;
  int64 total = 2;
}

message RoleIndexData{
  int64   id = 1;
  string  name = 2;
  string  remark = 3;
  int64   createdTime  =4;
  int64   status = 5;
  repeated int64  roleMenuID = 6;
}

message RoleUpdateReq{
  int64 id = 1;
  string name = 2;
  string remark = 3;
  int64 status = 4;
}

message RoleDeleteReq{
  int64 id = 1;
}
message RoleMenuUpdateReq{
  int64 id = 1;
  repeated int64 menuID = 2;
}

//菜单相关信息
message MenuCreateReq{
  string name = 1;
  int64 parentID = 2;
  int64 type = 3;
  string path = 4;
  string component = 5;
  string icon = 6;
  string redirect = 7;
  int64 order = 8;
  int64 hideInMenu = 9;
  int64 role = 10;
}

message MenuIndexReq{
  int64  role = 1;
  string name = 2;
  string path = 3;

}
message MenuData{
  int64 id = 1;
  string name = 2;
  int64 parentID = 3;
  int64 type = 4;
  string path = 5;
  string component = 6;
  string icon = 7;
  string redirect = 8;
  int64 createTime = 9;
  int64 order = 10;
  int64 hideInMenu = 11;
}
message MenuIndexResp{
  repeated MenuData list = 1;
}
message MenuUpdateReq{
  int64 id = 1;
  string name = 2;
  int64 parentID = 3;
  int64 type = 4;
  string path = 5;
  string component = 6;
  string icon = 7;
  string redirect = 8;
  int64 order = 9;
  int64 hideInMenu = 10;
}

message MenuDeleteReq{
  int64 id = 1;
}

message Map{
  string mode = 1;       //坐标系 默认百度坐标系
  string accessKey = 2;  //设备地图key
}
message configResp{
  Map map = 1;           //设备地图相关配置
}

//接口相关信息
message ApiCreateReq{
  string route = 1;         // 接口路由
  int64 method = 2;         // 接口请求方式: POST GET
  string group = 3;         // 接口分组
  string name = 4;          // 接口名称
  int64  businessType = 5;  // 业务类型（1新增 2修改 3删除 4查询 5其它)
}

message ApiIndexReq{
  PageInfo page = 1;// 分页信息
  string route = 2; // 接口路由
  int64 method = 3; // 接口请求方式: POST GET
  string group = 4; // 接口分组
  string name = 5;  // 接口名称
}
message ApiData{
  int64 id = 1;            // 接口编号
  string route = 2;        // 接口路由
  int64 method = 3;        // 接口请求方式: POST GET
  string group = 4;        // 接口分组
  string name = 5;         // 接口名称
  int64  businessType = 6; // 业务类型（1新增 2修改 3删除 4查询 5其它)
}

message ApiIndexResp{
  repeated ApiData list = 1; // 接口列表数据
  int64 total = 2;           // 接口列表总记录数
}

message ApiUpdateReq{
  int64 id = 1;            // 接口编号
  string route = 2;        // 接口路由
  int64 method = 3;        // 接口请求方式: POST GET
  string group = 4;        // 接口分组
  string name = 5;         // 接口名称
}

message ApiDeleteReq{
  int64 id = 1;            // 接口编号
}