// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: proto/dm.proto

//import "proto/schemaInfo.proto";

package dm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceAuth_LoginAuth_FullMethodName      = "/dm.DeviceAuth/loginAuth"
	DeviceAuth_AccessAuth_FullMethodName     = "/dm.DeviceAuth/accessAuth"
	DeviceAuth_RootCheck_FullMethodName      = "/dm.DeviceAuth/rootCheck"
	DeviceAuth_DeviceRegister_FullMethodName = "/dm.DeviceAuth/deviceRegister"
)

// DeviceAuthClient is the client API for DeviceAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceAuthClient interface {
	//设备登录认证
	LoginAuth(ctx context.Context, in *LoginAuthReq, opts ...grpc.CallOption) (*Response, error)
	//设备操作认证
	AccessAuth(ctx context.Context, in *AccessAuthReq, opts ...grpc.CallOption) (*Response, error)
	//鉴定是否是root账号
	RootCheck(ctx context.Context, in *RootCheckReq, opts ...grpc.CallOption) (*Response, error)
	//设备动态注册
	DeviceRegister(ctx context.Context, in *DeviceRegisterReq, opts ...grpc.CallOption) (*DeviceRegisterResp, error)
}

type deviceAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceAuthClient(cc grpc.ClientConnInterface) DeviceAuthClient {
	return &deviceAuthClient{cc}
}

func (c *deviceAuthClient) LoginAuth(ctx context.Context, in *LoginAuthReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DeviceAuth_LoginAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAuthClient) AccessAuth(ctx context.Context, in *AccessAuthReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DeviceAuth_AccessAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAuthClient) RootCheck(ctx context.Context, in *RootCheckReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DeviceAuth_RootCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAuthClient) DeviceRegister(ctx context.Context, in *DeviceRegisterReq, opts ...grpc.CallOption) (*DeviceRegisterResp, error) {
	out := new(DeviceRegisterResp)
	err := c.cc.Invoke(ctx, DeviceAuth_DeviceRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceAuthServer is the server API for DeviceAuth service.
// All implementations must embed UnimplementedDeviceAuthServer
// for forward compatibility
type DeviceAuthServer interface {
	//设备登录认证
	LoginAuth(context.Context, *LoginAuthReq) (*Response, error)
	//设备操作认证
	AccessAuth(context.Context, *AccessAuthReq) (*Response, error)
	//鉴定是否是root账号
	RootCheck(context.Context, *RootCheckReq) (*Response, error)
	//设备动态注册
	DeviceRegister(context.Context, *DeviceRegisterReq) (*DeviceRegisterResp, error)
	mustEmbedUnimplementedDeviceAuthServer()
}

// UnimplementedDeviceAuthServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceAuthServer struct {
}

func (UnimplementedDeviceAuthServer) LoginAuth(context.Context, *LoginAuthReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAuth not implemented")
}
func (UnimplementedDeviceAuthServer) AccessAuth(context.Context, *AccessAuthReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessAuth not implemented")
}
func (UnimplementedDeviceAuthServer) RootCheck(context.Context, *RootCheckReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RootCheck not implemented")
}
func (UnimplementedDeviceAuthServer) DeviceRegister(context.Context, *DeviceRegisterReq) (*DeviceRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceRegister not implemented")
}
func (UnimplementedDeviceAuthServer) mustEmbedUnimplementedDeviceAuthServer() {}

// UnsafeDeviceAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceAuthServer will
// result in compilation errors.
type UnsafeDeviceAuthServer interface {
	mustEmbedUnimplementedDeviceAuthServer()
}

func RegisterDeviceAuthServer(s grpc.ServiceRegistrar, srv DeviceAuthServer) {
	s.RegisterService(&DeviceAuth_ServiceDesc, srv)
}

func _DeviceAuth_LoginAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAuthServer).LoginAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceAuth_LoginAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAuthServer).LoginAuth(ctx, req.(*LoginAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAuth_AccessAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAuthServer).AccessAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceAuth_AccessAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAuthServer).AccessAuth(ctx, req.(*AccessAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAuth_RootCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RootCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAuthServer).RootCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceAuth_RootCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAuthServer).RootCheck(ctx, req.(*RootCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAuth_DeviceRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAuthServer).DeviceRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceAuth_DeviceRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAuthServer).DeviceRegister(ctx, req.(*DeviceRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceAuth_ServiceDesc is the grpc.ServiceDesc for DeviceAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.DeviceAuth",
	HandlerType: (*DeviceAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "loginAuth",
			Handler:    _DeviceAuth_LoginAuth_Handler,
		},
		{
			MethodName: "accessAuth",
			Handler:    _DeviceAuth_AccessAuth_Handler,
		},
		{
			MethodName: "rootCheck",
			Handler:    _DeviceAuth_RootCheck_Handler,
		},
		{
			MethodName: "deviceRegister",
			Handler:    _DeviceAuth_DeviceRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	DeviceManage_DeviceInfoCreate_FullMethodName         = "/dm.DeviceManage/deviceInfoCreate"
	DeviceManage_DeviceInfoUpdate_FullMethodName         = "/dm.DeviceManage/deviceInfoUpdate"
	DeviceManage_DeviceInfoDelete_FullMethodName         = "/dm.DeviceManage/deviceInfoDelete"
	DeviceManage_DeviceInfoIndex_FullMethodName          = "/dm.DeviceManage/deviceInfoIndex"
	DeviceManage_DeviceInfoRead_FullMethodName           = "/dm.DeviceManage/deviceInfoRead"
	DeviceManage_DeviceGatewayMultiCreate_FullMethodName = "/dm.DeviceManage/deviceGatewayMultiCreate"
	DeviceManage_DeviceGatewayIndex_FullMethodName       = "/dm.DeviceManage/deviceGatewayIndex"
	DeviceManage_DeviceGatewayMultiDelete_FullMethodName = "/dm.DeviceManage/deviceGatewayMultiDelete"
	DeviceManage_DeviceInfoCount_FullMethodName          = "/dm.DeviceManage/deviceInfoCount"
	DeviceManage_DeviceTypeCount_FullMethodName          = "/dm.DeviceManage/deviceTypeCount"
)

// DeviceManageClient is the client API for DeviceManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceManageClient interface {
	//新增设备
	DeviceInfoCreate(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Response, error)
	//更新设备
	DeviceInfoUpdate(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Response, error)
	//删除设备
	DeviceInfoDelete(ctx context.Context, in *DeviceInfoDeleteReq, opts ...grpc.CallOption) (*Response, error)
	//获取设备信息列表
	DeviceInfoIndex(ctx context.Context, in *DeviceInfoIndexReq, opts ...grpc.CallOption) (*DeviceInfoIndexResp, error)
	//获取设备信息详情
	DeviceInfoRead(ctx context.Context, in *DeviceInfoReadReq, opts ...grpc.CallOption) (*DeviceInfo, error)
	//绑定网关下子设备设备
	DeviceGatewayMultiCreate(ctx context.Context, in *DeviceGatewayMultiCreateReq, opts ...grpc.CallOption) (*Response, error)
	//获取绑定信息的设备信息列表
	DeviceGatewayIndex(ctx context.Context, in *DeviceGatewayIndexReq, opts ...grpc.CallOption) (*DeviceGatewayIndexResp, error)
	//删除网关下子设备
	DeviceGatewayMultiDelete(ctx context.Context, in *DeviceGatewayMultiDeleteReq, opts ...grpc.CallOption) (*Response, error)
	//设备计数
	DeviceInfoCount(ctx context.Context, in *DeviceInfoCountReq, opts ...grpc.CallOption) (*DeviceInfoCountResp, error)
	//设备类型
	DeviceTypeCount(ctx context.Context, in *DeviceTypeCountReq, opts ...grpc.CallOption) (*DeviceTypeCountResp, error)
}

type deviceManageClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceManageClient(cc grpc.ClientConnInterface) DeviceManageClient {
	return &deviceManageClient{cc}
}

func (c *deviceManageClient) DeviceInfoCreate(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoUpdate(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoDelete(ctx context.Context, in *DeviceInfoDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoIndex(ctx context.Context, in *DeviceInfoIndexReq, opts ...grpc.CallOption) (*DeviceInfoIndexResp, error) {
	out := new(DeviceInfoIndexResp)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoRead(ctx context.Context, in *DeviceInfoReadReq, opts ...grpc.CallOption) (*DeviceInfo, error) {
	out := new(DeviceInfo)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceGatewayMultiCreate(ctx context.Context, in *DeviceGatewayMultiCreateReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceGatewayMultiCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceGatewayIndex(ctx context.Context, in *DeviceGatewayIndexReq, opts ...grpc.CallOption) (*DeviceGatewayIndexResp, error) {
	out := new(DeviceGatewayIndexResp)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceGatewayIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceGatewayMultiDelete(ctx context.Context, in *DeviceGatewayMultiDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceGatewayMultiDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoCount(ctx context.Context, in *DeviceInfoCountReq, opts ...grpc.CallOption) (*DeviceInfoCountResp, error) {
	out := new(DeviceInfoCountResp)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceInfoCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceTypeCount(ctx context.Context, in *DeviceTypeCountReq, opts ...grpc.CallOption) (*DeviceTypeCountResp, error) {
	out := new(DeviceTypeCountResp)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceTypeCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceManageServer is the server API for DeviceManage service.
// All implementations must embed UnimplementedDeviceManageServer
// for forward compatibility
type DeviceManageServer interface {
	//新增设备
	DeviceInfoCreate(context.Context, *DeviceInfo) (*Response, error)
	//更新设备
	DeviceInfoUpdate(context.Context, *DeviceInfo) (*Response, error)
	//删除设备
	DeviceInfoDelete(context.Context, *DeviceInfoDeleteReq) (*Response, error)
	//获取设备信息列表
	DeviceInfoIndex(context.Context, *DeviceInfoIndexReq) (*DeviceInfoIndexResp, error)
	//获取设备信息详情
	DeviceInfoRead(context.Context, *DeviceInfoReadReq) (*DeviceInfo, error)
	//绑定网关下子设备设备
	DeviceGatewayMultiCreate(context.Context, *DeviceGatewayMultiCreateReq) (*Response, error)
	//获取绑定信息的设备信息列表
	DeviceGatewayIndex(context.Context, *DeviceGatewayIndexReq) (*DeviceGatewayIndexResp, error)
	//删除网关下子设备
	DeviceGatewayMultiDelete(context.Context, *DeviceGatewayMultiDeleteReq) (*Response, error)
	//设备计数
	DeviceInfoCount(context.Context, *DeviceInfoCountReq) (*DeviceInfoCountResp, error)
	//设备类型
	DeviceTypeCount(context.Context, *DeviceTypeCountReq) (*DeviceTypeCountResp, error)
	mustEmbedUnimplementedDeviceManageServer()
}

// UnimplementedDeviceManageServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceManageServer struct {
}

func (UnimplementedDeviceManageServer) DeviceInfoCreate(context.Context, *DeviceInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoCreate not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoUpdate(context.Context, *DeviceInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoUpdate not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoDelete(context.Context, *DeviceInfoDeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoDelete not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoIndex(context.Context, *DeviceInfoIndexReq) (*DeviceInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoIndex not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoRead(context.Context, *DeviceInfoReadReq) (*DeviceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoRead not implemented")
}
func (UnimplementedDeviceManageServer) DeviceGatewayMultiCreate(context.Context, *DeviceGatewayMultiCreateReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceGatewayMultiCreate not implemented")
}
func (UnimplementedDeviceManageServer) DeviceGatewayIndex(context.Context, *DeviceGatewayIndexReq) (*DeviceGatewayIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceGatewayIndex not implemented")
}
func (UnimplementedDeviceManageServer) DeviceGatewayMultiDelete(context.Context, *DeviceGatewayMultiDeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceGatewayMultiDelete not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoCount(context.Context, *DeviceInfoCountReq) (*DeviceInfoCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoCount not implemented")
}
func (UnimplementedDeviceManageServer) DeviceTypeCount(context.Context, *DeviceTypeCountReq) (*DeviceTypeCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceTypeCount not implemented")
}
func (UnimplementedDeviceManageServer) mustEmbedUnimplementedDeviceManageServer() {}

// UnsafeDeviceManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceManageServer will
// result in compilation errors.
type UnsafeDeviceManageServer interface {
	mustEmbedUnimplementedDeviceManageServer()
}

func RegisterDeviceManageServer(s grpc.ServiceRegistrar, srv DeviceManageServer) {
	s.RegisterService(&DeviceManage_ServiceDesc, srv)
}

func _DeviceManage_DeviceInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoCreate(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoUpdate(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoDelete(ctx, req.(*DeviceInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoIndex(ctx, req.(*DeviceInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoRead(ctx, req.(*DeviceInfoReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceGatewayMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceGatewayMultiCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceGatewayMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceGatewayMultiCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceGatewayMultiCreate(ctx, req.(*DeviceGatewayMultiCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceGatewayIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceGatewayIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceGatewayIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceGatewayIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceGatewayIndex(ctx, req.(*DeviceGatewayIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceGatewayMultiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceGatewayMultiDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceGatewayMultiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceGatewayMultiDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceGatewayMultiDelete(ctx, req.(*DeviceGatewayMultiDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceInfoCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoCount(ctx, req.(*DeviceInfoCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceTypeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTypeCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceTypeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceTypeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceTypeCount(ctx, req.(*DeviceTypeCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceManage_ServiceDesc is the grpc.ServiceDesc for DeviceManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.DeviceManage",
	HandlerType: (*DeviceManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "deviceInfoCreate",
			Handler:    _DeviceManage_DeviceInfoCreate_Handler,
		},
		{
			MethodName: "deviceInfoUpdate",
			Handler:    _DeviceManage_DeviceInfoUpdate_Handler,
		},
		{
			MethodName: "deviceInfoDelete",
			Handler:    _DeviceManage_DeviceInfoDelete_Handler,
		},
		{
			MethodName: "deviceInfoIndex",
			Handler:    _DeviceManage_DeviceInfoIndex_Handler,
		},
		{
			MethodName: "deviceInfoRead",
			Handler:    _DeviceManage_DeviceInfoRead_Handler,
		},
		{
			MethodName: "deviceGatewayMultiCreate",
			Handler:    _DeviceManage_DeviceGatewayMultiCreate_Handler,
		},
		{
			MethodName: "deviceGatewayIndex",
			Handler:    _DeviceManage_DeviceGatewayIndex_Handler,
		},
		{
			MethodName: "deviceGatewayMultiDelete",
			Handler:    _DeviceManage_DeviceGatewayMultiDelete_Handler,
		},
		{
			MethodName: "deviceInfoCount",
			Handler:    _DeviceManage_DeviceInfoCount_Handler,
		},
		{
			MethodName: "deviceTypeCount",
			Handler:    _DeviceManage_DeviceTypeCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	ProductManage_ProductInfoCreate_FullMethodName      = "/dm.ProductManage/productInfoCreate"
	ProductManage_ProductInfoUpdate_FullMethodName      = "/dm.ProductManage/productInfoUpdate"
	ProductManage_ProductInfoDelete_FullMethodName      = "/dm.ProductManage/productInfoDelete"
	ProductManage_ProductInfoIndex_FullMethodName       = "/dm.ProductManage/productInfoIndex"
	ProductManage_ProductInfoRead_FullMethodName        = "/dm.ProductManage/productInfoRead"
	ProductManage_ProductSchemaUpdate_FullMethodName    = "/dm.ProductManage/productSchemaUpdate"
	ProductManage_ProductSchemaCreate_FullMethodName    = "/dm.ProductManage/productSchemaCreate"
	ProductManage_ProductSchemaDelete_FullMethodName    = "/dm.ProductManage/productSchemaDelete"
	ProductManage_ProductSchemaIndex_FullMethodName     = "/dm.ProductManage/productSchemaIndex"
	ProductManage_ProductSchemaTslImport_FullMethodName = "/dm.ProductManage/productSchemaTslImport"
	ProductManage_ProductSchemaTslRead_FullMethodName   = "/dm.ProductManage/productSchemaTslRead"
	ProductManage_ProductCustomRead_FullMethodName      = "/dm.ProductManage/productCustomRead"
	ProductManage_ProductCustomUpdate_FullMethodName    = "/dm.ProductManage/productCustomUpdate"
)

// ProductManageClient is the client API for ProductManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductManageClient interface {
	//新增产品
	ProductInfoCreate(ctx context.Context, in *ProductInfo, opts ...grpc.CallOption) (*Response, error)
	//更新产品
	ProductInfoUpdate(ctx context.Context, in *ProductInfo, opts ...grpc.CallOption) (*Response, error)
	//删除产品
	ProductInfoDelete(ctx context.Context, in *ProductInfoDeleteReq, opts ...grpc.CallOption) (*Response, error)
	//获取产品信息列表
	ProductInfoIndex(ctx context.Context, in *ProductInfoIndexReq, opts ...grpc.CallOption) (*ProductInfoIndexResp, error)
	//获取产品信息详情
	ProductInfoRead(ctx context.Context, in *ProductInfoReadReq, opts ...grpc.CallOption) (*ProductInfo, error)
	//更新产品物模型
	ProductSchemaUpdate(ctx context.Context, in *ProductSchemaUpdateReq, opts ...grpc.CallOption) (*Response, error)
	//新增产品
	ProductSchemaCreate(ctx context.Context, in *ProductSchemaCreateReq, opts ...grpc.CallOption) (*Response, error)
	//删除产品
	ProductSchemaDelete(ctx context.Context, in *ProductSchemaDeleteReq, opts ...grpc.CallOption) (*Response, error)
	//获取产品信息列表
	ProductSchemaIndex(ctx context.Context, in *ProductSchemaIndexReq, opts ...grpc.CallOption) (*ProductSchemaIndexResp, error)
	//删除产品
	ProductSchemaTslImport(ctx context.Context, in *ProductSchemaTslImportReq, opts ...grpc.CallOption) (*Response, error)
	//获取产品信息列表
	ProductSchemaTslRead(ctx context.Context, in *ProductSchemaTslReadReq, opts ...grpc.CallOption) (*ProductSchemaTslReadResp, error)
	// 脚本管理
	ProductCustomRead(ctx context.Context, in *ProductCustomReadReq, opts ...grpc.CallOption) (*ProductCustom, error)
	ProductCustomUpdate(ctx context.Context, in *ProductCustom, opts ...grpc.CallOption) (*Response, error)
}

type productManageClient struct {
	cc grpc.ClientConnInterface
}

func NewProductManageClient(cc grpc.ClientConnInterface) ProductManageClient {
	return &productManageClient{cc}
}

func (c *productManageClient) ProductInfoCreate(ctx context.Context, in *ProductInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ProductManage_ProductInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductInfoUpdate(ctx context.Context, in *ProductInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ProductManage_ProductInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductInfoDelete(ctx context.Context, in *ProductInfoDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ProductManage_ProductInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductInfoIndex(ctx context.Context, in *ProductInfoIndexReq, opts ...grpc.CallOption) (*ProductInfoIndexResp, error) {
	out := new(ProductInfoIndexResp)
	err := c.cc.Invoke(ctx, ProductManage_ProductInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductInfoRead(ctx context.Context, in *ProductInfoReadReq, opts ...grpc.CallOption) (*ProductInfo, error) {
	out := new(ProductInfo)
	err := c.cc.Invoke(ctx, ProductManage_ProductInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaUpdate(ctx context.Context, in *ProductSchemaUpdateReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ProductManage_ProductSchemaUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaCreate(ctx context.Context, in *ProductSchemaCreateReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ProductManage_ProductSchemaCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaDelete(ctx context.Context, in *ProductSchemaDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ProductManage_ProductSchemaDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaIndex(ctx context.Context, in *ProductSchemaIndexReq, opts ...grpc.CallOption) (*ProductSchemaIndexResp, error) {
	out := new(ProductSchemaIndexResp)
	err := c.cc.Invoke(ctx, ProductManage_ProductSchemaIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaTslImport(ctx context.Context, in *ProductSchemaTslImportReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ProductManage_ProductSchemaTslImport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaTslRead(ctx context.Context, in *ProductSchemaTslReadReq, opts ...grpc.CallOption) (*ProductSchemaTslReadResp, error) {
	out := new(ProductSchemaTslReadResp)
	err := c.cc.Invoke(ctx, ProductManage_ProductSchemaTslRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCustomRead(ctx context.Context, in *ProductCustomReadReq, opts ...grpc.CallOption) (*ProductCustom, error) {
	out := new(ProductCustom)
	err := c.cc.Invoke(ctx, ProductManage_ProductCustomRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCustomUpdate(ctx context.Context, in *ProductCustom, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ProductManage_ProductCustomUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductManageServer is the server API for ProductManage service.
// All implementations must embed UnimplementedProductManageServer
// for forward compatibility
type ProductManageServer interface {
	//新增产品
	ProductInfoCreate(context.Context, *ProductInfo) (*Response, error)
	//更新产品
	ProductInfoUpdate(context.Context, *ProductInfo) (*Response, error)
	//删除产品
	ProductInfoDelete(context.Context, *ProductInfoDeleteReq) (*Response, error)
	//获取产品信息列表
	ProductInfoIndex(context.Context, *ProductInfoIndexReq) (*ProductInfoIndexResp, error)
	//获取产品信息详情
	ProductInfoRead(context.Context, *ProductInfoReadReq) (*ProductInfo, error)
	//更新产品物模型
	ProductSchemaUpdate(context.Context, *ProductSchemaUpdateReq) (*Response, error)
	//新增产品
	ProductSchemaCreate(context.Context, *ProductSchemaCreateReq) (*Response, error)
	//删除产品
	ProductSchemaDelete(context.Context, *ProductSchemaDeleteReq) (*Response, error)
	//获取产品信息列表
	ProductSchemaIndex(context.Context, *ProductSchemaIndexReq) (*ProductSchemaIndexResp, error)
	//删除产品
	ProductSchemaTslImport(context.Context, *ProductSchemaTslImportReq) (*Response, error)
	//获取产品信息列表
	ProductSchemaTslRead(context.Context, *ProductSchemaTslReadReq) (*ProductSchemaTslReadResp, error)
	// 脚本管理
	ProductCustomRead(context.Context, *ProductCustomReadReq) (*ProductCustom, error)
	ProductCustomUpdate(context.Context, *ProductCustom) (*Response, error)
	mustEmbedUnimplementedProductManageServer()
}

// UnimplementedProductManageServer must be embedded to have forward compatible implementations.
type UnimplementedProductManageServer struct {
}

func (UnimplementedProductManageServer) ProductInfoCreate(context.Context, *ProductInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfoCreate not implemented")
}
func (UnimplementedProductManageServer) ProductInfoUpdate(context.Context, *ProductInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfoUpdate not implemented")
}
func (UnimplementedProductManageServer) ProductInfoDelete(context.Context, *ProductInfoDeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfoDelete not implemented")
}
func (UnimplementedProductManageServer) ProductInfoIndex(context.Context, *ProductInfoIndexReq) (*ProductInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfoIndex not implemented")
}
func (UnimplementedProductManageServer) ProductInfoRead(context.Context, *ProductInfoReadReq) (*ProductInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfoRead not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaUpdate(context.Context, *ProductSchemaUpdateReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaUpdate not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaCreate(context.Context, *ProductSchemaCreateReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaCreate not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaDelete(context.Context, *ProductSchemaDeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaDelete not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaIndex(context.Context, *ProductSchemaIndexReq) (*ProductSchemaIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaIndex not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaTslImport(context.Context, *ProductSchemaTslImportReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaTslImport not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaTslRead(context.Context, *ProductSchemaTslReadReq) (*ProductSchemaTslReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaTslRead not implemented")
}
func (UnimplementedProductManageServer) ProductCustomRead(context.Context, *ProductCustomReadReq) (*ProductCustom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCustomRead not implemented")
}
func (UnimplementedProductManageServer) ProductCustomUpdate(context.Context, *ProductCustom) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCustomUpdate not implemented")
}
func (UnimplementedProductManageServer) mustEmbedUnimplementedProductManageServer() {}

// UnsafeProductManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductManageServer will
// result in compilation errors.
type UnsafeProductManageServer interface {
	mustEmbedUnimplementedProductManageServer()
}

func RegisterProductManageServer(s grpc.ServiceRegistrar, srv ProductManageServer) {
	s.RegisterService(&ProductManage_ServiceDesc, srv)
}

func _ProductManage_ProductInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductInfoCreate(ctx, req.(*ProductInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductInfoUpdate(ctx, req.(*ProductInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductInfoDelete(ctx, req.(*ProductInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductInfoIndex(ctx, req.(*ProductInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfoReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductInfoRead(ctx, req.(*ProductInfoReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductSchemaUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaUpdate(ctx, req.(*ProductSchemaUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductSchemaCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaCreate(ctx, req.(*ProductSchemaCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductSchemaDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaDelete(ctx, req.(*ProductSchemaDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductSchemaIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaIndex(ctx, req.(*ProductSchemaIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaTslImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaTslImportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaTslImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductSchemaTslImport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaTslImport(ctx, req.(*ProductSchemaTslImportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaTslRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaTslReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaTslRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductSchemaTslRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaTslRead(ctx, req.(*ProductSchemaTslReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCustomRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCustomReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCustomRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductCustomRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCustomRead(ctx, req.(*ProductCustomReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCustomUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCustom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCustomUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductCustomUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCustomUpdate(ctx, req.(*ProductCustom))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductManage_ServiceDesc is the grpc.ServiceDesc for ProductManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.ProductManage",
	HandlerType: (*ProductManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "productInfoCreate",
			Handler:    _ProductManage_ProductInfoCreate_Handler,
		},
		{
			MethodName: "productInfoUpdate",
			Handler:    _ProductManage_ProductInfoUpdate_Handler,
		},
		{
			MethodName: "productInfoDelete",
			Handler:    _ProductManage_ProductInfoDelete_Handler,
		},
		{
			MethodName: "productInfoIndex",
			Handler:    _ProductManage_ProductInfoIndex_Handler,
		},
		{
			MethodName: "productInfoRead",
			Handler:    _ProductManage_ProductInfoRead_Handler,
		},
		{
			MethodName: "productSchemaUpdate",
			Handler:    _ProductManage_ProductSchemaUpdate_Handler,
		},
		{
			MethodName: "productSchemaCreate",
			Handler:    _ProductManage_ProductSchemaCreate_Handler,
		},
		{
			MethodName: "productSchemaDelete",
			Handler:    _ProductManage_ProductSchemaDelete_Handler,
		},
		{
			MethodName: "productSchemaIndex",
			Handler:    _ProductManage_ProductSchemaIndex_Handler,
		},
		{
			MethodName: "productSchemaTslImport",
			Handler:    _ProductManage_ProductSchemaTslImport_Handler,
		},
		{
			MethodName: "productSchemaTslRead",
			Handler:    _ProductManage_ProductSchemaTslRead_Handler,
		},
		{
			MethodName: "productCustomRead",
			Handler:    _ProductManage_ProductCustomRead_Handler,
		},
		{
			MethodName: "productCustomUpdate",
			Handler:    _ProductManage_ProductCustomUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	DeviceGroup_GroupInfoCreate_FullMethodName        = "/dm.DeviceGroup/groupInfoCreate"
	DeviceGroup_GroupInfoIndex_FullMethodName         = "/dm.DeviceGroup/groupInfoIndex"
	DeviceGroup_GroupInfoRead_FullMethodName          = "/dm.DeviceGroup/groupInfoRead"
	DeviceGroup_GroupInfoUpdate_FullMethodName        = "/dm.DeviceGroup/groupInfoUpdate"
	DeviceGroup_GroupInfoDelete_FullMethodName        = "/dm.DeviceGroup/groupInfoDelete"
	DeviceGroup_GroupDeviceMultiCreate_FullMethodName = "/dm.DeviceGroup/groupDeviceMultiCreate"
	DeviceGroup_GroupDeviceIndex_FullMethodName       = "/dm.DeviceGroup/groupDeviceIndex"
	DeviceGroup_GroupDeviceMultiDelete_FullMethodName = "/dm.DeviceGroup/groupDeviceMultiDelete"
)

// DeviceGroupClient is the client API for DeviceGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceGroupClient interface {
	//创建分组
	GroupInfoCreate(ctx context.Context, in *GroupInfoCreateReq, opts ...grpc.CallOption) (*Response, error)
	//获取分组信息列表
	GroupInfoIndex(ctx context.Context, in *GroupInfoIndexReq, opts ...grpc.CallOption) (*GroupInfoIndexResp, error)
	//获取分组信息详情
	GroupInfoRead(ctx context.Context, in *GroupInfoReadReq, opts ...grpc.CallOption) (*GroupInfo, error)
	//更新分组
	GroupInfoUpdate(ctx context.Context, in *GroupInfoUpdateReq, opts ...grpc.CallOption) (*Response, error)
	//删除分组
	GroupInfoDelete(ctx context.Context, in *GroupInfoDeleteReq, opts ...grpc.CallOption) (*Response, error)
	//创建分组设备
	GroupDeviceMultiCreate(ctx context.Context, in *GroupDeviceMultiCreateReq, opts ...grpc.CallOption) (*Response, error)
	//获取分组设备信息列表
	GroupDeviceIndex(ctx context.Context, in *GroupDeviceIndexReq, opts ...grpc.CallOption) (*GroupDeviceIndexResp, error)
	//删除分组设备
	GroupDeviceMultiDelete(ctx context.Context, in *GroupDeviceMultiDeleteReq, opts ...grpc.CallOption) (*Response, error)
}

type deviceGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceGroupClient(cc grpc.ClientConnInterface) DeviceGroupClient {
	return &deviceGroupClient{cc}
}

func (c *deviceGroupClient) GroupInfoCreate(ctx context.Context, in *GroupInfoCreateReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupInfoIndex(ctx context.Context, in *GroupInfoIndexReq, opts ...grpc.CallOption) (*GroupInfoIndexResp, error) {
	out := new(GroupInfoIndexResp)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupInfoRead(ctx context.Context, in *GroupInfoReadReq, opts ...grpc.CallOption) (*GroupInfo, error) {
	out := new(GroupInfo)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupInfoUpdate(ctx context.Context, in *GroupInfoUpdateReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupInfoDelete(ctx context.Context, in *GroupInfoDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupDeviceMultiCreate(ctx context.Context, in *GroupDeviceMultiCreateReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupDeviceMultiCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupDeviceIndex(ctx context.Context, in *GroupDeviceIndexReq, opts ...grpc.CallOption) (*GroupDeviceIndexResp, error) {
	out := new(GroupDeviceIndexResp)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupDeviceIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupDeviceMultiDelete(ctx context.Context, in *GroupDeviceMultiDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupDeviceMultiDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceGroupServer is the server API for DeviceGroup service.
// All implementations must embed UnimplementedDeviceGroupServer
// for forward compatibility
type DeviceGroupServer interface {
	//创建分组
	GroupInfoCreate(context.Context, *GroupInfoCreateReq) (*Response, error)
	//获取分组信息列表
	GroupInfoIndex(context.Context, *GroupInfoIndexReq) (*GroupInfoIndexResp, error)
	//获取分组信息详情
	GroupInfoRead(context.Context, *GroupInfoReadReq) (*GroupInfo, error)
	//更新分组
	GroupInfoUpdate(context.Context, *GroupInfoUpdateReq) (*Response, error)
	//删除分组
	GroupInfoDelete(context.Context, *GroupInfoDeleteReq) (*Response, error)
	//创建分组设备
	GroupDeviceMultiCreate(context.Context, *GroupDeviceMultiCreateReq) (*Response, error)
	//获取分组设备信息列表
	GroupDeviceIndex(context.Context, *GroupDeviceIndexReq) (*GroupDeviceIndexResp, error)
	//删除分组设备
	GroupDeviceMultiDelete(context.Context, *GroupDeviceMultiDeleteReq) (*Response, error)
	mustEmbedUnimplementedDeviceGroupServer()
}

// UnimplementedDeviceGroupServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceGroupServer struct {
}

func (UnimplementedDeviceGroupServer) GroupInfoCreate(context.Context, *GroupInfoCreateReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoCreate not implemented")
}
func (UnimplementedDeviceGroupServer) GroupInfoIndex(context.Context, *GroupInfoIndexReq) (*GroupInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoIndex not implemented")
}
func (UnimplementedDeviceGroupServer) GroupInfoRead(context.Context, *GroupInfoReadReq) (*GroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoRead not implemented")
}
func (UnimplementedDeviceGroupServer) GroupInfoUpdate(context.Context, *GroupInfoUpdateReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoUpdate not implemented")
}
func (UnimplementedDeviceGroupServer) GroupInfoDelete(context.Context, *GroupInfoDeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoDelete not implemented")
}
func (UnimplementedDeviceGroupServer) GroupDeviceMultiCreate(context.Context, *GroupDeviceMultiCreateReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDeviceMultiCreate not implemented")
}
func (UnimplementedDeviceGroupServer) GroupDeviceIndex(context.Context, *GroupDeviceIndexReq) (*GroupDeviceIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDeviceIndex not implemented")
}
func (UnimplementedDeviceGroupServer) GroupDeviceMultiDelete(context.Context, *GroupDeviceMultiDeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDeviceMultiDelete not implemented")
}
func (UnimplementedDeviceGroupServer) mustEmbedUnimplementedDeviceGroupServer() {}

// UnsafeDeviceGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceGroupServer will
// result in compilation errors.
type UnsafeDeviceGroupServer interface {
	mustEmbedUnimplementedDeviceGroupServer()
}

func RegisterDeviceGroupServer(s grpc.ServiceRegistrar, srv DeviceGroupServer) {
	s.RegisterService(&DeviceGroup_ServiceDesc, srv)
}

func _DeviceGroup_GroupInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfoCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupInfoCreate(ctx, req.(*GroupInfoCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupInfoIndex(ctx, req.(*GroupInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfoReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupInfoRead(ctx, req.(*GroupInfoReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupInfoUpdate(ctx, req.(*GroupInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupInfoDelete(ctx, req.(*GroupInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupDeviceMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDeviceMultiCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupDeviceMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupDeviceMultiCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupDeviceMultiCreate(ctx, req.(*GroupDeviceMultiCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupDeviceIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDeviceIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupDeviceIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupDeviceIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupDeviceIndex(ctx, req.(*GroupDeviceIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupDeviceMultiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDeviceMultiDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupDeviceMultiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupDeviceMultiDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupDeviceMultiDelete(ctx, req.(*GroupDeviceMultiDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceGroup_ServiceDesc is the grpc.ServiceDesc for DeviceGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.DeviceGroup",
	HandlerType: (*DeviceGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "groupInfoCreate",
			Handler:    _DeviceGroup_GroupInfoCreate_Handler,
		},
		{
			MethodName: "groupInfoIndex",
			Handler:    _DeviceGroup_GroupInfoIndex_Handler,
		},
		{
			MethodName: "groupInfoRead",
			Handler:    _DeviceGroup_GroupInfoRead_Handler,
		},
		{
			MethodName: "groupInfoUpdate",
			Handler:    _DeviceGroup_GroupInfoUpdate_Handler,
		},
		{
			MethodName: "groupInfoDelete",
			Handler:    _DeviceGroup_GroupInfoDelete_Handler,
		},
		{
			MethodName: "groupDeviceMultiCreate",
			Handler:    _DeviceGroup_GroupDeviceMultiCreate_Handler,
		},
		{
			MethodName: "groupDeviceIndex",
			Handler:    _DeviceGroup_GroupDeviceIndex_Handler,
		},
		{
			MethodName: "groupDeviceMultiDelete",
			Handler:    _DeviceGroup_GroupDeviceMultiDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	RemoteConfig_RemoteConfigCreate_FullMethodName   = "/dm.RemoteConfig/RemoteConfigCreate"
	RemoteConfig_RemoteConfigIndex_FullMethodName    = "/dm.RemoteConfig/RemoteConfigIndex"
	RemoteConfig_RemoteConfigPushAll_FullMethodName  = "/dm.RemoteConfig/RemoteConfigPushAll"
	RemoteConfig_RemoteConfigLastRead_FullMethodName = "/dm.RemoteConfig/RemoteConfigLastRead"
)

// RemoteConfigClient is the client API for RemoteConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteConfigClient interface {
	RemoteConfigCreate(ctx context.Context, in *RemoteConfigCreateReq, opts ...grpc.CallOption) (*Response, error)
	RemoteConfigIndex(ctx context.Context, in *RemoteConfigIndexReq, opts ...grpc.CallOption) (*RemoteConfigIndexResp, error)
	RemoteConfigPushAll(ctx context.Context, in *RemoteConfigPushAllReq, opts ...grpc.CallOption) (*Response, error)
	RemoteConfigLastRead(ctx context.Context, in *RemoteConfigLastReadReq, opts ...grpc.CallOption) (*RemoteConfigLastReadResp, error)
}

type remoteConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteConfigClient(cc grpc.ClientConnInterface) RemoteConfigClient {
	return &remoteConfigClient{cc}
}

func (c *remoteConfigClient) RemoteConfigCreate(ctx context.Context, in *RemoteConfigCreateReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, RemoteConfig_RemoteConfigCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) RemoteConfigIndex(ctx context.Context, in *RemoteConfigIndexReq, opts ...grpc.CallOption) (*RemoteConfigIndexResp, error) {
	out := new(RemoteConfigIndexResp)
	err := c.cc.Invoke(ctx, RemoteConfig_RemoteConfigIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) RemoteConfigPushAll(ctx context.Context, in *RemoteConfigPushAllReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, RemoteConfig_RemoteConfigPushAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) RemoteConfigLastRead(ctx context.Context, in *RemoteConfigLastReadReq, opts ...grpc.CallOption) (*RemoteConfigLastReadResp, error) {
	out := new(RemoteConfigLastReadResp)
	err := c.cc.Invoke(ctx, RemoteConfig_RemoteConfigLastRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteConfigServer is the server API for RemoteConfig service.
// All implementations must embed UnimplementedRemoteConfigServer
// for forward compatibility
type RemoteConfigServer interface {
	RemoteConfigCreate(context.Context, *RemoteConfigCreateReq) (*Response, error)
	RemoteConfigIndex(context.Context, *RemoteConfigIndexReq) (*RemoteConfigIndexResp, error)
	RemoteConfigPushAll(context.Context, *RemoteConfigPushAllReq) (*Response, error)
	RemoteConfigLastRead(context.Context, *RemoteConfigLastReadReq) (*RemoteConfigLastReadResp, error)
	mustEmbedUnimplementedRemoteConfigServer()
}

// UnimplementedRemoteConfigServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteConfigServer struct {
}

func (UnimplementedRemoteConfigServer) RemoteConfigCreate(context.Context, *RemoteConfigCreateReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteConfigCreate not implemented")
}
func (UnimplementedRemoteConfigServer) RemoteConfigIndex(context.Context, *RemoteConfigIndexReq) (*RemoteConfigIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteConfigIndex not implemented")
}
func (UnimplementedRemoteConfigServer) RemoteConfigPushAll(context.Context, *RemoteConfigPushAllReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteConfigPushAll not implemented")
}
func (UnimplementedRemoteConfigServer) RemoteConfigLastRead(context.Context, *RemoteConfigLastReadReq) (*RemoteConfigLastReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteConfigLastRead not implemented")
}
func (UnimplementedRemoteConfigServer) mustEmbedUnimplementedRemoteConfigServer() {}

// UnsafeRemoteConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteConfigServer will
// result in compilation errors.
type UnsafeRemoteConfigServer interface {
	mustEmbedUnimplementedRemoteConfigServer()
}

func RegisterRemoteConfigServer(s grpc.ServiceRegistrar, srv RemoteConfigServer) {
	s.RegisterService(&RemoteConfig_ServiceDesc, srv)
}

func _RemoteConfig_RemoteConfigCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteConfigCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).RemoteConfigCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_RemoteConfigCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).RemoteConfigCreate(ctx, req.(*RemoteConfigCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_RemoteConfigIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteConfigIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).RemoteConfigIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_RemoteConfigIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).RemoteConfigIndex(ctx, req.(*RemoteConfigIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_RemoteConfigPushAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteConfigPushAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).RemoteConfigPushAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_RemoteConfigPushAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).RemoteConfigPushAll(ctx, req.(*RemoteConfigPushAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_RemoteConfigLastRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteConfigLastReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).RemoteConfigLastRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_RemoteConfigLastRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).RemoteConfigLastRead(ctx, req.(*RemoteConfigLastReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteConfig_ServiceDesc is the grpc.ServiceDesc for RemoteConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.RemoteConfig",
	HandlerType: (*RemoteConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoteConfigCreate",
			Handler:    _RemoteConfig_RemoteConfigCreate_Handler,
		},
		{
			MethodName: "RemoteConfigIndex",
			Handler:    _RemoteConfig_RemoteConfigIndex_Handler,
		},
		{
			MethodName: "RemoteConfigPushAll",
			Handler:    _RemoteConfig_RemoteConfigPushAll_Handler,
		},
		{
			MethodName: "RemoteConfigLastRead",
			Handler:    _RemoteConfig_RemoteConfigLastRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	FirmwareManage_FirmwareInfoCreate_FullMethodName    = "/dm.FirmwareManage/FirmwareInfoCreate"
	FirmwareManage_FirmwareInfoUpdate_FullMethodName    = "/dm.FirmwareManage/FirmwareInfoUpdate"
	FirmwareManage_FirmwareInfoDelete_FullMethodName    = "/dm.FirmwareManage/FirmwareInfoDelete"
	FirmwareManage_FirmwareInfoIndex_FullMethodName     = "/dm.FirmwareManage/FirmwareInfoIndex"
	FirmwareManage_FirmwareInfoRead_FullMethodName      = "/dm.FirmwareManage/FirmwareInfoRead"
	FirmwareManage_OtaFirmwareFileUpdate_FullMethodName = "/dm.FirmwareManage/OtaFirmwareFileUpdate"
	FirmwareManage_OtaFirmwareFileIndex_FullMethodName  = "/dm.FirmwareManage/OtaFirmwareFileIndex"
	FirmwareManage_OtaFirmwareDeviceInfo_FullMethodName = "/dm.FirmwareManage/OtaFirmwareDeviceInfo"
)

// FirmwareManageClient is the client API for FirmwareManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FirmwareManageClient interface {
	//新增固件升级包
	FirmwareInfoCreate(ctx context.Context, in *Firmware, opts ...grpc.CallOption) (*FirmwareResp, error)
	FirmwareInfoUpdate(ctx context.Context, in *FirmwareInfo, opts ...grpc.CallOption) (*OtaCommonResp, error)
	FirmwareInfoDelete(ctx context.Context, in *FirmwareInfoDeleteReq, opts ...grpc.CallOption) (*FirmwareInfoDeleteResp, error)
	FirmwareInfoIndex(ctx context.Context, in *FirmwareInfoIndexReq, opts ...grpc.CallOption) (*FirmwareInfoIndexResp, error)
	FirmwareInfoRead(ctx context.Context, in *FirmwareInfoReadReq, opts ...grpc.CallOption) (*FirmwareInfoReadResp, error)
	//附件信息更新
	OtaFirmwareFileUpdate(ctx context.Context, in *OtaFirmwareFileReq, opts ...grpc.CallOption) (*OtaFirmwareFileResp, error)
	//附件列表搜索
	OtaFirmwareFileIndex(ctx context.Context, in *OtaFirmwareFileIndexReq, opts ...grpc.CallOption) (*OtaFirmwareFileIndexResp, error)
	//获取固件包对应设备版本列表
	OtaFirmwareDeviceInfo(ctx context.Context, in *OtaFirmwareDeviceInfoReq, opts ...grpc.CallOption) (*OtaFirmwareDeviceInfoResp, error)
}

type firmwareManageClient struct {
	cc grpc.ClientConnInterface
}

func NewFirmwareManageClient(cc grpc.ClientConnInterface) FirmwareManageClient {
	return &firmwareManageClient{cc}
}

func (c *firmwareManageClient) FirmwareInfoCreate(ctx context.Context, in *Firmware, opts ...grpc.CallOption) (*FirmwareResp, error) {
	out := new(FirmwareResp)
	err := c.cc.Invoke(ctx, FirmwareManage_FirmwareInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareManageClient) FirmwareInfoUpdate(ctx context.Context, in *FirmwareInfo, opts ...grpc.CallOption) (*OtaCommonResp, error) {
	out := new(OtaCommonResp)
	err := c.cc.Invoke(ctx, FirmwareManage_FirmwareInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareManageClient) FirmwareInfoDelete(ctx context.Context, in *FirmwareInfoDeleteReq, opts ...grpc.CallOption) (*FirmwareInfoDeleteResp, error) {
	out := new(FirmwareInfoDeleteResp)
	err := c.cc.Invoke(ctx, FirmwareManage_FirmwareInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareManageClient) FirmwareInfoIndex(ctx context.Context, in *FirmwareInfoIndexReq, opts ...grpc.CallOption) (*FirmwareInfoIndexResp, error) {
	out := new(FirmwareInfoIndexResp)
	err := c.cc.Invoke(ctx, FirmwareManage_FirmwareInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareManageClient) FirmwareInfoRead(ctx context.Context, in *FirmwareInfoReadReq, opts ...grpc.CallOption) (*FirmwareInfoReadResp, error) {
	out := new(FirmwareInfoReadResp)
	err := c.cc.Invoke(ctx, FirmwareManage_FirmwareInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareManageClient) OtaFirmwareFileUpdate(ctx context.Context, in *OtaFirmwareFileReq, opts ...grpc.CallOption) (*OtaFirmwareFileResp, error) {
	out := new(OtaFirmwareFileResp)
	err := c.cc.Invoke(ctx, FirmwareManage_OtaFirmwareFileUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareManageClient) OtaFirmwareFileIndex(ctx context.Context, in *OtaFirmwareFileIndexReq, opts ...grpc.CallOption) (*OtaFirmwareFileIndexResp, error) {
	out := new(OtaFirmwareFileIndexResp)
	err := c.cc.Invoke(ctx, FirmwareManage_OtaFirmwareFileIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareManageClient) OtaFirmwareDeviceInfo(ctx context.Context, in *OtaFirmwareDeviceInfoReq, opts ...grpc.CallOption) (*OtaFirmwareDeviceInfoResp, error) {
	out := new(OtaFirmwareDeviceInfoResp)
	err := c.cc.Invoke(ctx, FirmwareManage_OtaFirmwareDeviceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirmwareManageServer is the server API for FirmwareManage service.
// All implementations must embed UnimplementedFirmwareManageServer
// for forward compatibility
type FirmwareManageServer interface {
	//新增固件升级包
	FirmwareInfoCreate(context.Context, *Firmware) (*FirmwareResp, error)
	FirmwareInfoUpdate(context.Context, *FirmwareInfo) (*OtaCommonResp, error)
	FirmwareInfoDelete(context.Context, *FirmwareInfoDeleteReq) (*FirmwareInfoDeleteResp, error)
	FirmwareInfoIndex(context.Context, *FirmwareInfoIndexReq) (*FirmwareInfoIndexResp, error)
	FirmwareInfoRead(context.Context, *FirmwareInfoReadReq) (*FirmwareInfoReadResp, error)
	//附件信息更新
	OtaFirmwareFileUpdate(context.Context, *OtaFirmwareFileReq) (*OtaFirmwareFileResp, error)
	//附件列表搜索
	OtaFirmwareFileIndex(context.Context, *OtaFirmwareFileIndexReq) (*OtaFirmwareFileIndexResp, error)
	//获取固件包对应设备版本列表
	OtaFirmwareDeviceInfo(context.Context, *OtaFirmwareDeviceInfoReq) (*OtaFirmwareDeviceInfoResp, error)
	mustEmbedUnimplementedFirmwareManageServer()
}

// UnimplementedFirmwareManageServer must be embedded to have forward compatible implementations.
type UnimplementedFirmwareManageServer struct {
}

func (UnimplementedFirmwareManageServer) FirmwareInfoCreate(context.Context, *Firmware) (*FirmwareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirmwareInfoCreate not implemented")
}
func (UnimplementedFirmwareManageServer) FirmwareInfoUpdate(context.Context, *FirmwareInfo) (*OtaCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirmwareInfoUpdate not implemented")
}
func (UnimplementedFirmwareManageServer) FirmwareInfoDelete(context.Context, *FirmwareInfoDeleteReq) (*FirmwareInfoDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirmwareInfoDelete not implemented")
}
func (UnimplementedFirmwareManageServer) FirmwareInfoIndex(context.Context, *FirmwareInfoIndexReq) (*FirmwareInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirmwareInfoIndex not implemented")
}
func (UnimplementedFirmwareManageServer) FirmwareInfoRead(context.Context, *FirmwareInfoReadReq) (*FirmwareInfoReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirmwareInfoRead not implemented")
}
func (UnimplementedFirmwareManageServer) OtaFirmwareFileUpdate(context.Context, *OtaFirmwareFileReq) (*OtaFirmwareFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareFileUpdate not implemented")
}
func (UnimplementedFirmwareManageServer) OtaFirmwareFileIndex(context.Context, *OtaFirmwareFileIndexReq) (*OtaFirmwareFileIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareFileIndex not implemented")
}
func (UnimplementedFirmwareManageServer) OtaFirmwareDeviceInfo(context.Context, *OtaFirmwareDeviceInfoReq) (*OtaFirmwareDeviceInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareDeviceInfo not implemented")
}
func (UnimplementedFirmwareManageServer) mustEmbedUnimplementedFirmwareManageServer() {}

// UnsafeFirmwareManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FirmwareManageServer will
// result in compilation errors.
type UnsafeFirmwareManageServer interface {
	mustEmbedUnimplementedFirmwareManageServer()
}

func RegisterFirmwareManageServer(s grpc.ServiceRegistrar, srv FirmwareManageServer) {
	s.RegisterService(&FirmwareManage_ServiceDesc, srv)
}

func _FirmwareManage_FirmwareInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Firmware)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManageServer).FirmwareInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManage_FirmwareInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManageServer).FirmwareInfoCreate(ctx, req.(*Firmware))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareManage_FirmwareInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirmwareInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManageServer).FirmwareInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManage_FirmwareInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManageServer).FirmwareInfoUpdate(ctx, req.(*FirmwareInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareManage_FirmwareInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirmwareInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManageServer).FirmwareInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManage_FirmwareInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManageServer).FirmwareInfoDelete(ctx, req.(*FirmwareInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareManage_FirmwareInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirmwareInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManageServer).FirmwareInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManage_FirmwareInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManageServer).FirmwareInfoIndex(ctx, req.(*FirmwareInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareManage_FirmwareInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirmwareInfoReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManageServer).FirmwareInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManage_FirmwareInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManageServer).FirmwareInfoRead(ctx, req.(*FirmwareInfoReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareManage_OtaFirmwareFileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManageServer).OtaFirmwareFileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManage_OtaFirmwareFileUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManageServer).OtaFirmwareFileUpdate(ctx, req.(*OtaFirmwareFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareManage_OtaFirmwareFileIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareFileIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManageServer).OtaFirmwareFileIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManage_OtaFirmwareFileIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManageServer).OtaFirmwareFileIndex(ctx, req.(*OtaFirmwareFileIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareManage_OtaFirmwareDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareDeviceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManageServer).OtaFirmwareDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManage_OtaFirmwareDeviceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManageServer).OtaFirmwareDeviceInfo(ctx, req.(*OtaFirmwareDeviceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FirmwareManage_ServiceDesc is the grpc.ServiceDesc for FirmwareManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FirmwareManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.FirmwareManage",
	HandlerType: (*FirmwareManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FirmwareInfoCreate",
			Handler:    _FirmwareManage_FirmwareInfoCreate_Handler,
		},
		{
			MethodName: "FirmwareInfoUpdate",
			Handler:    _FirmwareManage_FirmwareInfoUpdate_Handler,
		},
		{
			MethodName: "FirmwareInfoDelete",
			Handler:    _FirmwareManage_FirmwareInfoDelete_Handler,
		},
		{
			MethodName: "FirmwareInfoIndex",
			Handler:    _FirmwareManage_FirmwareInfoIndex_Handler,
		},
		{
			MethodName: "FirmwareInfoRead",
			Handler:    _FirmwareManage_FirmwareInfoRead_Handler,
		},
		{
			MethodName: "OtaFirmwareFileUpdate",
			Handler:    _FirmwareManage_OtaFirmwareFileUpdate_Handler,
		},
		{
			MethodName: "OtaFirmwareFileIndex",
			Handler:    _FirmwareManage_OtaFirmwareFileIndex_Handler,
		},
		{
			MethodName: "OtaFirmwareDeviceInfo",
			Handler:    _FirmwareManage_OtaFirmwareDeviceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	OtaTaskManage_OtaTaskCreate_FullMethodName            = "/dm.OtaTaskManage/OtaTaskCreate"
	OtaTaskManage_OtaTaskUpdate_FullMethodName            = "/dm.OtaTaskManage/OtaTaskUpdate"
	OtaTaskManage_OtaTaskCancle_FullMethodName            = "/dm.OtaTaskManage/OtaTaskCancle"
	OtaTaskManage_OtaTaskIndex_FullMethodName             = "/dm.OtaTaskManage/OtaTaskIndex"
	OtaTaskManage_OtaTaskRead_FullMethodName              = "/dm.OtaTaskManage/OtaTaskRead"
	OtaTaskManage_OtaTaskDeviceIndex_FullMethodName       = "/dm.OtaTaskManage/OtaTaskDeviceIndex"
	OtaTaskManage_OtaTaskDeviceRead_FullMethodName        = "/dm.OtaTaskManage/OtaTaskDeviceRead"
	OtaTaskManage_OtaTaskDeviceEnableBatch_FullMethodName = "/dm.OtaTaskManage/OtaTaskDeviceEnableBatch"
	OtaTaskManage_OtaTaskDeviceProcess_FullMethodName     = "/dm.OtaTaskManage/OtaTaskDeviceProcess"
	OtaTaskManage_OtaTaskDeviceCancle_FullMethodName      = "/dm.OtaTaskManage/OtaTaskDeviceCancle"
)

// OtaTaskManageClient is the client API for OtaTaskManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OtaTaskManageClient interface {
	//创建批量升级任务
	OtaTaskCreate(ctx context.Context, in *OtaTaskCreateReq, opts ...grpc.CallOption) (*OtaTaskCreatResp, error)
	OtaTaskUpdate(ctx context.Context, in *OtaTaskInfo, opts ...grpc.CallOption) (*OtaCommonResp, error)
	//批量取消升级任务
	OtaTaskCancle(ctx context.Context, in *OtaTaskCancleReq, opts ...grpc.CallOption) (*OtaCommonResp, error)
	OtaTaskIndex(ctx context.Context, in *OtaTaskIndexReq, opts ...grpc.CallOption) (*OtaTaskIndexResp, error)
	//升级任务详情
	OtaTaskRead(ctx context.Context, in *OtaTaskReadReq, opts ...grpc.CallOption) (*OtaTaskReadResp, error)
	//升级批次详情列表
	OtaTaskDeviceIndex(ctx context.Context, in *OtaTaskDeviceIndexReq, opts ...grpc.CallOption) (*OtaTaskDeviceIndexResp, error)
	//设备升级状态详情
	OtaTaskDeviceRead(ctx context.Context, in *OtaTaskDeviceReadReq, opts ...grpc.CallOption) (*OtaTaskDeviceInfo, error)
	//获取当前可执行批次信息
	OtaTaskDeviceEnableBatch(ctx context.Context, in *OtaTaskBatchReq, opts ...grpc.CallOption) (*OtaTaskBatchResp, error)
	//升级进度上报
	OtaTaskDeviceProcess(ctx context.Context, in *OtaTaskDeviceProcessReq, opts ...grpc.CallOption) (*OtaCommonResp, error)
	//取消单个设备的升级
	OtaTaskDeviceCancle(ctx context.Context, in *OtaTaskDeviceCancleReq, opts ...grpc.CallOption) (*OtaCommonResp, error)
}

type otaTaskManageClient struct {
	cc grpc.ClientConnInterface
}

func NewOtaTaskManageClient(cc grpc.ClientConnInterface) OtaTaskManageClient {
	return &otaTaskManageClient{cc}
}

func (c *otaTaskManageClient) OtaTaskCreate(ctx context.Context, in *OtaTaskCreateReq, opts ...grpc.CallOption) (*OtaTaskCreatResp, error) {
	out := new(OtaTaskCreatResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskUpdate(ctx context.Context, in *OtaTaskInfo, opts ...grpc.CallOption) (*OtaCommonResp, error) {
	out := new(OtaCommonResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskCancle(ctx context.Context, in *OtaTaskCancleReq, opts ...grpc.CallOption) (*OtaCommonResp, error) {
	out := new(OtaCommonResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskCancle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskIndex(ctx context.Context, in *OtaTaskIndexReq, opts ...grpc.CallOption) (*OtaTaskIndexResp, error) {
	out := new(OtaTaskIndexResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskRead(ctx context.Context, in *OtaTaskReadReq, opts ...grpc.CallOption) (*OtaTaskReadResp, error) {
	out := new(OtaTaskReadResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskDeviceIndex(ctx context.Context, in *OtaTaskDeviceIndexReq, opts ...grpc.CallOption) (*OtaTaskDeviceIndexResp, error) {
	out := new(OtaTaskDeviceIndexResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskDeviceIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskDeviceRead(ctx context.Context, in *OtaTaskDeviceReadReq, opts ...grpc.CallOption) (*OtaTaskDeviceInfo, error) {
	out := new(OtaTaskDeviceInfo)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskDeviceRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskDeviceEnableBatch(ctx context.Context, in *OtaTaskBatchReq, opts ...grpc.CallOption) (*OtaTaskBatchResp, error) {
	out := new(OtaTaskBatchResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskDeviceEnableBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskDeviceProcess(ctx context.Context, in *OtaTaskDeviceProcessReq, opts ...grpc.CallOption) (*OtaCommonResp, error) {
	out := new(OtaCommonResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskDeviceProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskDeviceCancle(ctx context.Context, in *OtaTaskDeviceCancleReq, opts ...grpc.CallOption) (*OtaCommonResp, error) {
	out := new(OtaCommonResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskDeviceCancle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OtaTaskManageServer is the server API for OtaTaskManage service.
// All implementations must embed UnimplementedOtaTaskManageServer
// for forward compatibility
type OtaTaskManageServer interface {
	//创建批量升级任务
	OtaTaskCreate(context.Context, *OtaTaskCreateReq) (*OtaTaskCreatResp, error)
	OtaTaskUpdate(context.Context, *OtaTaskInfo) (*OtaCommonResp, error)
	//批量取消升级任务
	OtaTaskCancle(context.Context, *OtaTaskCancleReq) (*OtaCommonResp, error)
	OtaTaskIndex(context.Context, *OtaTaskIndexReq) (*OtaTaskIndexResp, error)
	//升级任务详情
	OtaTaskRead(context.Context, *OtaTaskReadReq) (*OtaTaskReadResp, error)
	//升级批次详情列表
	OtaTaskDeviceIndex(context.Context, *OtaTaskDeviceIndexReq) (*OtaTaskDeviceIndexResp, error)
	//设备升级状态详情
	OtaTaskDeviceRead(context.Context, *OtaTaskDeviceReadReq) (*OtaTaskDeviceInfo, error)
	//获取当前可执行批次信息
	OtaTaskDeviceEnableBatch(context.Context, *OtaTaskBatchReq) (*OtaTaskBatchResp, error)
	//升级进度上报
	OtaTaskDeviceProcess(context.Context, *OtaTaskDeviceProcessReq) (*OtaCommonResp, error)
	//取消单个设备的升级
	OtaTaskDeviceCancle(context.Context, *OtaTaskDeviceCancleReq) (*OtaCommonResp, error)
	mustEmbedUnimplementedOtaTaskManageServer()
}

// UnimplementedOtaTaskManageServer must be embedded to have forward compatible implementations.
type UnimplementedOtaTaskManageServer struct {
}

func (UnimplementedOtaTaskManageServer) OtaTaskCreate(context.Context, *OtaTaskCreateReq) (*OtaTaskCreatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskCreate not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskUpdate(context.Context, *OtaTaskInfo) (*OtaCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskUpdate not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskCancle(context.Context, *OtaTaskCancleReq) (*OtaCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskCancle not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskIndex(context.Context, *OtaTaskIndexReq) (*OtaTaskIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskIndex not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskRead(context.Context, *OtaTaskReadReq) (*OtaTaskReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskRead not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskDeviceIndex(context.Context, *OtaTaskDeviceIndexReq) (*OtaTaskDeviceIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskDeviceIndex not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskDeviceRead(context.Context, *OtaTaskDeviceReadReq) (*OtaTaskDeviceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskDeviceRead not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskDeviceEnableBatch(context.Context, *OtaTaskBatchReq) (*OtaTaskBatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskDeviceEnableBatch not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskDeviceProcess(context.Context, *OtaTaskDeviceProcessReq) (*OtaCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskDeviceProcess not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskDeviceCancle(context.Context, *OtaTaskDeviceCancleReq) (*OtaCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskDeviceCancle not implemented")
}
func (UnimplementedOtaTaskManageServer) mustEmbedUnimplementedOtaTaskManageServer() {}

// UnsafeOtaTaskManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OtaTaskManageServer will
// result in compilation errors.
type UnsafeOtaTaskManageServer interface {
	mustEmbedUnimplementedOtaTaskManageServer()
}

func RegisterOtaTaskManageServer(s grpc.ServiceRegistrar, srv OtaTaskManageServer) {
	s.RegisterService(&OtaTaskManage_ServiceDesc, srv)
}

func _OtaTaskManage_OtaTaskCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskCreate(ctx, req.(*OtaTaskCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskUpdate(ctx, req.(*OtaTaskInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskCancle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskCancleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskCancle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskCancle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskCancle(ctx, req.(*OtaTaskCancleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskIndex(ctx, req.(*OtaTaskIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskRead(ctx, req.(*OtaTaskReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskDeviceIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskDeviceIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskDeviceIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskDeviceIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskDeviceIndex(ctx, req.(*OtaTaskDeviceIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskDeviceRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskDeviceReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskDeviceRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskDeviceRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskDeviceRead(ctx, req.(*OtaTaskDeviceReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskDeviceEnableBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskDeviceEnableBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskDeviceEnableBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskDeviceEnableBatch(ctx, req.(*OtaTaskBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskDeviceProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskDeviceProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskDeviceProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskDeviceProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskDeviceProcess(ctx, req.(*OtaTaskDeviceProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskDeviceCancle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskDeviceCancleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskDeviceCancle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskDeviceCancle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskDeviceCancle(ctx, req.(*OtaTaskDeviceCancleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OtaTaskManage_ServiceDesc is the grpc.ServiceDesc for OtaTaskManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OtaTaskManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.OtaTaskManage",
	HandlerType: (*OtaTaskManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OtaTaskCreate",
			Handler:    _OtaTaskManage_OtaTaskCreate_Handler,
		},
		{
			MethodName: "OtaTaskUpdate",
			Handler:    _OtaTaskManage_OtaTaskUpdate_Handler,
		},
		{
			MethodName: "OtaTaskCancle",
			Handler:    _OtaTaskManage_OtaTaskCancle_Handler,
		},
		{
			MethodName: "OtaTaskIndex",
			Handler:    _OtaTaskManage_OtaTaskIndex_Handler,
		},
		{
			MethodName: "OtaTaskRead",
			Handler:    _OtaTaskManage_OtaTaskRead_Handler,
		},
		{
			MethodName: "OtaTaskDeviceIndex",
			Handler:    _OtaTaskManage_OtaTaskDeviceIndex_Handler,
		},
		{
			MethodName: "OtaTaskDeviceRead",
			Handler:    _OtaTaskManage_OtaTaskDeviceRead_Handler,
		},
		{
			MethodName: "OtaTaskDeviceEnableBatch",
			Handler:    _OtaTaskManage_OtaTaskDeviceEnableBatch_Handler,
		},
		{
			MethodName: "OtaTaskDeviceProcess",
			Handler:    _OtaTaskManage_OtaTaskDeviceProcess_Handler,
		},
		{
			MethodName: "OtaTaskDeviceCancle",
			Handler:    _OtaTaskManage_OtaTaskDeviceCancle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}
