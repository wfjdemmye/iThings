syntax = "proto3";
option go_package = "pb/dm";

//import "proto/schemaInfo.proto";
package dm;

import "google/protobuf/wrappers.proto";

message Response {
}
message PageInfo{
  int64 page = 1;
  int64 size = 2;
  //排序信息
  repeated OrderBy orders = 3;
  message OrderBy {
    //排序的字段名
    string filed = 1;
    //排序方式：0 aes, 1 desc
    int64 sort = 2;
  }
}

message SendOption {
  int64  timeoutToFail = 1;//超时失败时间
  int64  requestTimeout = 2;//请求超时,超时后会进行重试
  int64  retryInterval = 3;//重试间隔
}

//权限认证(提供给mqtt broker)
service DeviceAuth{
  //设备登录认证
  rpc loginAuth(LoginAuthReq)           returns (Response);
  //设备操作认证
  rpc accessAuth(AccessAuthReq)         returns (Response);
  //鉴定是否是root账号
  rpc rootCheck(RootCheckReq)           returns (Response);
  //设备动态注册
  rpc deviceRegister(DeviceRegisterReq) returns (DeviceRegisterResp);
}

//设备管理
service DeviceManage {
  //新增设备
  rpc deviceInfoCreate(DeviceInfo)     returns (Response);
  //更新设备
  rpc deviceInfoUpdate(DeviceInfo)     returns (Response);
  //删除设备
  rpc deviceInfoDelete(DeviceInfoDeleteReq)     returns (Response);
  //获取设备信息列表
  rpc deviceInfoIndex(DeviceInfoIndexReq)     returns (DeviceInfoIndexResp);
  //获取设备信息详情
  rpc deviceInfoRead(DeviceInfoReadReq)     returns (DeviceInfo);

  //绑定网关下子设备设备
  rpc deviceGatewayMultiCreate(DeviceGatewayMultiCreateReq)     returns (Response);
  //获取绑定信息的设备信息列表
  rpc deviceGatewayIndex(DeviceGatewayIndexReq)     returns (DeviceGatewayIndexResp);
  //删除网关下子设备
  rpc deviceGatewayMultiDelete(DeviceGatewayMultiDeleteReq)     returns (Response);

  //设备计数
  rpc deviceInfoCount(DeviceInfoCountReq) returns (DeviceInfoCountResp);
  //设备类型
  rpc deviceTypeCount(DeviceTypeCountReq) returns (DeviceTypeCountResp);
}

//产品管理
service ProductManage{
  /*产品管理*/
  //新增产品
  rpc productInfoCreate(ProductInfo)     returns (Response);
  //更新产品
  rpc productInfoUpdate(ProductInfo)     returns (Response);
  //删除产品
  rpc productInfoDelete(ProductInfoDeleteReq)     returns (Response);
  //获取产品信息列表
  rpc productInfoIndex(ProductInfoIndexReq)     returns (ProductInfoIndexResp);
  //获取产品信息详情
  rpc productInfoRead(ProductInfoReadReq)     returns (ProductInfo);

  /*物模型管理*/
  //更新产品物模型
  rpc productSchemaUpdate(ProductSchemaUpdateReq)returns (Response);
  //新增产品
  rpc productSchemaCreate(ProductSchemaCreateReq)     returns (Response);
  //删除产品
  rpc productSchemaDelete(ProductSchemaDeleteReq)     returns (Response);
  //获取产品信息列表
  rpc productSchemaIndex(ProductSchemaIndexReq)     returns (ProductSchemaIndexResp);
  //删除产品
  rpc productSchemaTslImport(ProductSchemaTslImportReq)     returns (Response);
  //获取产品信息列表
  rpc productSchemaTslRead(ProductSchemaTslReadReq)     returns (ProductSchemaTslReadResp);

  /*脚本管理*/
  rpc productCustomRead(ProductCustomReadReq) returns (ProductCustom);
  rpc productCustomUpdate(ProductCustom) returns (Response);
}

service DeviceGroup {
  //创建分组
  rpc groupInfoCreate(GroupInfoCreateReq)     returns (Response);
  //获取分组信息列表
  rpc groupInfoIndex(GroupInfoIndexReq)     returns (GroupInfoIndexResp);
  //获取分组信息详情
  rpc groupInfoRead(GroupInfoReadReq)     returns (GroupInfo);
  //更新分组
  rpc groupInfoUpdate(GroupInfoUpdateReq)     returns (Response);
  //删除分组
  rpc groupInfoDelete(GroupInfoDeleteReq)     returns (Response);
  //创建分组设备
  rpc groupDeviceMultiCreate(GroupDeviceMultiCreateReq)     returns (Response);
  //获取分组设备信息列表
  rpc groupDeviceIndex(GroupDeviceIndexReq)     returns (GroupDeviceIndexResp);
  //删除分组设备
  rpc groupDeviceMultiDelete(GroupDeviceMultiDeleteReq)     returns (Response);
}

service RemoteConfig {
  rpc RemoteConfigCreate(RemoteConfigCreateReq) returns (Response);
  rpc RemoteConfigIndex(RemoteConfigIndexReq) returns (RemoteConfigIndexResp);
  rpc RemoteConfigPushAll(RemoteConfigPushAllReq) returns (Response);
  rpc RemoteConfigLastRead(RemoteConfigLastReadReq) returns (RemoteConfigLastReadResp);
}

//设备消息
service DeviceMsg {
  //获取设备sdk调试日志
  rpc sdkLogIndex(SdkLogIndexReq) returns (SdkLogIndexResp);
  //获取设备调试信息记录登入登出,操作
  rpc hubLogIndex(HubLogIndexReq)   returns (HubLogIndexResp);
  //获取设备数据信息
  rpc propertyLatestIndex(PropertyLatestIndexReq)     returns (PropertyIndexResp);
  //获取设备数据信息
  rpc propertyLogIndex(PropertyLogIndexReq)     returns (PropertyIndexResp);
  //获取设备数据信息
  rpc eventLogIndex(EventLogIndexReq)     returns (EventIndexResp);
  //获取设备影子列表
  rpc shadowIndex(PropertyLatestIndexReq)     returns (ShadowIndexResp);
  //主动触发单个设备ota升级推送
  rpc otaPromptIndex(OtaPromptIndexReq) returns (OtaPromptIndexResp);
}

//设备交互
service DeviceInteract {
  //调用设备行为
  rpc sendAction(SendActionReq)         returns(SendActionResp);
  //获取异步调用设备行为的结果
  rpc actionRead(RespReadReq)         returns(SendActionResp);

  //回复调用设备行为
  rpc respAction(RespActionReq)         returns(Response);

  //请求设备获取设备最新属性
  rpc getPropertyReply(GetPropertyReplyReq) returns(GetPropertyReplyResp);

  //调用设备属性
  rpc sendProperty(SendPropertyReq)     returns(SendPropertyResp);
  //批量调用设备属性
  rpc multiSendProperty(MultiSendPropertyReq)     returns(MultiSendPropertyResp);
  //获取异步调用设备属性的结果
  rpc propertyRead(RespReadReq)  returns(SendPropertyResp);
  //发送消息给设备
  rpc sendMsg(SendMsgReq)     returns(SendMsgResp);
}


//ota固件管理
service FirmwareManage {
  //新增固件升级包
  rpc FirmwareInfoCreate(Firmware) returns (FirmwareResp);

  rpc FirmwareInfoUpdate(FirmwareInfo) returns (OtaCommonResp);

  rpc FirmwareInfoDelete(FirmwareInfoDeleteReq) returns (FirmwareInfoDeleteResp);

  rpc FirmwareInfoIndex(FirmwareInfoIndexReq) returns (FirmwareInfoIndexResp);

  rpc FirmwareInfoRead(FirmwareInfoReadReq) returns (FirmwareInfoReadResp);
  //附件信息更新
  rpc OtaFirmwareFileUpdate(OtaFirmwareFileReq) returns (OtaFirmwareFileResp);
  //附件列表搜索
  rpc OtaFirmwareFileIndex(OtaFirmwareFileIndexReq) returns (OtaFirmwareFileIndexResp);
  //获取固件包对应设备版本列表
  rpc OtaFirmwareDeviceInfo(OtaFirmwareDeviceInfoReq) returns (OtaFirmwareDeviceInfoResp);
}

//ota升级任务管理
service OtaTaskManage {
  //创建批量升级任务
  rpc OtaTaskCreate(OtaTaskCreateReq) returns (OtaTaskCreatResp);

  rpc OtaTaskUpdate(OtaTaskInfo) returns (OtaCommonResp);
  //批量取消升级任务
  rpc OtaTaskCancle(OtaTaskCancleReq) returns (OtaCommonResp);

  rpc OtaTaskIndex(OtaTaskIndexReq) returns (OtaTaskIndexResp);
  //升级任务详情
  rpc OtaTaskRead(OtaTaskReadReq) returns (OtaTaskReadResp);
  //升级批次详情列表
  rpc OtaTaskDeviceIndex(OtaTaskDeviceIndexReq) returns (OtaTaskDeviceIndexResp);
  //设备升级状态详情
  rpc OtaTaskDeviceRead(OtaTaskDeviceReadReq) returns (OtaTaskDeviceInfo);
  //获取当前可执行批次信息
  rpc OtaTaskDeviceEnableBatch(OtaTaskBatchReq) returns (OtaTaskBatchResp);
  //升级进度上报
  rpc OtaTaskDeviceProcess(OtaTaskDeviceProcessReq) returns (OtaCommonResp);
  //取消单个设备的升级
  rpc OtaTaskDeviceCancle(OtaTaskDeviceCancleReq) returns (OtaCommonResp);
}




message ShadowIndexResp{
  repeated ShadowIndex  list = 1;
}
/*设备的日志数据*/
message ShadowIndex{
  string dataID = 1;//属性id
  string value = 2;//获取到的值
  int64 updatedDeviceTime = 3;//更新到设备的时间
}

message GetPropertyReplyReq{
  string productID = 1; //产品id (必填)
  string deviceName = 2; //设备名(必填)
  repeated string dataIDs = 3; //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条
}

message GetPropertyReplyResp{
  int64   code = 1;//设备返回状态码
  string  msg = 2;//返回状态
  string msgToken = 3;//调用id
  int64 timestamp = 4;//上报时间戳(毫秒时间戳)
  string params = 5;//获取到的值
}

/*获取对应日志信息*/
message PropertyLogIndexReq{
  PageInfo page = 1;//使用了聚合函数及间隔的时候无效
  repeated string deviceNames = 3; //设备名(不填获取产品下所有设备)
  string productID = 4; //产品id (必填)
  string dataID = 5; //获取的具体标识符的数据(必填)
  int64 timeStart = 6;//获取时间的开始(毫秒时间戳)
  int64 timeEnd = 7;//时间的结束(毫秒时间戳)
  int64 interval = 8;//间隔(单位毫秒) 如果这个值不为零值 则时间的开始和结束必须有效及聚合函数不应该为空
  string argFunc = 9;//聚合函数 avg:平均值 first:第一个参数 last:最后一个参数 count:总数 twa: 时间加权平均函数 参考:https://docs.taosdata.com/taos-sql/function
  //  /*
  //  FILL 语句指定某一窗口区间数据缺失的情况下的填充模式。填充模式包括以下几种：
  //    不进行填充：NONE（默认填充模式）。
  //    VALUE 填充：固定值填充，此时需要指定填充的数值。例如：FILL(VALUE, 1.23)。
  //    PREV 填充：使用前一个非 NULL 值填充数据。例如：FILL(PREV)。
  //    NULL 填充：使用 NULL 填充数据。例如：FILL(NULL)。
  //    LINEAR 填充：根据前后距离最近的非 NULL 值做线性插值填充。例如：FILL(LINEAR)。
  //    NEXT 填充：使用下一个非 NULL 值填充数据。例如：FILL(NEXT)。
  //  */
  string fill = 10; //填充模式 参考:https://docs.taosdata.com/taos-sql/distinguished/
  int32 order = 11; //时间排序 0:aes(默认,从久到近排序) 1:desc(时间从近到久排序)
}

/*获取对应日志信息*/
message PropertyLatestIndexReq{
  string productID = 2; //产品id (必填)
  string deviceName = 1; //设备名(必填)
  repeated string dataIDs = 3; //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
}

/*设备的日志数据*/
message PropertyIndex{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string dataID = 3;//属性id
  string value = 4;//获取到的值
}

/*获取对应日志信息*/
message PropertyIndexResp{
  int64 total = 1; //总数
  repeated PropertyIndex list = 2;
}

/*获取对应日志信息*/
message EventLogIndexReq{
  PageInfo page = 1;//使用了聚合函数及间隔的时候无效
  string productID = 2; //产品id (必填)
  repeated string deviceNames = 3; //设备名(不填获取产品下所有设备)
  string dataID = 4; //获取的具体标识符的数据(必填)
  int64 timeStart = 5;//获取时间的开始(毫秒时间戳)
  int64 timeEnd = 6;//时间的结束(毫秒时间戳)
  repeated string types = 7; //类型 事件类型: 信息:info  告警alert  故障:fault
}

/*设备的日志数据*/
message EventIndex{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string type = 2 ;// 事件类型: 信息:info  告警alert  故障:fault
  string dataID = 3;//属性id
  string params = 4;//获取到的值
}

/*获取对应日志信息*/
message EventIndexResp{
  int64 total = 1; //总数
  repeated EventIndex list = 2;
}

/*实时获取对应信息*/
message HubLogIndexReq{
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  int64   timeStart = 3;//获取时间的开始(毫秒时间戳)
  int64   timeEnd = 4;//时间的结束(毫秒时间戳)
  PageInfo   page = 5;//分页信息
  repeated string actions = 6;//过滤操作类型 connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
  repeated string topics = 7;//过滤主题
  string content = 8;//过滤内容
  string requestID = 9;//过滤请求ID
}

/*实时获取对应信息*/
message HubLogIndexResp{
  int64 total = 1; //总数
  repeated HubLogIndex list = 2;
}

/*设备的日志数据*/
message HubLogIndex{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string action = 2 ;//操作类型;connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
  string requestID = 3;//请求ID
  string tranceID = 4;//服务器端事务id
  string topic = 5;//主题
  string content = 6;//具体内容
  int64 resultType = 7;//请求结果状态
}

/*获取sdk调试日志信息*/
message SdkLogIndexReq {
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  int64   timeStart = 3;//获取时间的开始
  int64   timeEnd = 4;//时间的结束
  int64   logLevel = 5; //日志等级
  PageInfo page = 6;//分页信息 只获取一个则不填
}
/*sdk调试日志信息*/
message SdkLogIndexResp {
  int64 total = 1; //总数
  repeated SdkLogIndex list = 2;
}
message SdkLogIndex {
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  int64 loglevel = 2 ;//操作类型;显示相应的操作名称、API名称、服务的method
  string content = 3;//具体内容
}


message SendActionReq{
  string  productID = 1; //产品id 获取产品id下的所有设备信息
  string  deviceName = 2; //设备名
  string actionID = 3;//产品数据模板中行为功能的标识符，由开发者自行根据设备的应用场景定义
  string inputParams = 4;//输入参数
  bool isAsync = 5;//是否异步获取
  SendOption option = 6;//异步选项
}

message SendActionResp{
  string msgToken = 1;//调用id
  string outputParams = 2;//输出参数 注意：此字段可能返回 null，表示取不到有效值。
  string  msg = 3;//返回状态
  int64   code = 4;//设备返回状态码
}

//获取异步消息的请求
message RespReadReq{
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  string  msgToken = 3;//调用id
}

message SendPropertyReq{
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  string data = 3;//属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
  int64 shadowControl = 4;//设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错 2:如果有设备影子只修改影子,没有的也不下发
  bool isAsync = 6;//是否异步操作 异步情况通过获取接口来获取
}

message RespActionReq{
  string  productID = 1; //产品id 获取产品id下的所有设备信息
  string  deviceName = 2; //设备名
  string msgToken = 3;//调用id
  string outputParams = 4;//输出参数 注意：此字段可能返回 null，表示取不到有效值。
  string  msg = 5;//返回状态
  int64   code = 6;//设备返回状态码
}


message SendPropertyResp{
  int64   code = 1;//设备返回状态码
  string  msg = 2;//返回状态
  string msgToken = 3;//调用id
}

message SendMsgReq{
  string topic = 1; //发送的topic
  bytes payload = 2;//发送的数据
}

message SendMsgResp{

}



message MultiSendPropertyReq{
  string  productID = 1; //产品id
  repeated string deviceNames = 2; //设备名
  int64 shadowControl = 3;//设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错 2:如果有设备影子只修改影子,没有的也不下发
  string data = 4;//属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
}
message SendPropertyMsg{
  string  deviceName = 1; //设备名
  int64   code = 2;//设备返回状态码
  string  msg = 3;//返回状态
  string msgToken = 4;//调用id
  string sysMsg = 5;//系统错误信息
  int64  sysCode = 6;//系统错误码
}

message MultiSendPropertyResp{
  repeated SendPropertyMsg list = 1; //批量设备返回结果列表
}

message OtaPromptIndexReq {
  int64 id = 1;
  string version = 2;
  string module = 3;
  string productID = 4;
  string deviceName = 5;
}
message OtaPromptIndexResp {
  int64 id = 1;
  string taskUid = 2;
  int64 firmwareID =3;
}


message ProductRemoteConfig{
  int64 id = 1;
  string productID = 2;
  string content = 3;
  int64 createdTime = 4;
}

message RemoteConfigCreateReq{
  string productID = 1;
  string content = 2;
}

message RemoteConfigIndexReq{
  PageInfo page = 1;
  string productID = 2;
}

message RemoteConfigIndexResp{
  repeated ProductRemoteConfig list = 1;
  int64 total = 2;
}

message RemoteConfigPushAllReq{
  string productID = 1;
}

message RemoteConfigLastReadReq{
  string productID = 1;
}

message RemoteConfigLastReadResp{
  ProductRemoteConfig info = 1;
}

message ProductCustomReadReq{
  string productID = 1;
}

message ProductCustom{
  string productID = 1;
  int64 scriptLang = 3;//脚本语言类型（默认JavaScript） 1:JavaScript 2:lua 3:python
  google.protobuf.StringValue transformScript = 2;//协议转换脚本
  repeated string customTopic = 4;//自定义topic数组
}

message DeviceGatewayBindDevice{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
  DeviceGatewaySign sign = 3;//签名
}

message DeviceGatewaySign{
  /*
     子设备绑定签名串。 签名算法：
     1. 签名原串，将产品 ID 设备名称，随机数，时间戳拼接：text=${product_id}${device_name};${random};${expiration_time}
     2. 使用设备 Psk 密钥，或者证书的 Sha1 摘要，进行签名：hmac_sha1(device_secret, text)
   */
  string signature = 3;
  int64  random = 4; //随机数。
  int64 timestamp = 5; //时间戳，单位：秒。
  string    signMethod = 6; //签名算法。支持 hmacsha1、hmacsha256
}

message DeviceGatewayMultiCreateReq{
  string gatewayProductID = 1;
  string gatewayDeviceName = 2;
  bool isAuthSign = 3;//是否校验设备签名
  repeated DeviceGatewayBindDevice list = 4;
}


message DeviceGatewayIndexReq{
  PageInfo page = 1;
  DeviceCore gateway = 2;//获取网关下子设备列表
  DeviceCore subDevice = 3; //获取子设备绑定的网关列表
}

message DeviceGatewayIndexResp{
  repeated DeviceInfo list = 1;
  int64 total = 2;
}

message DeviceGatewayMultiDeleteReq{
  string gatewayProductID = 1;
  string gatewayDeviceName = 2;
  repeated DeviceCore list = 3;
}

message GroupInfo{
  int64 groupID = 1;
  int64 parentID = 2;
  int64 projectID = 3;
  string groupName = 4;
  string desc = 5;
  int64 createdTime = 6;
  map<string, string> tags = 7;
  string productID = 8;
  string productName = 9;
}

message GroupInfoCreateReq{
  string groupName = 1;
  int64 parentID = 2;
  string productID = 3;
  string desc = 4;
}

message GroupInfoIndexReq{
  PageInfo page = 1;
  string groupName = 2;
  int64 parentID = 3;
  map<string, string> tags = 4;
}
message GroupInfoIndexResp{
  repeated GroupInfo list = 1;
  int64 total = 2;
  repeated GroupInfo listAll = 3;
}

message GroupInfoReadReq{
  int64 groupID = 1;
}

message GroupInfoUpdateReq{
  int64 groupID = 1;
  string groupName = 2;
  string desc = 3;
  map<string, string> tags = 4;
  string productID = 5;
}

message GroupInfoDeleteReq{
  int64 groupID = 1;
}

message GroupDeviceMultiCreateReq{
  int64 groupID = 1;
  repeated DeviceCore list = 2;
}

message GroupDeviceIndexReq{
  PageInfo page = 1;
  int64 groupID = 2;
  string productID = 3;
  string deviceName = 4;
}

message GroupDeviceIndexResp{
  repeated DeviceInfo list = 1;
  int64 total = 2;
}

message GroupDeviceMultiDeleteReq{
  int64 groupID = 1;
  repeated DeviceCore list = 2;
}

message Point{
  double  longitude = 1;//经度
  double  latitude = 2;//纬度
}
message DeviceInfo {
  string productID = 1; //产品id 只读
  int64 projectID = 2; //项目id 只读（0不更新，2为未分类，other则更新）
  int64 areaID = 3; //项目区域id 只读（0不更新，2为未分类，other则更新）
  string productName = 4; //产品名称 只读
  string deviceName = 5; //设备名称 读写
  int64 createdTime = 6; //创建时间 只读
  string secret = 7; //设备秘钥 只读
  string cert = 8;// 设备证书  只读
  string imei = 9; //IMEI号信息 只读
  string mac = 10; //MAC号信息 只读
  google.protobuf.StringValue version = 11; // 固件版本  读写
  string hardInfo = 12; //模组硬件型号 只读
  string softInfo = 13; //模组软件版本 只读
  Point Position = 14;   //设备定位,默认百度坐标系
  google.protobuf.StringValue address = 15; // 所在地址 读写
  map<string, string> tags = 16;//设备标签
  int64 isOnline = 17; //在线状态  1离线 2在线 只读
  int64 firstLogin = 18; //激活时间 只读
  int64 lastLogin = 19; //最后上线时间 只读
  int64 logLevel = 20; // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
  google.protobuf.StringValue  deviceAlias = 21; //设备别名 读写
  int64 mobileOperator = 22;//移动运营商:1)移动 2)联通 3)电信 4)广电
  google.protobuf.StringValue phone =23;//手机号
  google.protobuf.StringValue iccid = 24;//SIM卡卡号
}

message ProductInfo{
  int64   createdTime = 1; //创建时间 只读
  string   productID = 2; //产品id 只读
  string  productName = 3; //产品名称
  int64   authMode = 4;//认证方式:1:账密认证,2:秘钥认证
  int64   deviceType = 5;//设备类型:1:设备,2:网关,3:子设备
  int64   categoryID = 6;//产品品类
  int64   netType = 7;//通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
  int64   dataProto = 8;//数据协议:1:自定义,2:数据模板
  int64   autoRegister = 9;//动态注册:1:关闭,2:打开,3:打开并自动创建设备
  string   secret = 10;//动态注册产品秘钥 只读
  google.protobuf.StringValue   desc = 11;//描述
  google.protobuf.StringValue   devStatus = 12; // 产品状态
  map<string, string> tags = 13; //产品标签
  string productImg = 14; //产品图片
  bool isUpdateProductImg = 15;//只有这个参数为true的时候才会更新产品图片,传参为产品图片的file path
}

message ProductInfoDeleteReq{
  string   productID = 1; //产品id
}

message ProductInfoReadReq{
  string   productID = 1; //产品id
}

message ProductInfoIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  int64  deviceType = 2; //过滤设备类型:0:全部,1:设备,2:网关,3:子设备
  string  productName = 3; //过滤条件: 产品名称
  repeated string   productIDs = 4; //过滤产品id列表
  map<string, string> tags = 5;//key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
}

message ProductInfoIndexResp{
  repeated ProductInfo list = 1;//产品信息
  int64  total = 2;//总数(只有分页的时候会返回)
}





message DeviceInfoDeleteReq{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
}

message DeviceCore{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
}

message DeviceInfoReadReq{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
}

message DeviceInfoIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  string  productID = 2; //过滤条件: 产品id
  string deviceName = 3;//过滤条件:模糊查询 设备名
  repeated string deviceNames = 4;//过滤条件:精准查询 设备名
  map<string, string> tags = 5;//key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
  int64 range = 6; //过滤条件:取距离坐标点固定范围内的设备
  Point Position = 7;   //设备定位,默认百度坐标系
  repeated int64 areaIDs = 8;//区域ids
  string deviceAlias = 9; //过滤条件:模糊查询 设备别名
  int64 isOnline = 10; //在线状态过滤  1离线 2在线
}

message DeviceInfoIndexResp{
  repeated DeviceInfo list = 1;//设备信息
  int64  total = 2;//总数(只有分页的时候会返回)
}




/*
上面是设备管理模块的消息
*/




/*
下面是设备管理模块的消息
*/
message LoginAuthReq {
  string username = 1;//用户名
  string password = 2;//密码
  string clientID = 3;//clientID
  string ip = 4;//访问的ip地址
  bytes certificate = 5;//客户端证书
}

message AccessAuthReq {
  string username = 1; //用户名
  string topic = 2;//主题
  string clientID = 3;//clientID
  string access = 4;//操作
  string ip = 5; //访问的ip地址
}

message RootCheckReq{
  string username = 1;//用户名
  string password = 2;//密码
  string clientID = 3;//clientID
  string ip = 4;//访问的ip地址
  bytes certificate = 5;//客户端证书
}




message ProductSchemaUpdateReq{
  ProductSchemaInfo info = 1;//物模型信息

}



message ProductSchemaCreateReq{
  ProductSchemaInfo info = 1;//物模型信息
}

message ProductSchemaDeleteReq{
  string productID = 1; //产品id  如果为空返回所有产品的信息
  string identifier = 2;           //标识符

}

message ProductSchemaIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  string productID = 2; //产品id  必填
  int64  type = 3; //物模型类型 1:property属性 2:event事件 3:action行为
  int64  tag = 4; //过滤条件: 物模型标签 1:自定义 2:可选 3:必选
  repeated string   identifiers = 5; //过滤标识符列表
}

message ProductSchemaIndexResp{
  repeated ProductSchemaInfo list = 1;
  int64  total = 2;//总数(只有分页的时候会返回)
}

message ProductSchemaInfo{
  string productID = 1; //产品id  必填
  int64 type = 2;         //物模型类型 1:property属性 2:event事件 3:action行为
  int64 tag = 3;         //物模型标签 1:自定义 2:可选 3:必选  必选不可删除
  string identifier = 4;           //标识符
  google.protobuf.StringValue name = 5;       //功能名称
  google.protobuf.StringValue desc = 6;       //描述
  int64 required = 7;  //是否必须 1:是 2:否
  google.protobuf.StringValue affordance = 8;//各功能类型的详细参数定义
  //  SchemaAction action =8;
  //  SchemaProperty property =9;
  //  SchemaEvent event =10;
}

message ProductSchemaTslImportReq{
  string   productID = 1; //产品id
  string   tsl = 2;//物模型tsl
}

message ProductSchemaTslReadReq{
  string   productID = 1; //产品id
}

message ProductSchemaTslReadResp{
  string   tsl = 1;//物模型tsl
}

message DeviceInfoCountReq {
  int64  startTime = 1; // 查询区间 开始
  int64  endTime = 2;   // 查询区间 结束
}

message DeviceTypeCountReq{
  int64  startTime = 1; // 查询区间 开始
  int64  endTime = 2;   // 查询区间 结束
}

message DeviceInfoCountResp{
  int64 online = 1;
  int64 offline = 2;
  int64 inactive = 3;
  int64 unknown = 4;
}

message DeviceTypeCountResp{
  int64 device = 1;
  int64 gateway = 2;
  int64 subset = 3;
  int64 unknown = 4;
}

message DeviceRegisterReq{
  string productID = 1;  //产品id
  string deviceName = 2; //设备名称
  int64 nonce = 3;       //随机数
  int64 timestamp = 4;   //秒级时间戳
  string signature = 5;  //签名信息
}

message DeviceRegisterResp{
  int64 len = 1;       //payload加密前信息的长度
  /*
  加密过程将原始 JSON 格式的 payload 转为字符串后进行 AES 加密，再进行 base64 加密。AES 加密算法为 CBC 模式，密钥长度128，取 productSecret 前16位，偏移量为长度16的字符“0”。
  原始 payload 内容说明：
  key                value               描述
  encryptionType     1              加密类型，1表示证书认证，2表示签名认证。
  psk                1239           设备密钥，当产品认证类型为签名认证时有此参数
  clientCert         -              设备证书文件字符串格式，当产品认证类型为证书认证时有此参数。
  clientKey          -              设备私钥文件字符串格式，当产品认证类型为证书认证时有此参数。
  */
  string payload = 2;
}

//----------------------------------------------------------------------------------------------


/*
下面是ota固件管理模块的消息
*/
message Firmware {
  int64   createdTime = 1; //创建时间 只读
  int64 firmwareID = 2;
  string productID = 3;
  string name = 4; //升级包名称
  string version = 5; //升级包版本
  int32 isDiff = 6; //是否差分包,1:整包,2:差分
  string signMethod = 7; //签名方法 MD5/SHA
  google.protobuf.StringValue   desc = 8;//描述
  google.protobuf.StringValue   extData = 9;//自定义数据
  repeated OtaFirmwareFile files = 10;//产品信息
}
message FirmwareResp{
  int64 firmwareID = 1;
}
message FirmwareInfo {
  int64   createdTime = 1; //创建时间 只读
  int64 firmwareID = 2;
  string productID = 3;
  string productName = 4;
  string name = 5; //升级包名称
  string version = 6; //升级包版本
  int32 isDiff = 7; //是否差分包,1:整包,2:差分
  string signMethod = 8; //签名方法 MD5/SHA
  google.protobuf.StringValue   desc = 9;//描述
  google.protobuf.StringValue   extData = 10;//自定义数据
  repeated OtaFirmwareFile files = 11;//产品信息
}
message OtaFirmwareFile {
  string filePath = 1;
  string name = 2;
}
message FirmwareInfoDeleteReq {
  int64 firmwareID = 1;
}
message FirmwareInfoDeleteResp {
  repeated string path =1;
}
message FirmwareInfoIndexReq {
  OtaPageInfo page = 1;//分页信息 只获取一个则不填
  int64 firmwareID = 2;
  string productID = 3;
}
message FirmwareInfoIndexResp {
  repeated FirmwareInfo list = 1;//固件信息
  int64  total = 2;//总数(只有分页的时候会返回)
}
message FirmwareInfoReadReq {
  int64 firmwareID = 1;
}
message OtaFirmwareFileReq{
  int64 fileID = 1; 
  string name = 2;
  string host = 3;
  string filePath = 4;
  int64 size = 5;
  string storage = 6;
  string signMethod = 7;
  string signature = 8;
}
message OtaFirmwareFileInfo{
  int64 fileID = 1; 
  int64 firmwareID = 2;
  string name = 3;
  string host = 4;
  string filePath = 5;
  int64 size = 6;
  string storage = 7;
  string signMethod = 8;
  string signature = 9;
}
message OtaFirmwareFileResp{
  int64 fileID = 1; 
  string name = 2;
  string host = 3;
  string filePath = 4;
  int64 size = 5;
  string storage = 6;
  //string signMethod = 7;
  string signature = 7;
}
message OtaFirmwareFileIndexReq{
  OtaPageInfo page = 1;
  int64 firmwareID = 2;
  google.protobuf.Int64Value size = 3;
}
message OtaFirmwareFileIndexResp{
  repeated OtaFirmwareFileInfo list = 1;
  int64 total = 2;
}
message FirmwareInfoReadResp{
  int64   createdTime = 1; //创建时间 只读
  int64 firmwareID = 2;
  string productID = 3;
  string productName = 4;
  string name = 5; //升级包名称
  string version = 6; //升级包版本
  int32 isDiff = 7; //是否差分包,1:整包,2:差分
  string signMethod = 8;
  google.protobuf.StringValue   desc = 10;//描述
  google.protobuf.StringValue   extData = 11;//自定义数据
  repeated OtaFirmwareFileResp files = 12;//产品信息
}
message OtaFirmwareDeviceInfoReq{
  int64 firmwareID = 1;
}
message OtaFirmwareDeviceInfoResp{
  string versions = 1;
}
/*
下面是ota升级任务管理模块的消息
*/
message OtaTaskCreateReq {
  int64 firmwareID = 1;
  string taskUid = 2;
  int32 type = 3;
  int32 upgradeType=4;
  int32 autoRepeat = 5;
  google.protobuf.StringValue deviceList = 6;
  google.protobuf.StringValue versionList = 7;
}
message OtaTaskCreatResp{
  int64 taskID = 1;
}
message OtaTaskInfo {
  int64 taskID = 1;
  int64 firmwareID = 2;
  string productID = 3;
  string taskUid = 4;
  int32 type = 5;
  int32 upgradeType=6;
  int32 autoRepeat = 7;
  int32 status = 8; //升级状态:1未升级2升级中3完成4已取消
  google.protobuf.StringValue deviceList = 9;
  google.protobuf.StringValue versionList = 10;
  int64   createdTime = 11; //创建时间 只读
}
message OtaTaskCancleReq{
  int64 taskID = 1;
}
message OtaTaskIndexReq{
  OtaPageInfo page = 1;
  int64 firmwareID = 2;
  int64 productID = 3;
}
message OtaTaskIndexResp{
  repeated OtaTaskInfo list =1;
  int64 total =2;
}
message OtaTaskReadReq{
  int64 taskID = 1;
}
message OtaTaskReadResp{
  int64 taskID = 1;
  int64 firmwareID = 2;
  string taskUid = 3; //批次号
  int32 type = 4; //升级范围1全部设备2定向升级
  int32 upgradeType=5; //升级策略:1静态升级2动态升级
  int32 autoRepeat = 6; //是否自动重试,1:不,2自动重试
  int32 status = 7; //升级状态:1未升级2升级中3完成4已取消
  google.protobuf.StringValue deviceList = 8;
  google.protobuf.StringValue versionList = 9;
  int64   createdTime = 10;
}

message OtaTaskDeviceIndexReq {
  OtaPageInfo page = 1;
  int64 firmwareID = 2;
  string taskUid = 3; //批次号
  string deviceName = 4; //设备
  int32 status = 5; //状态
}
message OtaTaskDeviceIndexResp {
    repeated OtaTaskDeviceInfo list =1;
    int64 total =2;
}
message OtaTaskDeviceInfo {
  int64 ID = 1;
  int64 firmwareID = 2;
  string deviceName=3;
  string productID=4;
  string productName=5;
  string taskUid = 6; //批次号
  int32 status = 7; //升级状态:101待确认 201/202/203待推送 301已推送 401升级中 501升级成功 601升级失败 701已取消
  string version = 8; //当前版本号
  string desc = 9; //状态详情
  int64   retryCount = 10; //重试次数,计划最多20次
  int64   updatedTime = 11; //创建时间 只读
}
message OtaTaskDeviceReadReq {
  int64 ID = 1;
}
message OtaTaskBatchReq {
  int64 ID = 1;
  string productID = 2;
  string deviceName=3;
  string version=4;
  string module=5;
}
message OtaTaskBatchResp {
  int64 ID = 1;
  string taskUid = 2;
  int64 firmwareID = 3;
}
message OtaTaskDeviceProcessReq {
  int64 ID = 1;
  int64 step =2;
  string module=3;
  string desc=4;
}
message OtaTaskDeviceCancleReq {
  int64 ID = 1;
}
message OtaPageInfo{
  int64 page = 1;
  int64 size = 2;
}
message OtaCommonResp {
}
