// Code generated by goctl. DO NOT EDIT.
// Source: dm.proto

package server

import (
	"context"

	"github.com/i-Things/things/src/dmsvr/internal/logic/devicemsg"
	"github.com/i-Things/things/src/dmsvr/internal/svc"
	"github.com/i-Things/things/src/dmsvr/pb/dm"
)

type DeviceMsgServer struct {
	svcCtx *svc.ServiceContext
	dm.UnimplementedDeviceMsgServer
}

func NewDeviceMsgServer(svcCtx *svc.ServiceContext) *DeviceMsgServer {
	return &DeviceMsgServer{
		svcCtx: svcCtx,
	}
}

// 获取设备sdk调试日志
func (s *DeviceMsgServer) SdkLogIndex(ctx context.Context, in *dm.SdkLogIndexReq) (*dm.SdkLogIndexResp, error) {
	l := devicemsglogic.NewSdkLogIndexLogic(ctx, s.svcCtx)
	return l.SdkLogIndex(in)
}

// 获取设备调试信息记录登入登出,操作
func (s *DeviceMsgServer) HubLogIndex(ctx context.Context, in *dm.HubLogIndexReq) (*dm.HubLogIndexResp, error) {
	l := devicemsglogic.NewHubLogIndexLogic(ctx, s.svcCtx)
	return l.HubLogIndex(in)
}

// 获取设备数据信息
func (s *DeviceMsgServer) PropertyLatestIndex(ctx context.Context, in *dm.PropertyLatestIndexReq) (*dm.PropertyIndexResp, error) {
	l := devicemsglogic.NewPropertyLatestIndexLogic(ctx, s.svcCtx)
	return l.PropertyLatestIndex(in)
}

// 获取设备数据信息
func (s *DeviceMsgServer) PropertyLogIndex(ctx context.Context, in *dm.PropertyLogIndexReq) (*dm.PropertyIndexResp, error) {
	l := devicemsglogic.NewPropertyLogIndexLogic(ctx, s.svcCtx)
	return l.PropertyLogIndex(in)
}

// 获取设备数据信息
func (s *DeviceMsgServer) EventLogIndex(ctx context.Context, in *dm.EventLogIndexReq) (*dm.EventIndexResp, error) {
	l := devicemsglogic.NewEventLogIndexLogic(ctx, s.svcCtx)
	return l.EventLogIndex(in)
}

// 获取设备影子列表
func (s *DeviceMsgServer) ShadowIndex(ctx context.Context, in *dm.PropertyLatestIndexReq) (*dm.ShadowIndexResp, error) {
	l := devicemsglogic.NewShadowIndexLogic(ctx, s.svcCtx)
	return l.ShadowIndex(in)
}

// 主动触发单个设备ota升级推送
func (s *DeviceMsgServer) OtaPromptIndex(ctx context.Context, in *dm.OtaPromptIndexReq) (*dm.OtaPromptIndexResp, error) {
	l := devicemsglogic.NewOtaPromptIndexLogic(ctx, s.svcCtx)
	return l.OtaPromptIndex(in)
}
