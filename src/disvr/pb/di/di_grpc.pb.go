// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/di.proto

package di

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceMsg_SdkLogIndex_FullMethodName         = "/di.DeviceMsg/sdkLogIndex"
	DeviceMsg_HubLogIndex_FullMethodName         = "/di.DeviceMsg/hubLogIndex"
	DeviceMsg_PropertyLatestIndex_FullMethodName = "/di.DeviceMsg/propertyLatestIndex"
	DeviceMsg_PropertyLogIndex_FullMethodName    = "/di.DeviceMsg/propertyLogIndex"
	DeviceMsg_EventLogIndex_FullMethodName       = "/di.DeviceMsg/eventLogIndex"
	DeviceMsg_ShadowIndex_FullMethodName         = "/di.DeviceMsg/shadowIndex"
)

// DeviceMsgClient is the client API for DeviceMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceMsgClient interface {
	// 获取设备sdk调试日志
	SdkLogIndex(ctx context.Context, in *SdkLogIndexReq, opts ...grpc.CallOption) (*SdkLogIndexResp, error)
	// 获取设备调试信息记录登入登出,操作
	HubLogIndex(ctx context.Context, in *HubLogIndexReq, opts ...grpc.CallOption) (*HubLogIndexResp, error)
	// 获取设备数据信息
	PropertyLatestIndex(ctx context.Context, in *PropertyLatestIndexReq, opts ...grpc.CallOption) (*PropertyIndexResp, error)
	// 获取设备数据信息
	PropertyLogIndex(ctx context.Context, in *PropertyLogIndexReq, opts ...grpc.CallOption) (*PropertyIndexResp, error)
	// 获取设备数据信息
	EventLogIndex(ctx context.Context, in *EventLogIndexReq, opts ...grpc.CallOption) (*EventIndexResp, error)
	// 获取设备影子列表
	ShadowIndex(ctx context.Context, in *PropertyLatestIndexReq, opts ...grpc.CallOption) (*ShadowIndexResp, error)
	//主动触发单个设备ota升级推送
	OtaPromptIndex(ctx context.Context, in *OtaPromptIndexReq, opts ...grpc.CallOption) (*OtaPromptIndexResp, error)
}

type deviceMsgClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceMsgClient(cc grpc.ClientConnInterface) DeviceMsgClient {
	return &deviceMsgClient{cc}
}

func (c *deviceMsgClient) SdkLogIndex(ctx context.Context, in *SdkLogIndexReq, opts ...grpc.CallOption) (*SdkLogIndexResp, error) {
	out := new(SdkLogIndexResp)
	err := c.cc.Invoke(ctx, DeviceMsg_SdkLogIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) HubLogIndex(ctx context.Context, in *HubLogIndexReq, opts ...grpc.CallOption) (*HubLogIndexResp, error) {
	out := new(HubLogIndexResp)
	err := c.cc.Invoke(ctx, DeviceMsg_HubLogIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) PropertyLatestIndex(ctx context.Context, in *PropertyLatestIndexReq, opts ...grpc.CallOption) (*PropertyIndexResp, error) {
	out := new(PropertyIndexResp)
	err := c.cc.Invoke(ctx, DeviceMsg_PropertyLatestIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) PropertyLogIndex(ctx context.Context, in *PropertyLogIndexReq, opts ...grpc.CallOption) (*PropertyIndexResp, error) {
	out := new(PropertyIndexResp)
	err := c.cc.Invoke(ctx, DeviceMsg_PropertyLogIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) EventLogIndex(ctx context.Context, in *EventLogIndexReq, opts ...grpc.CallOption) (*EventIndexResp, error) {
	out := new(EventIndexResp)
	err := c.cc.Invoke(ctx, DeviceMsg_EventLogIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) ShadowIndex(ctx context.Context, in *PropertyLatestIndexReq, opts ...grpc.CallOption) (*ShadowIndexResp, error) {
	out := new(ShadowIndexResp)
	err := c.cc.Invoke(ctx, DeviceMsg_ShadowIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) OtaPromptIndex(ctx context.Context, in *OtaPromptIndexReq, opts ...grpc.CallOption) (*OtaPromptIndexResp, error) {
	out := new(OtaPromptIndexResp)
	err := c.cc.Invoke(ctx, "/di.DeviceMsg/otaPromptIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceMsgServer is the server API for DeviceMsg service.
// All implementations must embed UnimplementedDeviceMsgServer
// for forward compatibility
type DeviceMsgServer interface {
	// 获取设备sdk调试日志
	SdkLogIndex(context.Context, *SdkLogIndexReq) (*SdkLogIndexResp, error)
	// 获取设备调试信息记录登入登出,操作
	HubLogIndex(context.Context, *HubLogIndexReq) (*HubLogIndexResp, error)
	// 获取设备数据信息
	PropertyLatestIndex(context.Context, *PropertyLatestIndexReq) (*PropertyIndexResp, error)
	// 获取设备数据信息
	PropertyLogIndex(context.Context, *PropertyLogIndexReq) (*PropertyIndexResp, error)
	// 获取设备数据信息
	EventLogIndex(context.Context, *EventLogIndexReq) (*EventIndexResp, error)
	// 获取设备影子列表
	ShadowIndex(context.Context, *PropertyLatestIndexReq) (*ShadowIndexResp, error)
	//主动触发单个设备ota升级推送
	OtaPromptIndex(context.Context, *OtaPromptIndexReq) (*OtaPromptIndexResp, error)
	mustEmbedUnimplementedDeviceMsgServer()
}

// UnimplementedDeviceMsgServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceMsgServer struct {
}

func (UnimplementedDeviceMsgServer) SdkLogIndex(context.Context, *SdkLogIndexReq) (*SdkLogIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SdkLogIndex not implemented")
}
func (UnimplementedDeviceMsgServer) HubLogIndex(context.Context, *HubLogIndexReq) (*HubLogIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HubLogIndex not implemented")
}
func (UnimplementedDeviceMsgServer) PropertyLatestIndex(context.Context, *PropertyLatestIndexReq) (*PropertyIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyLatestIndex not implemented")
}
func (UnimplementedDeviceMsgServer) PropertyLogIndex(context.Context, *PropertyLogIndexReq) (*PropertyIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyLogIndex not implemented")
}
func (UnimplementedDeviceMsgServer) EventLogIndex(context.Context, *EventLogIndexReq) (*EventIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventLogIndex not implemented")
}
func (UnimplementedDeviceMsgServer) ShadowIndex(context.Context, *PropertyLatestIndexReq) (*ShadowIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShadowIndex not implemented")
}
func (UnimplementedDeviceMsgServer) OtaPromptIndex(context.Context, *OtaPromptIndexReq) (*OtaPromptIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaPromptIndex not implemented")
}
func (UnimplementedDeviceMsgServer) mustEmbedUnimplementedDeviceMsgServer() {}

// UnsafeDeviceMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceMsgServer will
// result in compilation errors.
type UnsafeDeviceMsgServer interface {
	mustEmbedUnimplementedDeviceMsgServer()
}

func RegisterDeviceMsgServer(s grpc.ServiceRegistrar, srv DeviceMsgServer) {
	s.RegisterService(&DeviceMsg_ServiceDesc, srv)
}

func _DeviceMsg_SdkLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).SdkLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMsg_SdkLogIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).SdkLogIndex(ctx, req.(*SdkLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_HubLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).HubLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMsg_HubLogIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).HubLogIndex(ctx, req.(*HubLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_PropertyLatestIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyLatestIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).PropertyLatestIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMsg_PropertyLatestIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).PropertyLatestIndex(ctx, req.(*PropertyLatestIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_PropertyLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).PropertyLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMsg_PropertyLogIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).PropertyLogIndex(ctx, req.(*PropertyLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_EventLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).EventLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMsg_EventLogIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).EventLogIndex(ctx, req.(*EventLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_ShadowIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyLatestIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).ShadowIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMsg_ShadowIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).ShadowIndex(ctx, req.(*PropertyLatestIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_OtaPromptIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaPromptIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).OtaPromptIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/di.DeviceMsg/otaPromptIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).OtaPromptIndex(ctx, req.(*OtaPromptIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceMsg_ServiceDesc is the grpc.ServiceDesc for DeviceMsg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceMsg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "di.DeviceMsg",
	HandlerType: (*DeviceMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sdkLogIndex",
			Handler:    _DeviceMsg_SdkLogIndex_Handler,
		},
		{
			MethodName: "hubLogIndex",
			Handler:    _DeviceMsg_HubLogIndex_Handler,
		},
		{
			MethodName: "propertyLatestIndex",
			Handler:    _DeviceMsg_PropertyLatestIndex_Handler,
		},
		{
			MethodName: "propertyLogIndex",
			Handler:    _DeviceMsg_PropertyLogIndex_Handler,
		},
		{
			MethodName: "eventLogIndex",
			Handler:    _DeviceMsg_EventLogIndex_Handler,
		},
		{
			MethodName: "shadowIndex",
			Handler:    _DeviceMsg_ShadowIndex_Handler,
		},
		{
			MethodName: "otaPromptIndex",
			Handler:    _DeviceMsg_OtaPromptIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/di.proto",
}

const (
	DeviceInteract_SendAction_FullMethodName        = "/di.DeviceInteract/sendAction"
	DeviceInteract_ActionRead_FullMethodName        = "/di.DeviceInteract/actionRead"
	DeviceInteract_RespAction_FullMethodName        = "/di.DeviceInteract/respAction"
	DeviceInteract_GetPropertyReply_FullMethodName  = "/di.DeviceInteract/getPropertyReply"
	DeviceInteract_SendProperty_FullMethodName      = "/di.DeviceInteract/sendProperty"
	DeviceInteract_MultiSendProperty_FullMethodName = "/di.DeviceInteract/multiSendProperty"
	DeviceInteract_PropertyRead_FullMethodName      = "/di.DeviceInteract/propertyRead"
	DeviceInteract_SendMsg_FullMethodName           = "/di.DeviceInteract/sendMsg"
)

// DeviceInteractClient is the client API for DeviceInteract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceInteractClient interface {
	// 调用设备行为
	SendAction(ctx context.Context, in *SendActionReq, opts ...grpc.CallOption) (*SendActionResp, error)
	// 获取异步调用设备行为的结果
	ActionRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*SendActionResp, error)
	// 回复调用设备行为
	RespAction(ctx context.Context, in *RespActionReq, opts ...grpc.CallOption) (*Response, error)
	// 请求设备获取设备最新属性
	GetPropertyReply(ctx context.Context, in *GetPropertyReplyReq, opts ...grpc.CallOption) (*GetPropertyReplyResp, error)
	// 调用设备属性
	SendProperty(ctx context.Context, in *SendPropertyReq, opts ...grpc.CallOption) (*SendPropertyResp, error)
	// 批量调用设备属性
	MultiSendProperty(ctx context.Context, in *MultiSendPropertyReq, opts ...grpc.CallOption) (*MultiSendPropertyResp, error)
	// 获取异步调用设备属性的结果
	PropertyRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*SendPropertyResp, error)
	// 发送消息给设备
	SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error)
}

type deviceInteractClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceInteractClient(cc grpc.ClientConnInterface) DeviceInteractClient {
	return &deviceInteractClient{cc}
}

func (c *deviceInteractClient) SendAction(ctx context.Context, in *SendActionReq, opts ...grpc.CallOption) (*SendActionResp, error) {
	out := new(SendActionResp)
	err := c.cc.Invoke(ctx, DeviceInteract_SendAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) ActionRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*SendActionResp, error) {
	out := new(SendActionResp)
	err := c.cc.Invoke(ctx, DeviceInteract_ActionRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) RespAction(ctx context.Context, in *RespActionReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DeviceInteract_RespAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) GetPropertyReply(ctx context.Context, in *GetPropertyReplyReq, opts ...grpc.CallOption) (*GetPropertyReplyResp, error) {
	out := new(GetPropertyReplyResp)
	err := c.cc.Invoke(ctx, DeviceInteract_GetPropertyReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) SendProperty(ctx context.Context, in *SendPropertyReq, opts ...grpc.CallOption) (*SendPropertyResp, error) {
	out := new(SendPropertyResp)
	err := c.cc.Invoke(ctx, DeviceInteract_SendProperty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) MultiSendProperty(ctx context.Context, in *MultiSendPropertyReq, opts ...grpc.CallOption) (*MultiSendPropertyResp, error) {
	out := new(MultiSendPropertyResp)
	err := c.cc.Invoke(ctx, DeviceInteract_MultiSendProperty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) PropertyRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*SendPropertyResp, error) {
	out := new(SendPropertyResp)
	err := c.cc.Invoke(ctx, DeviceInteract_PropertyRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error) {
	out := new(SendMsgResp)
	err := c.cc.Invoke(ctx, DeviceInteract_SendMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceInteractServer is the server API for DeviceInteract service.
// All implementations must embed UnimplementedDeviceInteractServer
// for forward compatibility
type DeviceInteractServer interface {
	// 调用设备行为
	SendAction(context.Context, *SendActionReq) (*SendActionResp, error)
	// 获取异步调用设备行为的结果
	ActionRead(context.Context, *RespReadReq) (*SendActionResp, error)
	// 回复调用设备行为
	RespAction(context.Context, *RespActionReq) (*Response, error)
	// 请求设备获取设备最新属性
	GetPropertyReply(context.Context, *GetPropertyReplyReq) (*GetPropertyReplyResp, error)
	// 调用设备属性
	SendProperty(context.Context, *SendPropertyReq) (*SendPropertyResp, error)
	// 批量调用设备属性
	MultiSendProperty(context.Context, *MultiSendPropertyReq) (*MultiSendPropertyResp, error)
	// 获取异步调用设备属性的结果
	PropertyRead(context.Context, *RespReadReq) (*SendPropertyResp, error)
	// 发送消息给设备
	SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error)
	mustEmbedUnimplementedDeviceInteractServer()
}

// UnimplementedDeviceInteractServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceInteractServer struct {
}

func (UnimplementedDeviceInteractServer) SendAction(context.Context, *SendActionReq) (*SendActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAction not implemented")
}
func (UnimplementedDeviceInteractServer) ActionRead(context.Context, *RespReadReq) (*SendActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionRead not implemented")
}
func (UnimplementedDeviceInteractServer) RespAction(context.Context, *RespActionReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespAction not implemented")
}
func (UnimplementedDeviceInteractServer) GetPropertyReply(context.Context, *GetPropertyReplyReq) (*GetPropertyReplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyReply not implemented")
}
func (UnimplementedDeviceInteractServer) SendProperty(context.Context, *SendPropertyReq) (*SendPropertyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProperty not implemented")
}
func (UnimplementedDeviceInteractServer) MultiSendProperty(context.Context, *MultiSendPropertyReq) (*MultiSendPropertyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiSendProperty not implemented")
}
func (UnimplementedDeviceInteractServer) PropertyRead(context.Context, *RespReadReq) (*SendPropertyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyRead not implemented")
}
func (UnimplementedDeviceInteractServer) SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedDeviceInteractServer) mustEmbedUnimplementedDeviceInteractServer() {}

// UnsafeDeviceInteractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceInteractServer will
// result in compilation errors.
type UnsafeDeviceInteractServer interface {
	mustEmbedUnimplementedDeviceInteractServer()
}

func RegisterDeviceInteractServer(s grpc.ServiceRegistrar, srv DeviceInteractServer) {
	s.RegisterService(&DeviceInteract_ServiceDesc, srv)
}

func _DeviceInteract_SendAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).SendAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInteract_SendAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).SendAction(ctx, req.(*SendActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_ActionRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).ActionRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInteract_ActionRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).ActionRead(ctx, req.(*RespReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_RespAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).RespAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInteract_RespAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).RespAction(ctx, req.(*RespActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_GetPropertyReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertyReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).GetPropertyReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInteract_GetPropertyReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).GetPropertyReply(ctx, req.(*GetPropertyReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_SendProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPropertyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).SendProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInteract_SendProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).SendProperty(ctx, req.(*SendPropertyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_MultiSendProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSendPropertyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).MultiSendProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInteract_MultiSendProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).MultiSendProperty(ctx, req.(*MultiSendPropertyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_PropertyRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).PropertyRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInteract_PropertyRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).PropertyRead(ctx, req.(*RespReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInteract_SendMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).SendMsg(ctx, req.(*SendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceInteract_ServiceDesc is the grpc.ServiceDesc for DeviceInteract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceInteract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "di.DeviceInteract",
	HandlerType: (*DeviceInteractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendAction",
			Handler:    _DeviceInteract_SendAction_Handler,
		},
		{
			MethodName: "actionRead",
			Handler:    _DeviceInteract_ActionRead_Handler,
		},
		{
			MethodName: "respAction",
			Handler:    _DeviceInteract_RespAction_Handler,
		},
		{
			MethodName: "getPropertyReply",
			Handler:    _DeviceInteract_GetPropertyReply_Handler,
		},
		{
			MethodName: "sendProperty",
			Handler:    _DeviceInteract_SendProperty_Handler,
		},
		{
			MethodName: "multiSendProperty",
			Handler:    _DeviceInteract_MultiSendProperty_Handler,
		},
		{
			MethodName: "propertyRead",
			Handler:    _DeviceInteract_PropertyRead_Handler,
		},
		{
			MethodName: "sendMsg",
			Handler:    _DeviceInteract_SendMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/di.proto",
}
