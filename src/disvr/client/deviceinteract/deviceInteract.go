// Code generated by goctl. DO NOT EDIT.
// Source: di.proto

package deviceinteract

import (
	"context"

	"github.com/i-Things/things/src/disvr/internal/svc"
	"github.com/i-Things/things/src/disvr/pb/di"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	EventIndex             = di.EventIndex
	EventIndexResp         = di.EventIndexResp
	EventLogIndexReq       = di.EventLogIndexReq
	GetPropertyReplyReq    = di.GetPropertyReplyReq
	GetPropertyReplyResp   = di.GetPropertyReplyResp
	HubLogIndex            = di.HubLogIndex
	HubLogIndexReq         = di.HubLogIndexReq
	HubLogIndexResp        = di.HubLogIndexResp
	MultiSendPropertyReq   = di.MultiSendPropertyReq
	MultiSendPropertyResp  = di.MultiSendPropertyResp
	OtaPromptIndexReq      = di.OtaPromptIndexReq
	OtaPromptIndexResp     = di.OtaPromptIndexResp
	PageInfo               = di.PageInfo
	PropertyIndex          = di.PropertyIndex
	PropertyIndexResp      = di.PropertyIndexResp
	PropertyLatestIndexReq = di.PropertyLatestIndexReq
	PropertyLogIndexReq    = di.PropertyLogIndexReq
	RespActionReq          = di.RespActionReq
	RespReadReq            = di.RespReadReq
	Response               = di.Response
	SdkLogIndex            = di.SdkLogIndex
	SdkLogIndexReq         = di.SdkLogIndexReq
	SdkLogIndexResp        = di.SdkLogIndexResp
	SendActionReq          = di.SendActionReq
	SendActionResp         = di.SendActionResp
	SendMsgReq             = di.SendMsgReq
	SendMsgResp            = di.SendMsgResp
	SendOption             = di.SendOption
	SendPropertyMsg        = di.SendPropertyMsg
	SendPropertyReq        = di.SendPropertyReq
	SendPropertyResp       = di.SendPropertyResp
	ShadowIndex            = di.ShadowIndex
	ShadowIndexResp        = di.ShadowIndexResp

	DeviceInteract interface {
		// 调用设备行为
		SendAction(ctx context.Context, in *SendActionReq, opts ...grpc.CallOption) (*SendActionResp, error)
		// 获取异步调用设备行为的结果
		ActionRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*SendActionResp, error)
		// 回复调用设备行为
		RespAction(ctx context.Context, in *RespActionReq, opts ...grpc.CallOption) (*Response, error)
		// 请求设备获取设备最新属性
		GetPropertyReply(ctx context.Context, in *GetPropertyReplyReq, opts ...grpc.CallOption) (*GetPropertyReplyResp, error)
		// 调用设备属性
		SendProperty(ctx context.Context, in *SendPropertyReq, opts ...grpc.CallOption) (*SendPropertyResp, error)
		// 批量调用设备属性
		MultiSendProperty(ctx context.Context, in *MultiSendPropertyReq, opts ...grpc.CallOption) (*MultiSendPropertyResp, error)
		// 获取异步调用设备属性的结果
		PropertyRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*SendPropertyResp, error)
		// 发送消息给设备
		SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error)
	}

	defaultDeviceInteract struct {
		cli zrpc.Client
	}

	directDeviceInteract struct {
		svcCtx *svc.ServiceContext
		svr    di.DeviceInteractServer
	}
)

func NewDeviceInteract(cli zrpc.Client) DeviceInteract {
	return &defaultDeviceInteract{
		cli: cli,
	}
}

func NewDirectDeviceInteract(svcCtx *svc.ServiceContext, svr di.DeviceInteractServer) DeviceInteract {
	return &directDeviceInteract{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

// 调用设备行为
func (m *defaultDeviceInteract) SendAction(ctx context.Context, in *SendActionReq, opts ...grpc.CallOption) (*SendActionResp, error) {
	client := di.NewDeviceInteractClient(m.cli.Conn())
	return client.SendAction(ctx, in, opts...)
}

// 调用设备行为
func (d *directDeviceInteract) SendAction(ctx context.Context, in *SendActionReq, opts ...grpc.CallOption) (*SendActionResp, error) {
	return d.svr.SendAction(ctx, in)
}

// 获取异步调用设备行为的结果
func (m *defaultDeviceInteract) ActionRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*SendActionResp, error) {
	client := di.NewDeviceInteractClient(m.cli.Conn())
	return client.ActionRead(ctx, in, opts...)
}

// 获取异步调用设备行为的结果
func (d *directDeviceInteract) ActionRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*SendActionResp, error) {
	return d.svr.ActionRead(ctx, in)
}

// 回复调用设备行为
func (m *defaultDeviceInteract) RespAction(ctx context.Context, in *RespActionReq, opts ...grpc.CallOption) (*Response, error) {
	client := di.NewDeviceInteractClient(m.cli.Conn())
	return client.RespAction(ctx, in, opts...)
}

// 回复调用设备行为
func (d *directDeviceInteract) RespAction(ctx context.Context, in *RespActionReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.RespAction(ctx, in)
}

// 请求设备获取设备最新属性
func (m *defaultDeviceInteract) GetPropertyReply(ctx context.Context, in *GetPropertyReplyReq, opts ...grpc.CallOption) (*GetPropertyReplyResp, error) {
	client := di.NewDeviceInteractClient(m.cli.Conn())
	return client.GetPropertyReply(ctx, in, opts...)
}

// 请求设备获取设备最新属性
func (d *directDeviceInteract) GetPropertyReply(ctx context.Context, in *GetPropertyReplyReq, opts ...grpc.CallOption) (*GetPropertyReplyResp, error) {
	return d.svr.GetPropertyReply(ctx, in)
}

// 调用设备属性
func (m *defaultDeviceInteract) SendProperty(ctx context.Context, in *SendPropertyReq, opts ...grpc.CallOption) (*SendPropertyResp, error) {
	client := di.NewDeviceInteractClient(m.cli.Conn())
	return client.SendProperty(ctx, in, opts...)
}

// 调用设备属性
func (d *directDeviceInteract) SendProperty(ctx context.Context, in *SendPropertyReq, opts ...grpc.CallOption) (*SendPropertyResp, error) {
	return d.svr.SendProperty(ctx, in)
}

// 批量调用设备属性
func (m *defaultDeviceInteract) MultiSendProperty(ctx context.Context, in *MultiSendPropertyReq, opts ...grpc.CallOption) (*MultiSendPropertyResp, error) {
	client := di.NewDeviceInteractClient(m.cli.Conn())
	return client.MultiSendProperty(ctx, in, opts...)
}

// 批量调用设备属性
func (d *directDeviceInteract) MultiSendProperty(ctx context.Context, in *MultiSendPropertyReq, opts ...grpc.CallOption) (*MultiSendPropertyResp, error) {
	return d.svr.MultiSendProperty(ctx, in)
}

// 获取异步调用设备属性的结果
func (m *defaultDeviceInteract) PropertyRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*SendPropertyResp, error) {
	client := di.NewDeviceInteractClient(m.cli.Conn())
	return client.PropertyRead(ctx, in, opts...)
}

// 获取异步调用设备属性的结果
func (d *directDeviceInteract) PropertyRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*SendPropertyResp, error) {
	return d.svr.PropertyRead(ctx, in)
}

// 发送消息给设备
func (m *defaultDeviceInteract) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error) {
	client := di.NewDeviceInteractClient(m.cli.Conn())
	return client.SendMsg(ctx, in, opts...)
}

// 发送消息给设备
func (d *directDeviceInteract) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error) {
	return d.svr.SendMsg(ctx, in)
}
