syntax = "proto3";
option go_package = "pb/di";
import "google/protobuf/wrappers.proto";

package di;

message Response {
}
message PageInfo{
  int64 page = 1;
  int64 size = 2;
}


message SendOption {
  int64  timeoutToFail = 1;//超时失败时间
  int64  requestTimeout = 2;//请求超时,超时后会进行重试
  int64  retryInterval = 3;//重试间隔
}

//设备消息
service DeviceMsg {
  //获取设备sdk调试日志
  rpc sdkLogIndex(SdkLogIndexReq) returns (SdkLogIndexResp);
  //获取设备调试信息记录登入登出,操作
  rpc hubLogIndex(HubLogIndexReq)   returns (HubLogIndexResp);
  //获取设备数据信息
  rpc propertyLatestIndex(PropertyLatestIndexReq)     returns (PropertyIndexResp);
  //获取设备数据信息
  rpc propertyLogIndex(PropertyLogIndexReq)     returns (PropertyIndexResp);
  //获取设备数据信息
  rpc eventLogIndex(EventLogIndexReq)     returns (EventIndexResp);
  //获取设备影子列表
  rpc shadowIndex(PropertyLatestIndexReq)     returns (ShadowIndexResp);
  //主动触发单个设备ota升级推送
  rpc otaPromptIndex(OtaPromptIndexReq) returns (OtaPromptIndexResp);
}

//设备交互
service DeviceInteract {
  //调用设备行为
  rpc sendAction(SendActionReq)         returns(SendActionResp);
  //获取异步调用设备行为的结果
  rpc actionRead(RespReadReq)         returns(SendActionResp);

  //回复调用设备行为
  rpc respAction(RespActionReq)         returns(Response);

  //请求设备获取设备最新属性
  rpc getPropertyReply(GetPropertyReplyReq) returns(GetPropertyReplyResp);

  //调用设备属性
  rpc sendProperty(SendPropertyReq)     returns(SendPropertyResp);
  //批量调用设备属性
  rpc multiSendProperty(MultiSendPropertyReq)     returns(MultiSendPropertyResp);
  //获取异步调用设备属性的结果
  rpc propertyRead(RespReadReq)  returns(SendPropertyResp);
  //发送消息给设备
  rpc sendMsg(SendMsgReq)     returns(SendMsgResp);
}

message ShadowIndexResp{
  repeated ShadowIndex  list = 1;
}
/*设备的日志数据*/
message ShadowIndex{
  string dataID = 1;//属性id
  string value = 2;//获取到的值
  int64 updatedDeviceTime = 3;//更新到设备的时间
}

message GetPropertyReplyReq{
  string productID = 1; //产品id (必填)
  string deviceName = 2; //设备名(必填)
  repeated string dataIDs = 3; //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条
}

message GetPropertyReplyResp{
  int64   code = 1;//设备返回状态码
  string  msg = 2;//返回状态
  string msgToken = 3;//调用id
  int64 timestamp = 4;//上报时间戳(毫秒时间戳)
  string params = 5;//获取到的值
}

/*获取对应日志信息*/
message PropertyLogIndexReq{
  PageInfo page = 1;//使用了聚合函数及间隔的时候无效
  repeated string deviceNames = 3; //设备名(不填获取产品下所有设备)
  string productID = 4; //产品id (必填)
  string dataID = 5; //获取的具体标识符的数据(必填)
  int64 timeStart = 6;//获取时间的开始(毫秒时间戳)
  int64 timeEnd = 7;//时间的结束(毫秒时间戳)
  int64 interval = 8;//间隔(单位毫秒) 如果这个值不为零值 则时间的开始和结束必须有效及聚合函数不应该为空
  string argFunc = 9;//聚合函数 avg:平均值 first:第一个参数 last:最后一个参数 count:总数 twa: 时间加权平均函数 参考:https://docs.taosdata.com/taos-sql/function
  //  /*
  //  FILL 语句指定某一窗口区间数据缺失的情况下的填充模式。填充模式包括以下几种：
  //    不进行填充：NONE（默认填充模式）。
  //    VALUE 填充：固定值填充，此时需要指定填充的数值。例如：FILL(VALUE, 1.23)。
  //    PREV 填充：使用前一个非 NULL 值填充数据。例如：FILL(PREV)。
  //    NULL 填充：使用 NULL 填充数据。例如：FILL(NULL)。
  //    LINEAR 填充：根据前后距离最近的非 NULL 值做线性插值填充。例如：FILL(LINEAR)。
  //    NEXT 填充：使用下一个非 NULL 值填充数据。例如：FILL(NEXT)。
  //  */
  string fill = 10; //填充模式 参考:https://docs.taosdata.com/taos-sql/distinguished/
  int32 order = 11; //时间排序 0:aes(默认,从久到近排序) 1:desc(时间从近到久排序)
}

/*获取对应日志信息*/
message PropertyLatestIndexReq{
  string productID = 2; //产品id (必填)
  string deviceName = 1; //设备名(必填)
  repeated string dataIDs = 3; //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
}

/*设备的日志数据*/
message PropertyIndex{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string dataID = 3;//属性id
  string value = 4;//获取到的值
}

/*获取对应日志信息*/
message PropertyIndexResp{
  int64 total = 1; //总数
  repeated PropertyIndex list = 2;
}

/*获取对应日志信息*/
message EventLogIndexReq{
  PageInfo page = 1;//使用了聚合函数及间隔的时候无效
  string productID = 2; //产品id (必填)
  repeated string deviceNames = 3; //设备名(不填获取产品下所有设备)
  string dataID = 4; //获取的具体标识符的数据(必填)
  int64 timeStart = 5;//获取时间的开始(毫秒时间戳)
  int64 timeEnd = 6;//时间的结束(毫秒时间戳)
  repeated string types = 7; //类型 事件类型: 信息:info  告警alert  故障:fault
}

/*设备的日志数据*/
message EventIndex{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string type = 2 ;// 事件类型: 信息:info  告警alert  故障:fault
  string dataID = 3;//属性id
  string params = 4;//获取到的值
}

/*获取对应日志信息*/
message EventIndexResp{
  int64 total = 1; //总数
  repeated EventIndex list = 2;
}

/*实时获取对应信息*/
message HubLogIndexReq{
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  int64   timeStart = 3;//获取时间的开始(毫秒时间戳)
  int64   timeEnd = 4;//时间的结束(毫秒时间戳)
  PageInfo   page = 5;//分页信息
  repeated string actions = 6;//过滤操作类型 connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
  repeated string topics = 7;//过滤主题
  string content = 8;//过滤内容
  string requestID = 9;//过滤请求ID
}

/*实时获取对应信息*/
message HubLogIndexResp{
  int64 total = 1; //总数
  repeated HubLogIndex list = 2;
}

/*设备的日志数据*/
message HubLogIndex{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string action = 2 ;//操作类型;connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
  string requestID = 3;//请求ID
  string tranceID = 4;//服务器端事务id
  string topic = 5;//主题
  string content = 6;//具体内容
  int64 resultType = 7;//请求结果状态
}

/*获取sdk调试日志信息*/
message SdkLogIndexReq {
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  int64   timeStart = 3;//获取时间的开始
  int64   timeEnd = 4;//时间的结束
  int64   logLevel = 5; //日志等级
  PageInfo page = 6;//分页信息 只获取一个则不填
}
/*sdk调试日志信息*/
message SdkLogIndexResp {
  int64 total = 1; //总数
  repeated SdkLogIndex list = 2;
}
message SdkLogIndex {
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  int64 loglevel = 2 ;//操作类型;显示相应的操作名称、API名称、服务的method
  string content = 3;//具体内容
}


message SendActionReq{
  string  productID = 1; //产品id 获取产品id下的所有设备信息
  string  deviceName = 2; //设备名
  string actionID = 3;//产品数据模板中行为功能的标识符，由开发者自行根据设备的应用场景定义
  string inputParams = 4;//输入参数
  bool isAsync = 5;//是否异步获取
  SendOption option = 6;//异步选项
}

message SendActionResp{
  string msgToken = 1;//调用id
  string outputParams = 2;//输出参数 注意：此字段可能返回 null，表示取不到有效值。
  string  msg = 3;//返回状态
  int64   code = 4;//设备返回状态码
}

//获取异步消息的请求
message RespReadReq{
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  string  msgToken = 3;//调用id
}

message SendPropertyReq{
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  string data = 3;//属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
  int64 shadowControl = 4;//设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错 2:如果有设备影子只修改影子,没有的也不下发
  bool isAsync = 6;//是否异步操作 异步情况通过获取接口来获取
}

message RespActionReq{
  string  productID = 1; //产品id 获取产品id下的所有设备信息
  string  deviceName = 2; //设备名
  string msgToken = 3;//调用id
  string outputParams = 4;//输出参数 注意：此字段可能返回 null，表示取不到有效值。
  string  msg = 5;//返回状态
  int64   code = 6;//设备返回状态码
}


message SendPropertyResp{
  int64   code = 1;//设备返回状态码
  string  msg = 2;//返回状态
  string msgToken = 3;//调用id
}

message SendMsgReq{
  string topic = 1; //发送的topic
  bytes payload = 2;//发送的数据
}

message SendMsgResp{

}



message MultiSendPropertyReq{
  string  productID = 1; //产品id
  repeated string deviceNames = 2; //设备名
  int64 shadowControl = 3;//设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错 2:如果有设备影子只修改影子,没有的也不下发
  string data = 4;//属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
}
message SendPropertyMsg{
  string  deviceName = 1; //设备名
  int64   code = 2;//设备返回状态码
  string  msg = 3;//返回状态
  string msgToken = 4;//调用id
  string sysMsg = 5;//系统错误信息
  int64  sysCode = 6;//系统错误码
}

message MultiSendPropertyResp{
  repeated SendPropertyMsg list = 1; //批量设备返回结果列表
}

message OtaPromptIndexReq {
  int64 id = 1;
  string version = 2;
  string module = 3;
  string productID = 4;
  string deviceName = 5;
}
message OtaPromptIndexResp {
  int64 id = 1;
  string taskUid = 2;
  int64 firmwareID =3;
}