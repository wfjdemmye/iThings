// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/timedjob.proto

package timedjob

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimedManageClient is the client API for TimedManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimedManageClient interface {
	//发送延时请求,如果任务不存在,则会自动创建,但是自动创建的需要填写param
	TaskSendDelay(ctx context.Context, in *TaskSendDelayReq, opts ...grpc.CallOption) (*Response, error)
}

type timedManageClient struct {
	cc grpc.ClientConnInterface
}

func NewTimedManageClient(cc grpc.ClientConnInterface) TimedManageClient {
	return &timedManageClient{cc}
}

func (c *timedManageClient) TaskSendDelay(ctx context.Context, in *TaskSendDelayReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/timedjob.TimedManage/TaskSendDelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimedManageServer is the server API for TimedManage service.
// All implementations must embed UnimplementedTimedManageServer
// for forward compatibility
type TimedManageServer interface {
	//发送延时请求,如果任务不存在,则会自动创建,但是自动创建的需要填写param
	TaskSendDelay(context.Context, *TaskSendDelayReq) (*Response, error)
	mustEmbedUnimplementedTimedManageServer()
}

// UnimplementedTimedManageServer must be embedded to have forward compatible implementations.
type UnimplementedTimedManageServer struct {
}

func (UnimplementedTimedManageServer) TaskSendDelay(context.Context, *TaskSendDelayReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSendDelay not implemented")
}
func (UnimplementedTimedManageServer) mustEmbedUnimplementedTimedManageServer() {}

// UnsafeTimedManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimedManageServer will
// result in compilation errors.
type UnsafeTimedManageServer interface {
	mustEmbedUnimplementedTimedManageServer()
}

func RegisterTimedManageServer(s grpc.ServiceRegistrar, srv TimedManageServer) {
	s.RegisterService(&TimedManage_ServiceDesc, srv)
}

func _TimedManage_TaskSendDelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSendDelayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimedManageServer).TaskSendDelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timedjob.TimedManage/TaskSendDelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimedManageServer).TaskSendDelay(ctx, req.(*TaskSendDelayReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TimedManage_ServiceDesc is the grpc.ServiceDesc for TimedManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimedManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timedjob.TimedManage",
	HandlerType: (*TimedManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskSendDelay",
			Handler:    _TimedManage_TaskSendDelay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/timedjob.proto",
}
