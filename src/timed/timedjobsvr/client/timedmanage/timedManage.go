// Code generated by goctl. DO NOT EDIT.
// Source: timedjob.proto

package timedmanage

import (
	"context"

	"github.com/i-Things/things/src/timed/timedjobsvr/internal/svc"
	"github.com/i-Things/things/src/timed/timedjobsvr/pb/timedjob"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Response         = timedjob.Response
	TaskDelayOption  = timedjob.TaskDelayOption
	TaskDelayQueue   = timedjob.TaskDelayQueue
	TaskDelaySql     = timedjob.TaskDelaySql
	TaskSendDelayReq = timedjob.TaskSendDelayReq

	TimedManage interface {
		// 发送延时请求,如果任务不存在,则会自动创建,但是自动创建的需要填写param
		TaskSendDelay(ctx context.Context, in *TaskSendDelayReq, opts ...grpc.CallOption) (*Response, error)
	}

	defaultTimedManage struct {
		cli zrpc.Client
	}

	directTimedManage struct {
		svcCtx *svc.ServiceContext
		svr    timedjob.TimedManageServer
	}
)

func NewTimedManage(cli zrpc.Client) TimedManage {
	return &defaultTimedManage{
		cli: cli,
	}
}

func NewDirectTimedManage(svcCtx *svc.ServiceContext, svr timedjob.TimedManageServer) TimedManage {
	return &directTimedManage{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

// 发送延时请求,如果任务不存在,则会自动创建,但是自动创建的需要填写param
func (m *defaultTimedManage) TaskSendDelay(ctx context.Context, in *TaskSendDelayReq, opts ...grpc.CallOption) (*Response, error) {
	client := timedjob.NewTimedManageClient(m.cli.Conn())
	return client.TaskSendDelay(ctx, in, opts...)
}

// 发送延时请求,如果任务不存在,则会自动创建,但是自动创建的需要填写param
func (d *directTimedManage) TaskSendDelay(ctx context.Context, in *TaskSendDelayReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.TaskSendDelay(ctx, in)
}
