// Code generated by goctl. DO NOT EDIT.
package types

type UserInfo struct {
	UserID      int64  `json:"userID,string,optional"`      // 用户id
	UserName    string `json:"userName,optional"`           // 用户名(唯一)
	Password    string `json:"password,optional,omitempty"` // 登录密码
	Email       string `json:"email,optional"`              // 邮箱
	Phone       string `json:"phone,optional"`              // 手机号
	Wechat      string `json:"wechat,optional"`             // 微信UnionID
	LastIP      string `json:"lastIP,optional"`             // 最后登录ip
	RegIP       string `json:"regIP,optional"`              // 注册ip
	NickName    string `json:"nickName,optional"`           // 用户的昵称
	City        string `json:"city,optional"`               // 用户所在城市
	Country     string `json:"country,optional"`            // 用户所在国家
	Province    string `json:"province,optional"`           // 用户所在省份
	Language    string `json:"language,optional"`           // 用户的语言，简体中文为zh_CN
	HeadImgUrl  string `json:"headImgUrl,optional"`         // 用户头像
	CreatedTime int64  `json:"createdTime,string,optional"` // 创建时间
	Role        int64  `json:"role,optional"`               // 用户角色
	Sex         int64  `json:"sex,optional"`                // 用户的性别，值为1时是男性，值为2时是女性，值为0时是未知
	IsAllData   int64  `json:"isAllData,optional"`          // 是否所有数据权限（1是，2否）
}

type UserCreateResp struct {
	UserID int64 `json:"userID,string,optional"` // 用户id
}

type UserCaptchaReq struct {
	Data string `json:"data,optional"`              //短信验证时填写手机号
	Type string `json:"type,options=sms|image"`     //验证方式:短信验证,图片验证码
	Use  string `json:"use,options=login|register"` //用途
}

type UserCaptchaResp struct {
	CodeID string `json:"codeID"`       //验证码编号
	Url    string `json:"url,optional"` //图片验证码url
	Expire int64  `json:"expire"`       //过期时间
}

type UserIndexReq struct {
	Page     PageInfo `json:"page"`              //分页信息
	UserName string   `json:"userName,optional"` //用户名(唯一)
	Phone    string   `json:"phone,optional"`    // 手机号
	Email    string   `json:"email,optional"`    // 邮箱
}

type UserIndexResp struct {
	List  []*UserInfo `json:"list,omitempty"`           //用户信息列表
	Total int64       `json:"total,optional,omitempty"` //总数
}

type UserReadReq struct {
	UserID int64 `json:"userID,string,optional"` // 用户id
}

type UserDeleteReq struct {
	UserID int64 `json:"userID,string,optional"` // 用户id
}

type UserLoginReq struct {
	Account   string `json:"account"`                                         //登录账号(支持用户名,手机号登录) 账号密码登录时需要填写
	PwdType   int32  `json:"pwdType"`                                         //账号密码登录时需要填写.1,无密码 2，明文 3，md5加密
	Password  string `json:"password"`                                        //密码，建议md5转换 密码登录时需要填写
	LoginType string `json:"loginType,options=phone|wxOpen|wxIn|wxMiniP|pwd"` //验证类型 phone 手机号 wxOpen 微信开放平台 wxIn 微信内 wxMiniP 微信小程序 pwd 账号密码
	Code      string `json:"code,optional"`                                   //验证码    微信登录填code
	CodeID    string `json:"codeID,optional"`                                 //验证码编号 微信登录填state
}

type UserLoginResp struct {
	Info  UserInfo `json:"info"`  //用户信息
	Token JwtToken `json:"token"` //用户token
}

type JwtToken struct {
	AccessToken  string `json:"accessToken,omitempty"`         //用户token
	AccessExpire int64  `json:"accessExpire,string,omitempty"` //token过期时间
	RefreshAfter int64  `json:"refreshAfter,string,omitempty"` //token刷新时间
}

type UserResourceReadResp struct {
	Menu []*MenuData `json:"menu"` //菜单资源
	Info *UserInfo   `json:"info"` //用户信息
}

type PageInfo struct {
	Page int64 `json:"page,optional" form:"page,optional"` // 页码
	Size int64 `json:"size,optional" form:"size,optional"` // 每页大小
}

type CommonResp struct {
	ID int64 `json:"id,optional"` // id
}

type WithID struct {
	ID int64 `json:"id,optional"` // id
}

type Tag struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type Point struct {
	Longitude float64 `json:"longitude,range=[0:180]"` //经度
	Latitude  float64 `json:"latitude,range=[0:90]"`   //纬度
}

type DateRange struct {
	Start string `json:"start,optional"` //开始时间 格式：yyyy-mm-dd
	End   string `json:"end,optional"`   //结束时间 格式：yyyy-mm-dd
}

type TimeRange struct {
	Start int64 `json:"start,optional"` //开始时间 unix时间戳
	End   int64 `json:"end,optional"`   //结束时间 unix时间戳
}

type MenuCreateReq struct {
	MenuData
}

type MenuIndexReq struct {
	Name string `json:"name,optional"` // 按菜单名称筛选
	Path string `json:"path,optional"` // 按菜单路径筛选
}

type MenuData struct {
	ID         int64  `json:"id,optional"`         // 编号
	Name       string `json:"name,optional"`       // 菜单名称
	ParentID   int64  `json:"parentID,optional"`   // 父菜单ID，一级菜单为1
	Type       int64  `json:"type,optional"`       // 类型   1. 内部页面   2，iframe内嵌  3，外部链接跳转 4，微前端
	Path       string `json:"path,optional"`       // 系统的path
	Component  string `json:"component,optional"`  // 页面
	Icon       string `json:"icon,optional"`       // 菜单图标
	Redirect   string `json:"redirect,optional"`   // 路由重定向
	Order      int64  `json:"order,optional"`      // 左侧table排序序号
	HideInMenu int64  `json:"hideInMenu,optional"` // 菜单是否隐藏 1：是 2：否
	CreateTime int64  `json:"createTime,optional"` // 创建时间
}

type MenuIndexResp struct {
	List []*MenuData `json:"list"` //菜单列表
}

type MenuUpdateReq struct {
	MenuData
}

type MenuDeleteReq struct {
	ID int64 `json:"id"` // 编号
}

type RoleCreateReq struct {
	Name   string `json:"name"`            // 角色名称
	Remark string `json:"remark,optional"` // 备注
	Status int64  `json:"status,optional"` // 状态 1:启用,2:禁用
}

type RoleIndexReq struct {
	Page   PageInfo `json:"page"`             //分页信息,只获取一个则不填
	Name   string   `json:"name,optional "`   //按名称查找角色
	Status int64    `json:"status,optional "` //按状态查找角色
}

type RoleIndexData struct {
	ID          int64   `json:"id"`          // 编号
	Name        string  `json:"name"`        // 角色名称
	Remark      string  `json:"remark"`      // 备注
	CreatedTime int64   `json:"createdTime"` // 创建时间
	Status      int64   `json:"status"`      // 角色状态
	RoleMenuID  []int64 `json:"roleMenuID"`  // 角色对应的菜单id列表
}

type RoleIndexResp struct {
	List  []*RoleIndexData `json:"list"`  //角色列表数据
	Total int64            `json:"total"` //角色列表总数
}

type RoleUpdateReq struct {
	ID     int64  `json:"id"`                          // 编号
	Name   string `json:"name,optional"`               // 角色名称
	Remark string `json:"remark,optional"`             // 备注
	Status int64  `json:"status,optional,options=1|2"` // 状态
}

type RoleDeleteReq struct {
	ID int64 `json:"id"` //编号
}

type RoleMenuUpdateReq struct {
	ID     int64   `json:"id"`     //角色编号
	MenuID []int64 `json:"menuID"` //菜单编号列表
}

type SysLogLoginIndexReq struct {
	Page          PageInfo  `json:"page"`                   //分页信息,只获取一个则不填
	IpAddr        string    `json:"ipAddr,optional"`        //按ip地址查找
	LoginLocation string    `json:"loginLocation,optional"` //按登录地址查找
	DateRange     DateRange `json:"dateRange,optional"`     //按时间范围查找
}

type SysLogLoginIndexData struct {
	UserID        int64  `json:"userID,string,optional"` // 用户id
	UserName      string `json:"userName"`               // 登录账号
	IpAddr        string `json:"ipAddr"`                 // 登录IP地址
	LoginLocation string `json:"loginLocation"`          // 登录地点
	Browser       string `json:"browser"`                // 浏览器类型
	Os            string `json:"os"`                     // 操作系统
	Code          int64  `json:"code,string"`            // 登录状态（200成功 其它失败）
	Msg           string `json:"msg"`                    // 提示消息
	CreatedTime   int64  `json:"createdTime,string"`     // 登录时间
}

type SysLogLoginIndexResp struct {
	List  []*SysLogLoginIndexData `json:"list"`  //登录日志列表数据
	Total int64                   `json:"total"` //登录日志列表总记录数
}

type SysLogOperIndexReq struct {
	Page         PageInfo `json:"page"`                          //分页信息,只获取一个则不填
	OperName     string   `json:"operName,optional "`            //按操作名称查找
	OperUserName string   `json:"operUserName,optional "`        //按操作人员名称查找
	BusinessType int64    `json:"businessType,string,optional "` //按业务类型（1新增 2修改 3删除 4查询）查找
}

type SysLogOperIndexData struct {
	UserID       int64  `json:"userID,string,optional"` // 用户id
	OperUserName string `json:"operUserName"`           //操作人员名称
	OperName     string `json:"operName"`               //操作名称
	BusinessType int64  `json:"businessType,string"`    //业务类型（1新增 2修改 3删除 4查询）
	Uri          string `json:"uri"`                    //请求地址
	OperIpAddr   string `json:"operIpAddr"`             //操作主机ip地址
	OperLocation string `json:"operLocation"`           //操作地点
	Req          string `json:"req"`                    //请求参数
	Resp         string `json:"resp"`                   //返回参数
	Code         int64  `json:"code,string"`            //登录状态（200成功 其它失败）
	Msg          string `json:"msg"`                    //提示消息
	CreatedTime  int64  `json:"createdTime,string"`     //操作时间
}

type SysLogOperIndexResp struct {
	List  []*SysLogOperIndexData `json:"list"`  //操作日志列表数据
	Total int64                  `json:"total"` //操作日志列表总记录数
}

type ApiCreateReq struct {
	Route        string `json:"route"`                    // 接口路由
	Method       int64  `json:"method,range=[1:9]"`       // 接口请求方式（1 GET 2 POST 3 HEAD 4 OPTIONS 5 PUT 6 DELETE 7 TRACE 8 CONNECT 9 其它）
	Group        string `json:"group"`                    // 接口分组
	Name         string `json:"name"`                     // 接口名称
	BusinessType int64  `json:"businessType,range=[1:5]"` // 业务类型（1新增 2修改 3删除 4查询 5其它）
}

type ApiIndexReq struct {
	Page   PageInfo `json:"page,optional"`               // 分页信息,只获取一个则不填
	Route  string   `json:"route,optional"`              // 接口路由
	Method int64    `json:"method,range=[1:9],optional"` // 接口请求方式: （1 GET 2 POST 3 HEAD 4 OPTIONS 5 PUT 6 DELETE 7 TRACE 8 CONNECT 9 其它）
	Group  string   `json:"group,optional"`              // 接口分组
	Name   string   `json:"name,optional"`               // 接口名称
}

type ApiIndexData struct {
	ID           int64  `json:"id"`                       // 接口编号
	Route        string `json:"route"`                    // 接口路由
	Method       int64  `json:"method,range=[1:9]"`       // 接口请求方式: （1 GET 2 POST 3 HEAD 4 OPTIONS 5 PUT 6 DELETE 7 TRACE 8 CONNECT 9 其它）
	Group        string `json:"group"`                    // 接口分组
	Name         string `json:"name"`                     // 接口名称
	BusinessType int64  `json:"businessType,range=[1:5]"` // 业务类型（1新增 2修改 3删除 4查询 5其它)
}

type ApiIndexResp struct {
	List  []*ApiIndexData `json:"list"`  // 接口列表数据
	Total int64           `json:"total"` // 接口列表总记录数
}

type ApiUpdateReq struct {
	ID     int64  `json:"id"`                          // 接口编号
	Route  string `json:"route,optional"`              // 接口路由
	Method int64  `json:"method,range=[1:9],optional"` // 接口请求方式: （1 GET 2 POST 3 HEAD 4 OPTIONS 5 PUT 6 DELETE 7 TRACE 8 CONNECT 9 其它）
	Group  string `json:"group,optional"`              // 接口分组
	Name   string `json:"name,optional"`               // 接口名称
}

type ApiDeleteReq struct {
	ID int64 `json:"id"` // 接口编号
}

type Map struct {
	Mode      string `json:"mode，options=baidu"` //坐标系 默认百度坐标系
	AccessKey string `json:"accessKey"`          //设备地图key
}

type Oss struct {
	Host string `json:"host"` //oss访问前缀
}

type ConfigResp struct {
	Map Map `json:"map"` //设备地图相关配置
	Oss Oss `json:"oss"` //oss相关配置
}

type UploadUrlCreateReq struct {
	Business string `json:"business"`        //业务(如产品管理 productManage)
	Scene    string `json:"scene"`           //场景(业务定义 如产品图片 productImg)
	FilePath string `json:"filePath"`        //文件路径(带文件名)
	Rename   bool   `json:"rename,optional"` //true 文件重命名，false 不重命名(默认)
}

type UploadUrlCreateResp struct {
	FilePath  string `json:"filePath"`  //文件路径(带文件名)
	UploadUri string `json:"uploadUri"` //附件直传地址
}

type UploadFileReq struct {
	FilePath string `json:"filePath"`        //文件路径(带文件名)
	Business string `form:"business"`        //业务(如产品管理 productManage)
	Scence   string `form:"scence"`          //场景(业务定义 如产品图片 productImg)
	Rename   bool   `form:"rename,optional"` //1文件重命名，0不重命名
	File     []byte `form:"file"`            //文件内容,二进制文件传输
}

type UploadFileResp struct {
	FilePath string `json:"filePath"` //文件路径(带文件名)
	FileUri  string `json:"fileUri"`  //文件uri 相对路径
}

type AuthApiInfo struct {
	Route  string `json:"route"`              // 接口路由
	Method int64  `json:"method,range=[1:9]"` // 接口请求方式（1 GET 2 POST 3 HEAD 4 OPTIONS 5 PUT 6 DELETE 7 TRACE 8 CONNECT 9 其它）
}

type AuthApiMultiUpdateReq struct {
	RoleID uint64         `json:"roleID"` //角色ID
	List   []*AuthApiInfo `json:"list"`   //API列表数据
}

type AuthApiIndexReq struct {
	RoleID uint64 `json:"roleID"` //角色ID
}

type AuthApiIndexResp struct {
	List  []*AuthApiInfo `json:"list"`  //API列表数据
	Total int64          `json:"total"` //API列表总数
}

type DeviceAuthLoginReq struct {
	Username    string `json:"username"`                       //用户名
	Password    string `json:"password,optional"`              //密码
	ClientID    string `json:"clientID"`                       //clientID
	Ip          string `json:"ip"`                             //访问的ip地址
	Certificate string `json:"certificate,optional,omitempty"` //客户端证书 base64后传过来
}

type DeviceAuthAccessReq struct {
	Username string `json:"username,omitempty"` //用户名
	Topic    string `json:"topic,omitempty"`    //主题
	ClientID string `json:"clientID,omitempty"` //clientID
	Access   string `json:"access,omitempty"`   //操作
	Ip       string `json:"ip,omitempty"`       //访问的ip地址
}

type DeviceAuthRootCheckReq struct {
	Username    string `json:"username,omitempty"`             //用户名
	Password    string `json:"password,optional,omitempty"`    //密码
	ClientID    string `json:"clientID,omitempty"`             //clientID
	Ip          string `json:"ip,omitempty"`                   //访问的ip地址
	Certificate []byte `json:"certificate,optional,omitempty"` //客户端证书
}

type DeviceRegisterReq struct {
	ProductID  string `json:"productID"`  //产品id 只读
	DeviceName string `json:"deviceName"` //设备名称 读写
	Nonce      int64  `json:"nonce"`      //随机数
	Timestamp  int64  `json:"timestamp"`  //秒级时间戳
	Signature  string `json:"signature"`  //签名信息
}

type DeviceRegisterResp struct {
	Len     int64  `json:"len"` //payload加密前信息的长度
	Payload string `json:"payload"`
}

type DeviceAuth5LoginReq struct {
	Username    string `json:"username"`                       //用户名
	Password    string `json:"password,optional"`              //密码
	ClientID    string `json:"clientID"`                       //clientID
	Ip          string `json:"ip"`                             //访问的ip地址
	Certificate string `json:"certificate,optional,omitempty"` //客户端证书 base64后传过来
}

type DeviceAuth5LoginResp struct {
	Result      string `json:"result"`                //验证结果 "allow" | "deny" | "ignore"
	IsSuperuser bool   `json:"is_superuser,optional"` //是否为超级用户，可选 true | false，该项为空时默认为 false
}

type DeviceAuth5AccessReq struct {
	Username string `json:"username,omitempty"` //用户名
	Topic    string `json:"topic,omitempty"`    //主题
	ClientID string `json:"clientID,omitempty"` //clientID
	Action   string `json:"action,omitempty"`   //操作
	Ip       string `json:"ip,omitempty"`       //访问的ip地址
}

type DeviceAuth5AccessResp struct {
	Result string `json:"result"` //验证结果 "allow" | "deny" | "ignore"
}

type DeviceMsgShadowIndex struct {
	DataID            string `json:"dataID"`            //属性id
	Value             string `json:"value"`             //获取到的值
	UpdatedDeviceTime int64  `json:"updatedDeviceTime"` //更新到设备的时间
}

type DeviceMsgShadowIndexResp struct {
	List []*DeviceMsgShadowIndex `json:"list"`
}

type DeviceMsgHubLogIndexReq struct {
	DeviceName string    `json:"deviceName,omitempty"`                //设备名
	ProductID  string    `json:"productID,omitempty"`                 //产品id 获取产品id下的所有设备信息
	TimeStart  int64     `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd    int64     `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	Page       *PageInfo `json:"page,optional"`                       //分页信息
	Actions    []string  `json:"actions,optional"`                    //过滤操作类型 connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
	Topics     []string  `json:"topics,optional"`                     //过滤主题
	Content    string    `json:"content,optional"`                    //过滤内容
	RequestID  string    `json:"requestID,optional"`                  //过滤请求ID
}

type DeviceMsgHubLogIndexResp struct {
	List  []*DeviceMsgHubLogIndex `json:"list"`  //数据
	Total int64                   `json:"total"` //总数
}

type DeviceMsgHubLogIndex struct {
	Timestamp  int64  `json:"timestamp,string"`
	Action     string `json:"action"` //connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
	RequestID  string `json:"requestID"`
	TranceID   string `json:"tranceID"`
	Topic      string `json:"topic"`
	Content    string `json:"content"`
	ResultType int64  `json:"resultType,string"`
}

type DeviceMsgSdkLogIndexReq struct {
	DeviceName string    `json:"deviceName,omitempty"`                //设备名
	ProductID  string    `json:"productID,omitempty"`                 //产品id 获取产品id下的所有设备信息
	TimeStart  int64     `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd    int64     `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	LogLevel   int       `json:"logLevel,optional"`                   //等级
	Page       *PageInfo `json:"page,optional"`                       //分页信息
}

type DeviceMsgSdkIndexResp struct {
	List  []*DeviceMsgSdkIndex `json:"list"`  //数据
	Total int64                `json:"total"` //总数
}

type DeviceMsgSdkIndex struct {
	Timestamp int64  `json:"timestamp,string"` //发生时间戳
	Loglevel  int64  `json:"loglevel"`         //日志级别 1)关闭 2)错误 3)告警 4)信息 5)调试
	Content   string `json:"content"`          //具体内容
}

type DeviceMsgPropertyLogIndexReq struct {
	DeviceNames []string  `json:"deviceNames,omitempty"`               //设备名(不填获取产品下所有设备)
	ProductID   string    `json:"productID,omitempty"`                 //产品id 获取产品id下的所有设备信息
	DataID      string    `json:"dataID,optional,omitempty"`           //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
	TimeStart   int64     `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd     int64     `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	Page        *PageInfo `json:"page,optional"`                       //分页信息
	Interval    int64     `json:"interval,optional"`                   //分页信息
	ArgFunc     string    `json:"argFunc,optional"`                    //分页信息
	Fill        string    `json:"fill,optional"`                       //填充模式 参考:https://docs.taosdata.com/taos-sql/distinguished/
	Order       int32     `json:"order,optional"`                      //时间排序 0:aes(默认,从久到近排序) 1:desc(时间从近到久排序)
}

type DeviceMsgPropertyLatestIndexReq struct {
	DeviceName string   `json:"deviceName,omitempty"`       //设备名
	ProductID  string   `json:"productID,omitempty"`        //产品id 获取产品id下的所有设备信息
	DataIDs    []string `json:"dataIDs,optional,omitempty"` //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
}

type DeviceMsgPropertyIndexResp struct {
	List  []*DeviceMsgPropertyIndex `json:"list"`  //数据
	Total int64                     `json:"total"` //总数
}

type DeviceMsgPropertyIndex struct {
	Timestamp int64  `json:"timestamp,string"` //发生时间戳
	DataID    string `json:"dataID"`           //获取的具体属性值
	Value     string `json:"value,omitempty"`  //获取到的值
}

type DeviceMsgEventLogIndexReq struct {
	DeviceNames []string  `json:"deviceNames,optional"`                //设备名(不填获取产品下所有设备)
	ProductID   string    `json:"productID,optional"`                  //产品id 获取产品id下的所有设备信息
	DataID      string    `json:"dataID,optional,omitempty"`           //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
	TimeStart   int64     `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd     int64     `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	Page        *PageInfo `json:"page,optional"`                       //分页信息
	Types       []string  `json:"types,optional"`                      //类型 事件类型: 信息:info  告警alert  故障:fault
}

type DeviceMsgEventIndexResp struct {
	List  []*DeviceMsgEventIndex `json:"list"`  //数据
	Total int64                  `json:"total"` //总数
}

type DeviceMsgEventIndex struct {
	Timestamp int64  `json:"timestamp,string"` //发生时间戳
	Type      string `json:"type,omitempty"`   //类型 事件类型: 信息:info  告警alert  故障:fault
	DataID    string `json:"dataID"`           //获取的具体属性值
	Params    string `json:"params,omitempty"` //获取到的值
}

type DeviceGateWayIndexReq struct {
	Page              *PageInfo `json:"page,optional"`     //分页信息 只获取一个则不填
	GateWayProductID  string    `json:"gateWayProductID"`  //产品ID
	GateWayDeviceName string    `json:"gateWaydeviceName"` //设备名称
}

type DeviceGateWayIndexResp struct {
	List  []*DeviceInfo `json:"list"`  //分组信息
	Total int64         `json:"total"` //总数(只有分页的时候会返回)
}

type DeviceGateWayMultiCreateReq struct {
	GateWayProductID  string        `json:"gateWayProductID"`  //产品ID
	GateWayDeviceName string        `json:"gateWaydeviceName"` //设备名称
	List              []*DeviceCore `json:"list,optional"`     //分组tag
}

type DeviceGateWayMultiDeleteReq struct {
	GateWayProductID  string        `json:"gateWayProductID"`  //产品ID
	GateWayDeviceName string        `json:"gateWaydeviceName"` //设备名称
	List              []*DeviceCore `json:"list,optional"`     //分组tag
}

type DeviceInfo struct {
	ProductID      string                             `json:"productID"`                           //产品id 只读
	ProjectID      int64                              `json:"projectID,string,optional"`           //项目id 只读
	AreaID         int64                              `json:"areaID,string,optional"`              //项目区域id 只读
	DeviceName     string                             `json:"deviceName"`                          //设备名称 读写
	DeviceAlias    *string                            `json:"deviceAlias,optional"`                //设备别名 读写
	Secret         string                             `json:"secret,optional"`                     //设备秘钥 只读
	Cert           string                             `json:"cert,optional"`                       // 设备证书  只读
	Imei           string                             `json:"imei,optional"`                       // IMEI号信息 只读
	Mac            string                             `json:"mac,optional"`                        // MAC号信息 只读
	Version        *string                            `json:"version,optional"`                    // 固件版本  读写
	HardInfo       string                             `json:"hardInfo,optional"`                   // 模组硬件型号 只读
	SoftInfo       string                             `json:"softInfo,optional"`                   // 模组软件版本 只读
	MobileOperator int64                              `json:"mobileOperator,optional,range=[0:4]"` //移动运营商:1)移动 2)联通 3)电信 4)广电
	Phone          *string                            `json:"phone,optional"`                      //手机号
	Iccid          *string                            `json:"iccid,optional"`                      //SIM卡卡号
	Position       *Point                             `json:"position,optional"`                   //设备定位,默认百度坐标系
	Address        *string                            `json:"address,optional"`                    //所在地址
	Tags           []*Tag                             `json:"tags,optional"`                       // 设备tag
	IsOnline       int64                              `json:"isOnline,optional,range=[0:2]"`       // 在线状态  1离线 2在线 只读
	FirstLogin     int64                              `json:"firstLogin,optional,string"`          //激活时间 只读
	LastLogin      int64                              `json:"lastLogin,optional,string"`           //最后上线时间 只读
	LogLevel       int64                              `json:"logLevel,optional,range=[0:5]"`       // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
	CreatedTime    int64                              `json:"createdTime,optional,string"`         //创建时间 只读
	WithProperties map[string]*DeviceInfoWithProperty `json:"withProperties,optional,omitempty"`   //获取的属性列表,如果不传withProperty,则不会返回
}

type DeviceInfoWithProperty struct {
	Value     string `json:"value"`            //获取到的值
	Timestamp int64  `json:"timestamp,string"` //发生时间戳
}

type DeviceInfoSaveReq struct {
	ProductID      string  `json:"productID"`                           //产品id 只读
	DeviceName     string  `json:"deviceName"`                          //设备名称 读写
	DeviceAlias    *string `json:"deviceAlias,optional"`                //设备别名 读写
	LogLevel       int64   `json:"logLevel,optional,range=[0:5]"`       // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
	Address        *string `json:"address,optional"`                    //所在地址
	Position       *Point  `json:"position,optional"`                   //设备定位,默认百度坐标系
	Tags           []*Tag  `json:"tags,optional"`                       // 设备tag
	Phone          *string `json:"phone,optional"`                      //手机号
	Iccid          *string `json:"iccid,optional"`                      //SIM卡卡号
	UserID         int64   `json:"userID,string,optional"`              // 用户id
	MobileOperator int64   `json:"mobileOperator,optional,range=[0:4]"` //移动运营商:1)移动 2)联通 3)电信 4)广电
	AreaID         *int64  `json:"areaID,string,optional"`              //项目区域id 只读（nil不更新，0为取消绑定，other则绑定）
}

type DeviceInfoDeleteReq struct {
	ProductID  string `json:"productID"`  //产品id 只读
	DeviceName string `json:"deviceName"` //设备名称 读写
}

type DeviceInfoReadReq struct {
	ProductID      string   `json:"productID,optional"`      //产品id 为空时获取所有产品
	DeviceName     string   `json:"deviceName"`              //设备名称 读写
	WithProperties []string `json:"withProperties,optional"` //如果不为nil,如果为空,获取设备所有最新属性 如果传了属性列表,则会返回属性列表
}

type DeviceInfoIndexReq struct {
	Page           *PageInfo `json:"page,optional"`                 //分页信息 只获取一个则不填
	ProductID      string    `json:"productID,optional"`            //产品id 为空时获取所有产品
	DeviceName     string    `json:"deviceName,optional"`           //过滤条件:模糊查询 设备名
	DeviceAlias    string    `json:"deviceAlias,optional"`          //过滤条件:模糊查询 设备别名
	Position       *Point    `json:"position,optional"`             //设备定位,默认百度坐标系，用于获取以该点为中心，Range范围内的设备列表，与Range连用
	Range          int64     `json:"range,optional"`                //过滤条件:距离坐标点固定范围内的设备 单位：米
	Tags           []*Tag    `json:"tags,optional"`                 // key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
	WithProperties []string  `json:"withProperties,optional"`       //如果不为nil,如果为空,获取设备所有最新属性 如果传了属性列表,则会返回属性列表,如果没有匹配的则不会返回
	AreaIDs        []int64   `json:"areaIDs,optional"`              //项目区域ids
	IsOnline       int64     `json:"isOnline,optional,range=[0:2]"` // 在线状态过滤  1离线 2在线
}

type DeviceInfoIndexResp struct {
	List  []*DeviceInfo `json:"list"`  //设备信息
	Total int64         `json:"total"` //总数(只有分页的时候会返回)
	Num   int64         `json:"num"`   //返回的数量
}

type DeviceCore struct {
	ProductID  string `json:"productID"`  //产品ID
	DeviceName string `json:"deviceName"` //设备名称
}

type DeviceCountReq struct {
	StartTime int64 `json:"startTime,optional" form:"startTime,optional"` //查询区间的开始时间（秒）
	EndTime   int64 `json:"endTime,optional" form:"endTime,optional"`     //查询区间的结束时间（秒）
}

type DeviceInfoCount struct {
	Online   int64 `json:"online"`   // 在线设备数
	Offline  int64 `json:"offline"`  // 离线设备数
	Inactive int64 `json:"inactive"` // 未激活设备数
	Unknown  int64 `json:"unknown"`  // 未知设备数（all = 在线+离线+未激活+未知）
}

type DeviceTypeCount struct {
	Device  int64 `json:"device"`  // 设备类型数
	Gateway int64 `json:"gateway"` // 网关类型数
	Subset  int64 `json:"subset"`  // 子设备类型数
	Unknown int64 `json:"unknown"` // 未知设备类型
}

type DeviceCountResp struct {
	DeviceInfoCount DeviceInfoCount `json:"deviceCount"`
	DeviceTypeCount DeviceTypeCount `json:"deviceTypeCount"`
}

type DeviceMultiImportReq struct {
	File []byte `form:"file,optional"` //csv文件(实际必填)
}

type DeviceMultiImportRow struct {
	Row         int64  `json:"row"`         //【提示】数据所在表格行
	ProductName string `json:"productName"` //【必填】产品名称
	DeviceName  string `json:"deviceName"`  //【必填】设备名称
	DeviceAlias string `json:"deviceAlias"` //【选填】设备别名
	Secret      string `json:"secret"`      //【选填】设备秘钥
	LogLevel    string `json:"logLevel"`    //【选填】日志级别（关闭/错误/告警/信息/调试）
	Tags        string `json:"tags"`        //【选填】设备标签（格式k1:v1;k2:v2;...）
	Position    string `json:"position"`    //【选填】设备位置百度坐标（格式:经,纬）
	Address     string `json:"address"`     //【选填】设备所在详细地址
	Tips        string `json:"tips"`        //【提示】模板使用提示
}

type DeviceMultiImportResp struct {
	Total   int64                   `json:"total"`   //当前表格数据量
	Headers *DeviceMultiImportRow   `json:"headers"` //表格表头信息
	Errdata []*DeviceMultiImportRow `json:"errdata"` //批量导入错误清单
}

type DeviceMultiImportErrdata struct {
	Row int64  `json:"row"` //错误所在表格行
	Msg string `json:"msg"` //详细错误信息
}

type DeviceInteractGetPropertyReplyReq struct {
	ProductID  string   `json:"productID"`        //产品id (必填)
	DeviceName string   `json:"deviceName"`       //设备名(必填)
	DataIDs    []string `json:"dataIDs,optional"` //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条
}

type DeviceInteractGetPropertyReplyResp struct {
	Code        int64  `json:"code"`        //设备返回状态码
	Status      string `json:"status"`      //返回状态
	ClientToken string `json:"clientToken"` //调用id
	Timestamp   int64  `json:"timestamp"`   //上报时间戳(毫秒时间戳)
	Params      string `json:"params"`      //获取到的值
}

type DeviceInteractSendMsgReq struct {
	Topic   string `json:"topic"`   //发送的topic
	Payload string `json:"payload"` //发送的数据
}

type DeviceInteractSendPropertyReq struct {
	ProductID     string `json:"productID"`              //产品id
	DeviceName    string `json:"deviceName"`             //设备名
	Data          string `json:"data"`                   //属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
	IsAsync       bool   `json:"isAsync,optional"`       //是否异步操作 异步情况通过获取接口来获取
	ShadowControl int64  `json:"shadowControl,optional"` //设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错 2:如果有设备影子只修改影子,没有的也不下发
}

type DeviceInteractSendPropertyResp struct {
	Code        int64  `json:"code"`        //设备返回状态码
	Status      string `json:"status"`      //返回状态
	ClientToken string `json:"clientToken"` //调用id
}

type DeviceInteractRespReadReq struct {
	ProductID   string `json:"productID"`   //产品id
	DeviceName  string `json:"deviceName"`  //设备名
	ClientToken string `json:"clientToken"` //调用id
}

type DeviceInteractSendActionReq struct {
	ProductID   string `json:"productID"`        //产品id
	DeviceName  string `json:"deviceName"`       //设备名
	ActionID    string `json:"actionID"`         //产品数据模板中行为功能的标识符，由开发者自行根据设备的应用场景定义
	InputParams string `json:"inputParams"`      //输入参数
	IsAsync     bool   `json:"isAsync,optional"` //是否异步操作 异步情况通过获取接口来获取
}

type DeviceInteractSendActionResp struct {
	ClientToken  string `json:"clientToken"`  //调用id
	OutputParams string `json:"outputParams"` //输出参数 注意：此字段可能返回 null，表示取不到有效值。
	Status       string `json:"status"`       //返回状态
	Code         int64  `json:"code"`         //设备返回状态码
}

type DeviceInteractMultiSendPropertyReq struct {
	AreaID        int64    `json:"areaID,string,optional"`  //项目区域id,传了优先从项目区域中获取设备列表
	GroupID       int64    `json:"groupID,string,optional"` //分组ID,传了会从分组下获取设备
	ProductID     string   `json:"productID,optional"`      //产品id
	DeviceNames   []string `json:"deviceNames,optional"`    //设备名列表
	ShadowControl int64    `json:"shadowControl,optional"`  //设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错 2:如果有设备影子只修改影子,没有的也不下发
	Data          string   `json:"data"`                    //属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
}

type DeviceInteractMultiSendPropertyMsg struct {
	ProductID   string `json:"productID"`   //产品id
	DeviceName  string `json:"deviceName"`  //设备名
	Code        int64  `json:"code"`        //设备返回状态码
	Status      string `json:"status"`      //返回状态
	ClientToken string `json:"clientToken"` //调用id
	SysCode     int64  `json:"sysCode"`     //系统错误码
	SysMsg      string `json:"sysMsg"`      //系统错误信息
}

type DeviceInteractMultiSendPropertyResp struct {
	List []*DeviceInteractMultiSendPropertyMsg `json:"list"` //批量设备返回结果列表
}

type ProductInfo struct {
	CreatedTime  int64   `json:"createdTime,optional,string"`       //创建时间 只读
	ProductID    string  `json:"productID,optional"`                //产品id 只读
	ProductName  string  `json:"productName,optional"`              //产品名称
	ProductImg   string  `json:"productImg,optional"`               //产品图片
	AuthMode     int64   `json:"authMode,optional,range=[0:2]"`     //认证方式:1:账密认证,2:秘钥认证
	DeviceType   int64   `json:"deviceType,optional,range=[0:3]"`   //设备类型:1:设备,2:网关,3:子设备
	CategoryID   int64   `json:"categoryID,optional"`               //产品品类
	NetType      int64   `json:"netType,optional,range=[0:6]"`      //通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
	DataProto    int64   `json:"dataProto,optional,range=[0:2]"`    //数据协议:1:自定义,2:数据模板
	AutoRegister int64   `json:"autoRegister,optional,range=[0:3]"` //动态注册:1:关闭,2:打开,3:打开并自动创建设备
	Secret       string  `json:"secret,optional"`                   //动态注册产品秘钥 只读
	Desc         *string `json:"desc,optional"`                     //描述
	Tags         []*Tag  `json:"tags,optional"`                     // 产品tag
}

type ProductInfoReadReq struct {
	ProductID string `json:"productID"` //产品id
}

type ProductInfoCreateReq struct {
	ProductName  string  `json:"productName"`                       //产品名称
	ProductID    string  `json:"productID,optional"`                //产品id
	AuthMode     int64   `json:"authMode,optional,range=[0:2]"`     //认证方式:1:账密认证,2:秘钥认证
	DeviceType   int64   `json:"deviceType,optional,range=[0:3]"`   //设备类型:1:设备,2:网关,3:子设备
	CategoryID   int64   `json:"categoryID,optional"`               //产品品类
	NetType      int64   `json:"netType,optional,range=[0:6]"`      //通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
	DataProto    int64   `json:"dataProto,optional,range=[0:2]"`    //数据协议:1:自定义,2:数据模板
	AutoRegister int64   `json:"autoRegister,optional,range=[0:3]"` //动态注册:1:关闭,2:打开,3:打开并自动创建设备
	Desc         *string `json:"desc,optional"`                     //描述
	Tags         []*Tag  `json:"tags,optional"`                     // 产品tag
	ProductImg   string  `json:"productImg,optional"`               //产品图片 传参为产品图片的file path
}

type ProductInfoUpdateReq struct {
	ProductID          string  `json:"productID"`                         //产品id 只读
	ProductName        string  `json:"productName,optional"`              //产品名称
	AuthMode           int64   `json:"authMode,optional,range=[0:2]"`     //认证方式:1:账密认证,2:秘钥认证
	DeviceType         int64   `json:"deviceType,optional,range=[0:3]"`   //设备类型:1:设备,2:网关,3:子设备
	CategoryID         int64   `json:"categoryID,optional"`               //产品品类
	NetType            int64   `json:"netType,optional,range=[0:6]"`      //通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
	DataProto          int64   `json:"dataProto,optional,range=[0:2]"`    //数据协议:1:自定义,2:数据模板
	AutoRegister       int64   `json:"autoRegister,optional,range=[0:3]"` //动态注册:1:关闭,2:打开,3:打开并自动创建设备
	Desc               *string `json:"desc,optional"`                     //描述
	Tags               []*Tag  `json:"tags,optional"`                     // 产品tag
	ProductImg         string  `json:"productImg,optional"`               //产品图片
	IsUpdateProductImg bool    `json:"isUpdateProductImg,optional"`       //只有这个参数为true的时候才会更新产品图片,传参为产品图片的file path
}

type ProductInfoDeleteReq struct {
	ProductID string `json:"productID"` //产品id 只读
}

type ProductInfoIndexReq struct {
	Page        *PageInfo `json:"page,optional"`                   //分页信息,只获取一个则不填
	ProductName string    `json:"productName,optional"`            //过滤产品名称
	DeviceType  int64     `json:"deviceType,optional,range=[0:3]"` //过滤设备类型:0:全部,1:设备,2:网关,3:子设备
	ProductIDs  []string  `json:"productIDs,optional"`             //过滤产品id列表
	Tags        []*Tag    `json:"tags,optional"`                   // key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
}

type ProductInfoIndexResp struct {
	List  []*ProductInfo `json:"list"`           //产品信息
	Total int64          `json:"total,optional"` //拥有的总数
	Num   int64          `json:"num,optional"`   //返回的数量
}

type ProductSchemaTslReadReq struct {
	ProductID string `json:"productID"` //产品id
}

type ProductSchemaTslReadResp struct {
	Tsl string `json:"tsl"` //物模型tsl
}

type ProductSchemaUpdateReq struct {
	*ProductSchemaInfo
}

type ProductSchemaTslImportReq struct {
	ProductID string `json:"productID"` //产品id 只读
	Tsl       string `json:"tsl"`       //物模型tsl
}

type ProductSchemaCreateReq struct {
	*ProductSchemaInfo
}

type ProductSchemaDeleteReq struct {
	ProductID  string `json:"productID"`  //产品id
	Identifier string `json:"identifier"` //标识符
}

type ProductSchemaIndexReq struct {
	Page        *PageInfo `json:"page,optional"`        //分页信息,只获取一个则不填
	ProductID   string    `json:"productID"`            //产品id
	Type        int64     `json:"type,optional"`        //物模型类型 1:property属性 2:event事件 3:action行为
	Tag         int64     `json:"tag,optional"`         //过滤条件: 物模型标签 1:自定义 2:可选 3:必选
	Identifiers []string  `json:"identifiers,optional"` //过滤标识符列表
}

type ProductSchemaIndexResp struct {
	List  []*ProductSchemaInfo `json:"list"`  //分页信息,只获取一个则不填
	Total int64                `json:"total"` //总数(只有分页的时候会返回)
}

type ProductSchemaInfo struct {
	ProductID  string  `json:"productID"`           //产品id 只读
	Type       int64   `json:"type"`                //物模型类型 1:property属性 2:event事件 3:action行为
	Tag        int64   `json:"tag"`                 //物模型标签 1:自定义 2:可选 3:必选  必选不可删除
	Identifier string  `json:"identifier"`          //标识符
	Name       *string `json:"name,optional"`       //功能名称
	Desc       *string `json:"desc,optional"`       //描述
	Required   int64   `json:"required,optional"`   //是否必须 1:是 2:否
	Affordance *string `json:"affordance,optional"` //各功能类型的详细参数定义
}

type SchemaAction struct {
	Input  []*SchemaParam `json:"input,optional"`  //调用参数
	Output []*SchemaParam `json:"output,optional"` //返回参数
}

type SchemaProperty struct {
	Mode   string        `json:"mode,optional"` //读写类型: r(只读) rw(可读可写)
	Define *SchemaDefine `json:"define"`        //参数定义
}

type SchemaEvent struct {
	Type   string         `json:"type"`            //事件类型: 信息:info  告警alert  故障:fault
	Params []*SchemaParam `json:"params,optional"` //事件参数
}

type SchemaDefine struct {
	Type      string            `json:"type"`                //参数类型: bool int string struct float timestamp array enum
	Mapping   map[string]string `json:"mapping,omitempty"`   //枚举及bool类型:bool enum
	Min       string            `json:"min,omitempty"`       //数值最小值:int  float
	Max       string            `json:"max,omitempty"`       //数值最大值:int string float
	Start     string            `json:"start,omitempty"`     //初始值:int float
	Step      string            `json:"step,omitempty"`      //步长:int float
	Unit      string            `json:"unit,omitempty"`      //单位:int float
	Specs     []*SchemaSpec     `json:"specs,omitempty"`     //结构体:struct
	ArrayInfo *SchemaDefine     `json:"arrayInfo,omitempty"` //数组:array
}

type SchemaSpec struct {
	Identifier string        `json:"identifier"` //参数标识符
	Name       string        `json:"name"`       //参数名称
	DataType   *SchemaDefine `json:"dataType"`   //参数定义
}

type SchemaParam struct {
	Identifier string        `json:"identifier"`       //参数标识符
	Name       string        `json:"name"`             //参数名称
	Define     *SchemaDefine `json:"define,omitempty"` //参数定义
}

type ProductRemoteConfig struct {
	ID         int64  `json:"id"`         //配置编号
	Content    string `json:"content"`    //配置内容
	CreateTime string `json:"createTime"` //创建时间
}

type ProductRemoteConfigCreateReq struct {
	ProductID string `json:"productID"` //产品id
	Content   string `json:"content"`   //配置内容
}

type ProductRemoteConfigIndexReq struct {
	ProductID string    `json:"productID"`     //产品id
	Page      *PageInfo `json:"page,optional"` //分页信息
}

type ProductRemoteConfigIndexResp struct {
	List  []*ProductRemoteConfig `json:"list"`  //产品信息
	Total int64                  `json:"total"` //拥有的总数
}

type ProductRemoteConfigPushAllReq struct {
	ProductID string `json:"productID"` //产品id
}

type ProductRemoteConfigLastestReadReq struct {
	ProductID string `json:"productID"` //产品id
}

type ProductRemoteConfigLastestReadResp struct {
	ProductRemoteConfig
}

type ProductCustom struct {
	ProductID       string   `json:"productID"`
	TransformScript *string  `json:"transformScript,optional"` //协议转换脚本
	ScriptLang      int64    `json:"scriptLang,optional"`      //脚本语言类型（默认JavaScript） 1:JavaScript 2:lua 3:python
	CustomTopic     []string `json:"customTopic,optional"`     //自定义topic数组
}

type ProductCustomReadReq struct {
	ProductID string `json:"productID"` //产品id 只读
}

type GroupInfo struct {
	GroupID     int64  `json:"groupID,string"`       //分组ID
	ParentID    int64  `json:"parentID,string"`      //父组ID
	ProjectID   int64  `json:"projectID,string"`     //项目ID
	GroupName   string `json:"groupName"`            //分组名称
	ProductID   string `json:"productID,optional"`   //产品ID
	ProductName string `json:"productName,optional"` //产品ID
	CreatedTime int64  `json:"createdTime,string"`   //创建时间
	Desc        string `json:"desc,optional"`        //分组描述
	Tags        []*Tag `json:"tags,optional"`        //分组tag
}

type GroupInfoCreateReq struct {
	GroupName string `json:"groupName"`          //分组名称
	ParentID  int64  `json:"parentID,string"`    //父组ID
	ProductID string `json:"productID,optional"` //产品ID
	Desc      string `json:"desc,optional"`      //分组描述
}

type GroupInfoIndexReq struct {
	Page      *PageInfo `json:"page,optional"`      //分页信息 只获取一个则不填
	ParentID  int64     `json:"parentID,string"`    //父组ID
	ProductID string    `json:"productID,optional"` //产品ID
	GroupName string    `json:"groupName,optional"` //分组名称
	Tags      []*Tag    `json:"tags,optional"`      //分组tag
}

type GroupInfoIndexResp struct {
	List    []*GroupInfo `json:"list"`    //分组信息
	Total   int64        `json:"total"`   //总数(只有分页的时候会返回)
	ListAll []*GroupInfo `json:"listAll"` //完整分分组信息
}

type GroupInfoReadReq struct {
	GroupID int64 `json:"groupID,string"` //分组ID
}

type GroupInfoDeleteReq struct {
	GroupID int64 `json:"groupID,string"` //分组ID
}

type GroupInfoUpdateReq struct {
	GroupID   int64   `json:"groupID,string"`     //分组ID
	GroupName *string `json:"groupName,optional"` //分组名称
	ProductID string  `json:"productID,optional"` //产品ID
	Desc      *string `json:"desc,optional"`      //分组描述
	Tags      []*Tag  `json:"tags,optional"`      //分组tag
}

type GroupDeviceIndexReq struct {
	Page           *PageInfo `json:"page,optional"`           //分页信息 只获取一个则不填
	GroupID        int64     `json:"groupID,string"`          //分组ID
	ProductID      string    `json:"productID,optional"`      //产品ID
	DeviceName     string    `json:"deviceName,optional"`     //设备名称
	WithProperties []string  `json:"withProperties,optional"` //如果不为nil,如果为空,获取设备所有最新属性 如果传了属性列表,则会返回属性列表
}

type GroupDeviceIndexResp struct {
	List  []*DeviceInfo `json:"list"`  //分组信息
	Total int64         `json:"total"` //总数(只有分页的时候会返回)
}

type GroupDeviceMultiCreateReq struct {
	GroupID int64         `json:"groupID,string"` //分组ID
	List    []*DeviceCore `json:"list,optional"`  //分组tag
}

type GroupDeviceMultiDeleteReq struct {
	GroupID int64         `json:"groupID,string"` //分组ID
	List    []*DeviceCore `json:"list,optional"`  //分组tag
}

type SceneInfoCreateReq struct {
	SceneInfo
}

type SceneInfoUpdateReq struct {
	SceneInfo
}

type SceneInfoIndexReq struct {
	Page        *PageInfo `json:"page,optional"`        //分页信息 只获取一个则不填
	Name        string    `json:"name,optional"`        //场景名模糊查询
	TriggerType string    `json:"triggerType,optional"` //触发类型 device: 设备触发 timer: 定时触发 manual:手动触发
	Status      int64     `json:"status,optional"`      //状态: 1启用 2禁用
	AlarmID     int64     `json:"alarmID,optional"`     //告警id
}

type SceneInfoIndexResp struct {
	List  []*SceneInfo `json:"list"`  //场景信息
	Total int64        `json:"total"` //总数(只有分页的时候会返回)
	Num   int64        `json:"num"`   //返回的数量
}

type SceneInfo struct {
	ID          int64  `json:"id,optional"`
	Name        string `json:"name,optional"`
	Status      int64  `json:"status,optional"` //状态: 1启用 2禁用
	Desc        string `json:"desc,optional"`
	CreatedTime int64  `json:"createdTime,optional"`
	TriggerType string `json:"triggerType,optional"` //触发类型 device: 设备触发 timer: 定时触发 manual:手动触发
	Trigger     string `json:"trigger,optional"`
	When        string `json:"when,optional"`
	Then        string `json:"then"`
}

type AlarmDealRecordCreateReq struct {
	AlarmRecordID int64  `json:"alarmRecordID"` //告警记录ID
	Result        string `json:"result"`        //告警处理结果
}

type AlarmDealRecordIndexReq struct {
	AlarmRecordID int64      `json:"alarmRecordID,optional"` //告警记录ID
	Page          *PageInfo  `json:"page,optional"`          //分页信息 只获取一个则不填
	TimeRange     *TimeRange `json:"timeRange,optional"`     //时间范围
}

type AlarmDealRecordIndexResp struct {
	List  []*AlarmDealRecord `json:"list"`  //告警信息
	Total int64              `json:"total"` //总数(只有分页的时候会返回)
	Num   int64              `json:"num"`   //返回的数量
}

type AlarmDealRecord struct {
	ID            int64  `json:"id,optional"`
	CreatedTime   int64  `json:"createdTime,optional"`
	AlarmRecordID int64  `json:"alarmRecordID"` //告警配置ID
	Result        string `json:"result"`        //告警处理结果
	Type          int64  `json:"type"`          //告警处理类型（1人工 2系统）
	AlarmTime     int64  `json:"alarmTime"`     //最早告警时间
}

type AlarmInfoCreateReq struct {
	AlarmInfo
}

type AlarmInfoUpdateReq struct {
	AlarmInfo
}

type AlarmInfoReadReq struct {
	ID int64 `json:"id"`
}

type AlarmInfoDeleteReq struct {
	ID int64 `json:"id"`
}

type AlarmInfoIndexReq struct {
	Page     *PageInfo `json:"page,optional"`     //分页信息 只获取一个则不填
	Name     string    `json:"name,optional"`     //告警名模糊查询
	SceneID  int64     `json:"sceneID,optional"`  //状态: 1启用 2禁用
	AlarmIDs []int64   `json:"alarmIDs,optional"` //告警id列表
}

type AlarmInfoIndexResp struct {
	List  []*AlarmInfo `json:"list"`  //告警信息
	Total int64        `json:"total"` //总数(只有分页的时候会返回)
	Num   int64        `json:"num"`   //返回的数量
}

type AlarmInfo struct {
	ID          int64  `json:"id,optional"`
	Name        string `json:"name,optional"`
	Status      int64  `json:"status,optional"` //状态: 1启用 2禁用
	Desc        string `json:"desc,optional"`
	CreatedTime int64  `json:"createdTime,optional"`
	Level       int64  `json:"level,optional"` //告警配置级别（1提醒 2一般 3严重 4紧急 5超紧急）
}

type AlarmRecordIndexReq struct {
	AlarmID   int64      `json:"alarmID,optional"`   //告警配置ID
	Page      *PageInfo  `json:"page,optional"`      //分页信息 只获取一个则不填
	TimeRange *TimeRange `json:"timeRange,optional"` //时间范围
}

type AlarmRecordIndexResp struct {
	List  []*AlarmRecord `json:"list"`  //告警信息
	Total int64          `json:"total"` //总数(只有分页的时候会返回)
	Num   int64          `json:"num"`   //返回的数量
}

type AlarmRecord struct {
	ID          int64  `json:"id"`          //编号
	AlarmID     int64  `json:"alarmID"`     //告警记录ID
	TriggerType int64  `json:"triggerType"` //触发类型(设备触发1,其他2)
	ProductID   string `json:"productID"`   //触发产品id
	DeviceName  string `json:"deviceName"`  //触发设备名称
	SceneName   string `json:"sceneName"`   //场景名称
	SceneID     int64  `json:"sceneID"`     //场景ID
	Level       int64  `json:"level"`       //告警配置级别（1提醒 2一般 3严重 4紧急 5超紧急）
	LastAlarm   int64  `json:"lastAlarm"`   //最新告警时间
	DealState   int64  `json:"dealState"`   //告警记录状态（1无告警 2告警中 3已处理）
	CreatedTime int64  `json:"createdTime"` //创建时间
}

type AlarmLogIndexReq struct {
	AlarmRecordID int64      `json:"alarmRecordID,optional"` //告警记录ID
	Page          *PageInfo  `json:"page,optional"`          //分页信息 只获取一个则不填
	TimeRange     *TimeRange `json:"timeRange,optional"`     //时间范围
}

type AlarmLogIndexResp struct {
	List  []*AlarmLog `json:"list"`  //告警信息
	Total int64       `json:"total"` //总数(只有分页的时候会返回)
	Num   int64       `json:"num"`   //返回的数量
}

type AlarmLog struct {
	ID            int64  `json:"id,optional"`
	Desc          string `json:"desc,optional"`
	CreatedTime   int64  `json:"createdTime,optional"`
	AlarmRecordID int64  `json:"alarmRecordID"` //告警记录ID
	Serial        string `json:"serial"`        //告警流水
	SceneName     string `json:"sceneName"`     //场景名称
	SceneID       int64  `json:"sceneID"`       //场景ID
}

type AlarmSceneMultiUpdateReq struct {
	AlarmID  int64   `json:"alarmID"`  //告警配置ID
	SceneIDs []int64 `json:"sceneIDs"` //场景id
}

type AlarmSceneDeleteReq struct {
	AlarmID int64 `json:"alarmID"` //告警配置ID
	SceneID int64 `json:"sceneID"` //场景id
}

type VidmgrInfo struct {
	CreatedTime  int64   `json:"createdTime,optional,string"`     //创建时间 只读
	VidmgrID     string  `json:"vidmgrID,optional"`               //服务id 只读
	VidmgrName   string  `json:"vidmgrName,optional"`             //服务名称
	VidmgrType   int64   `json:"vidmgrType,optional,range=[0:3]"` //服务类型:1:ZLMediakit,2:srs,3:monibuca
	VidmgrIpV4   string  `json:"vidmgrIpV4,optional"`             //服务IP
	VidmgrPort   int64   `json:"vidmgrPort,optional"`             //服务端口
	VidmgrSecret string  `json:"vidmgrSecret,optional"`           //动态注册产品秘钥 只读
	FirstLogin   int64   `json:"firstLogin,optional"`             //激活时间
	LastLogin    int64   `json:"lastLogin,optional"`              ////最后上线时间
	VidmgrStatus int64   `json:"vidsrvStatus,optional"`           //服务状态:0:未激活,1:在线,2:离线
	Desc         *string `json:"desc,optional"`                   //描述
	Tags         []*Tag  `json:"tags,optional"`                   //服务tag
}

type VidmgrInfoCreateReq struct {
	VidmgrName   string  `json:"vidmgrName"`                      //服务名称
	VidmgrID     string  `json:"vidmgrtID,optional"`              //服务id
	VidmgrType   int64   `json:"vidmgrType,optional,range=[0:3]"` //服务类型:1:ZLMediakit,2:srs,3:monibuca
	VidmgrIpV4   string  `json:"vidmgrIpV4,optional"`             //服务IP
	VidmgrPort   int64   `json:"vidmgrPort,optional"`             //服务端口
	VidmgrSecret string  `json:"vidmgrSecret,optional"`           //服务连接秘钥
	VidmgrStatus int64   `json:"vidmgrStatus,optional"`           //服务状态:1:离线,2:在线,3:未激活
	Desc         *string `json:"desc,optional"`                   //描述
	Tags         []*Tag  `json:"tags,optional"`                   //产品tag
}

type VidmgrInfoUpdateReq struct {
	VidmgrName   string  `json:"vidmgrName"`                      //服务名称
	VidmgrID     string  `json:"vidmgrtID,optional"`              //服务id
	VidmgrType   int64   `json:"vidmgrType,optional,range=[0:3]"` //服务类型:1:ZLMediakit,2:srs,3:monibuca
	VidmgrIpV4   string  `json:"vidmgrIpV4,optional"`             //服务IP
	VidmgrPort   int64   `json:"vidmgrPort,optional"`             //服务端口
	VidmgrSecret string  `json:"vidsrvSecret,optional"`           //服务连接秘钥
	VidmgrStatus int64   `json:"vidsrvStatus,optional"`           //服务状态:1:离线,2:在线,3:未激活
	Desc         *string `json:"desc,optional"`                   //描述
	Tags         []*Tag  `json:"tags,optional"`                   //产品tag
}

type VidmgrInfoDeleteReq struct {
	VidmgrID string `json:"vidmgrID"` //服务id 只读
}

type VidmgrInfoIndexReq struct {
	Page       *PageInfo `json:"page,optional"`                   //分页信息,只获取一个则不填
	VidmgrName string    `json:"vidmgrName,optional"`             //过滤服务名称
	VidmgrType int64     `json:"deviceType,optional,range=[0:3]"` //服务类型:1:ZLMediakit,2:srs,3:monibuca
	VidmgrIDs  []string  `json:"vidmgrIDs,optional"`              //过滤服务id列表
	Tags       []*Tag    `json:"tags,optional"`                   // key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
}

type VidmgrInfoReadReq struct {
	VidmgrID string `json:"vidmgrID"` //服务id
}

type VidmgrCountReq struct {
	StartTime int64 `json:"startTime,optional" form:"startTime,optional"` //查询区间的开始时间（秒）
	EndTime   int64 `json:"endTime,optional" form:"endTime,optional"`     //查询区间的结束时间（秒）
}

type VidmgrInfoCount struct {
	Online   int64 `json:"online"`   // 在线服务数
	Offline  int64 `json:"offline"`  // 离线服务数
	Inactive int64 `json:"inactive"` // 未激活服务数    （all = 在线+离线+未激活）
}

type VidmgrCountResp struct {
	MgrInfoCount VidmgrInfoCount `json:"vidmgrCount"`
}

type VidmgrInfoIndexResp struct {
	List  []*VidmgrInfo `json:"list"`           //服务信息
	Total int64         `json:"total,optional"` //拥有的总数
	Num   int64         `json:"num,optional"`   //返回的数量
}

type HooksApiResp struct {
	Code int64  `json:"code"` //状态码回复:0
	Msg  string `json:"msg"`  //msg:success
}

type HooksApiFlowReportReq struct {
	MediaServerId string `json:"mediaServerId"`
	App           string `json:"app"`
	Duration      int64  `json:"duration"`
	Params        string `json:"params"`
	Player        bool   `json:"player"`
	Schema        string `json:"schema"`
	Stream        string `json:"stream"`
	TotalBytes    int64  `json:"totalBytes"`
	Vhost         string `json:"vhost"`
	Ip            string `json:"ip"`
	Port          int64  `json:"port"`
	Id            string `json:"id"`
}

type HooksApiHttpAccessReq struct {
	MediaServerId                 string `json:"mediaServerId"`
	HeaderAccept                  string `json:"header.Accept"`
	HeaderAcceptEncod             string `json:"header.Accept-Encoding"`
	HeaderAcceptLanguage          string `json:"header.Accept-Language"`
	HeaderCacheControl            string `json:"header.Cache-Control"`
	HeaderConnection              string `json:"header.Connection"`
	HeaderHost                    string `json:"header.Host"`
	HeaderUpgradeInsecureRequests string `json:"header.Upgrade-Insecure-Requests"`
	HeaderUserAgent               string `json:"header.User-Agent"`
	ID                            string `json:"id"`
	IP                            string `json:"ip"`
	IsDir                         bool   `json:"is_dir"`
	Params                        string `json:"params"`
	Path                          string `json:"path"`
	Port                          int64  `json:"port"`
}

type HooksApiHttpAccessResp struct {
	Code   int64  `json:"code"`
	Err    string `json:"err"`
	Path   string `json:"path"`
	Second int64  `json:"second"`
}

type HooksApiPlayReq struct {
	MediaServerId string `json:"mediaServerId"`
	App           string `json:"app"`
	Id            string `json:"id"`
	Ip            string `json:"ip"`
	Params        string `json:"params"`
	Port          int64  `json:"port"`
	Schema        string `json:"schema"`
	Stream        string `json:"stream"`
	Vhost         string `json:"vhost"`
}

type HooksApiPublishReq struct {
	HooksApiPlayReq
}

type HooksApiPublishResp struct {
	Code           int64  `json:"code"`
	AddMuteAudio   bool   `json:"add_mute_audio"`
	ContinuePushMs int64  `json:"continue_push_ms"`
	EnableAudio    bool   `json:"enable_audio"`
	EnableFmp4     bool   `json:"enable_fmp4"`
	EnableHls      bool   `json:"enable_hls"`
	EnableHlsFmp4  bool   `json:"enable_hls_fmp4"`
	EnableMp4      bool   `json:"enable_mp4"`
	EnableRtmp     bool   `json:"enable_rtmp"`
	EnableRtsp     bool   `json:"enable_rtsp"`
	EnableTs       bool   `json:"enable_ts"`
	HlsSavePath    string `json:"hls_save_path"`
	ModifyStamp    bool   `json:"modify_stamp"`
	Mp4AsPlayer    bool   `json:"mp4_as_player"`
	Mp4MaxSecond   int64  `json:"mp4_max_second"`
	Mp4SavePath    string `json:"mp4_save_path"`
	AutoClose      bool   `json:"auto_close"`
	StreamReplace  string `json:"stream_replace"`
}

type HooksApiRecordMp4Req struct {
	MediaServerId string  `json:"mediaServerId"`
	App           string  `json:"app"`
	FileName      string  `json:"file_name"`
	FilePath      string  `json:"file_path"`
	FileSize      int64   `json:"file_size"`
	Folder        string  `json:"folder"`
	StartTime     int64   `json:"start_time"`
	Stream        string  `json:"stream"`
	TimeLen       float32 `json:"time_len"`
	Url           string  `json:"url"`
	Vhost         string  `json:"vhost"`
}

type HooksApiRtspAuthReq struct {
	MustNoEncrypt bool `json:"must_no_encrypt"`
	HooksApiPlayReq
	Realm    string `json:"realm"`
	UserName string `json:"user_name"`
}

type HooksApiRtspAuthResp struct {
	Code      int64  `json:"code"`
	Encrypted bool   `json:"encrypted"`
	Passwd    string `json:"passwd"`
}

type HooksApiRtspRealmReq struct {
	HooksApiPlayReq
}

type HooksApiRtspRealmResp struct {
	Code  int64  `json:"code"`
	Realm string `json:"realm"`
}

type HooksApiShellLoginReq struct {
	MediaServerId string `json:"mediaServerId"`
	Id            string `json:"id"`
	Ip            string `json:"ip"`
	Passwd        string `json:"passwd"`
	Port          int64  `json:"port"`
	User_name     string `json:"user_name"`
}

type HooksApiStreamChangedReq struct {
	MediaServerId string `json:"mediaServerId"`
	App           string `json:"app"`
	Regist        bool   `json:"regist"`
	Schema        string `json:"schema"`
	Stream        string `json:"stream"`
	Vhost         string `json:"vhost"`
}

type OriginSock struct {
	Identifier string `json:"identifier"`
	LocalIp    string `json:"local_ip"`
	LocalPort  int64  `json:"local_port""`
	PeerIp     string `json:"peer_ip"`
	PeerPort   int64  `json:"peer_port"`
}

type StreamTrack struct {
	Channels    int64  `json:"channels"`
	CodecId     int64  `json:"codec_id"`
	CodecIdName string `json:"codec_id_name"`
	CodecType   bool   `json:"codec_type"`
	Ready       bool   `json:"ready"`
	Sample_bit  int64  `json:"sample_bit"`
	Sample_rate int64  `json:"sample_rate"`
	Fps         bool   `json:"fps"`
	Height      int64  `json:"height"`
	Width       int64  `json:"width"`
}

type HooksApiStreamChangedResp struct {
	Regist           bool          `json:"regist"`
	AliveSecond      int64         `json:"aliveSecond"`
	App              string        `json:"app"`
	BytesSpeed       int64         `json:"bytesSpeed"`
	CreateStamp      int64         `json:"CreateStamp"`
	MediaServerId    string        `json:"mediaServerId"`
	OriginSock       OriginSock    `json:"originSock"`
	OriginType       int64         `json:"originType"`
	OriginTypeStr    string        `json:"originTypeStr"`
	OriginUrl        string        `json:"originUrl"`
	ReaderCount      int64         `json:"readerCount"`
	Schema           string        `json:"schema"`
	Stream           string        `json:"stream"`
	TotalReaderCount int64         `json:"totalReaderCount"`
	Tracks           []StreamTrack `json:"tracks"`
	Vhost            string        `json:"vhost"`
}

type HooksApiStreamNoneReaderReq struct {
	MediaServerId string `json:"mediaServerId"`
	App           string `json:"app"`
	Schema        string `json:"schema"`
	Stream        string `json:"stream"`
	Vhost         string `json:"vhost"`
}

type HooksApiStreamNoneReaderResp struct {
	Close bool `json:"close"`
	Code  bool `json:"code"`
}

type HooksApiStreamNotFoundReq struct {
	HooksApiPlayReq
}

type ServerConfig struct {
	ApiDebug                   string `json:"api.apiDebug"`
	ApiSecret                  string `json:"api.secret"`
	FfmpegBin                  string `json:"ffmpeg.bin"`
	FfmpegCmd                  string `json:"ffmpeg.cmd"`
	FfmpegLog                  string `json:"ffmpeg.log"`
	GenMediaServerId           string `json:"general.mediaServerId"`
	GenMuteAudio               string `json:"general.addMuteAudio"`
	GenEnableVhost             string `json:"general.enableVhost"`
	GenFlowThreadold           string `json:"general.flowThreshold"`
	GenMaxStreamWaitMs         string `json:"general.maxStreamWaitMS"`
	GenPublishToHls            string `json:"general.publishToHls"`
	GenPublishToMP4            string `json:"general.publishToMP4"`
	GenPublishToRtxp           string `json:"general.publishToRtxp"`
	GenResetWhenRePlay         string `json:"general.resetWhenRePlay"`
	GenStreamNoneReaderDelayMs string `json:"general.streamNoneReaderDelayMS"`
	GenUltraLowDelay           string `json:"general.ultraLowDelay"`
	HlsFileBufSize             string `json:"hls.fileBufSize"`
	HlsFilePath                string `json:"hls.filePath"`
	HlsSegDur                  string `json:"hls.segDur"`
	HlsSegNum                  string `json:"hls.segNum"`
	HlsSegRetain               string `json:"hls.segRetain"`
	HookAcceFileExceptHls      string `json:"hook.access_file_except_hls"`
	HookAdminParams            string `json:"hook.admin_params"`
	HookEanble                 string `json:"hook.enable"`
	HookOnFlowReport           string `json:"hook.on_flow_report"`
	HookOnHttpAccess           string `json:"hook.on_http_access"`
	HookOnPlay                 string `json:"hook.on_play"`
	HookOnPublish              string `json:"hook.on_publish"`
	HookOnRecordMp4            string `json:"hook.on_record_mp4"`
	HookOnRtspAuth             string `json:"hook.on_rtsp_auth"`
	HookOnRtspRealm            string `json:"hook.on_rtsp_realm"`
	HookOnShellLogin           string `json:"hook.on_shell_login"`
	HookOnStreamChanged        string `json:"hook.on_stream_changed"`
	HookOnStreamNoneReader     string `json:"hook.on_stream_none_reader"`
	HookOnStreamNotFound       string `json:"hook.on_stream_not_found"`
	HookTimeoutSec             string `json:"hook.timeoutSec"`
	HttpCharSet                string `json:"http.charSet"`
	HttpKeepAliveSecond        string `json:"http.keepAliveSecond"`
	HttpMaxReqCount            string `json:"http.maxReqCount"`
	HttpMaxReqSize             string `json:"http.maxReqSize"`
	HttpNotFound               string `json:"http.notFound"`
	HttpPort                   string `json:"http.port"`
	HttpRootPath               string `json:"http.rootPath"`
	HttpSendBufSize            string `json:"http.sendBufSize"`
	HttpSslport                string `json:"http.sslport"`
	MulticastAddrMax           string `json:"multicast.addrMax"`
	MulticastAddrMin           string `json:"multicast.addrMin"`
	MulticastUdpTTL            string `json:"multicast.udpTTL"`
	RecordAppName              string `json:"record.appName"`
	RecordFastStart            string `json:"record.fastStart"`
	RecordFileBufSize          string `json:"record.fileBufSize"`
	RecordFilePath             string `json:"record.filePath"`
	RecordFileSecond           string `json:"record.fileSecond"`
	RecordFileRepeat           string `json:"record.fileRepeat"`
	RecordSampleMs             string `json:"record.sampleMS"`
	RtmpHandshakeSecond        string `json:"rtmp.handshakeSecond"`
	RtmpKeepAliveSedond        string `json:"rtmp.keepAliveSecond"`
	RtmpModifyStamp            string `json:"rtmp.modifyStamp"`
	RtmpPort                   string `json:"rtmp.port"`
	RtpAutoMtuSize             string `json:"rtp.audioMtuSize"`
	RtpClearCount              string `json:"rtp.clearCount"`
	RtpCycleMs                 string `json:"rtp.cycleMS"`
	RtpMaxRtpCount             string `json:"rtp.maxRtpCount"`
	RtpVideoMtuSize            string `json:"rtp.videoMtuSize"`
	RtspAuthBasic              string `json:"rtsp.authBasic"`
	RtspDirectProxy            string `json:"rtsp.directProxy"`
	RtspHandshakeSecond        string `json:"rtsp.handshakeSecond"`
	RtspKeepAliveSecond        string `json:"rtsp.keepAliveSecond"`
	RtspModifyStamp            string `json:"rtsp.modifyStamp"`
	RtspPort                   string `json:"rtsp.port"`
	RtspSslpPort               string `json:"rtsp.sslport"`
	ShellMaxReqSize            string `json:"shell.maxReqSize"`
	ShellPort                  string `json:"shell.port"`
}

type HooksApiServerStartedReq struct {
	ServerConfig
}

type Statistic struct {
	Buffer                int `json:"Buffer"`
	BufferLikeString      int `json:"BufferLikeString"`
	BufferList            int `json:"BufferList"`
	BufferRaw             int `json:"BufferRaw"`
	Frame                 int `json:"Frame"`
	FrameImp              int `json:"FrameImp"`
	MediaSource           int `json:"MediaSource"`
	MultiMediaSourceMuxer int `json:"MultiMediaSourceMuxer"`
	RtmpPacket            int `json:"RtmpPacket"`
	RtpPacket             int `json:"RtpPacket"`
	Socket                int `json:"Socket"`
	TcpClient             int `json:"TcpClient"`
	TcpServer             int `json:"TcpServer"`
	TcpSession            int `json:"TcpSession"`
	UdpServer             int `json:"UdpServer"`
	UdpSession            int `json:"UdpSession"`
}

type HooksApiServerKeepaliveReq struct {
	Data          Statistic `json:"data"`
	MediaServerId string    `json:"mediaServerId"`
}

type HooksApiRtpServerTimeoutReq struct {
	LocalPort     int    `json:"local_port"`
	ReUsePort     bool   `json:"re_use_port"`
	Ssrc          int    `json:"ssrc"`
	StreamId      string `json:"stream_id"`
	TcpMode       int    `json:"tcp_mode"`
	MediaServerId string `json:"mediaServerId"`
}

type IndexApiReq struct {
	VidmgrID string `json:"vidmgrID"`
	Data     string `json:"data"`
}

type IndexApiListResp struct {
	Code int64    `json:"code"`
	Data []string `json:"data"`
}

type IndexApiThreadLoad struct {
	Delay int64 `json:"delay"`
	Load  int64 `json:"load"`
}

type IndexApiThreadLoadResp struct {
	Code int64                `json:"code"`
	Data []IndexApiThreadLoad `json:"data"`
}

type IndexApiWorkThreadLoadResp struct {
	Code int64                `json:"code"`
	Data []IndexApiThreadLoad `json:"data"`
}

type IndexApiServerConfig struct {
	ApiDebug                   string `json:"api.apiDebug"`
	ApiSecret                  string `json:"api.secret"`
	FfmpegBin                  string `json:"ffmpeg.bin"`
	FfmpegCmd                  string `json:"ffmpeg.cmd"`
	FfmpegLog                  string `json:"ffmpeg.log"`
	GenEnableVhost             string `json:"general.enableVhost"`
	GenFlowThreadold           string `json:"general.flowThreshold"`
	GenMaxStreamWaitMs         string `json:"general.maxStreamWaitMS"`
	GenStreamNoneReaderDelayMs string `json:"general.streamNoneReaderDelayMS"`
	HlsFileBufSize             string `json:"hls.fileBufSize"`
	HlsFilePath                string `json:"hls.filePath"`
	HlsSegDur                  string `json:"hls.segDur"`
	HlsSegNum                  string `json:"hls.segNum"`
	HookAcceFileExceptHls      string `json:"hook.access_file_except_hls"`
	HookAdminParams            string `json:"hook.admin_params"`
	HookEanble                 string `json:"hook.enable"`
	HookOnFlowReport           string `json:"hook.on_flow_report"`
	HookOnHttpAccess           string `json:"hook.on_http_access"`
	HookOnPlay                 string `json:"hook.on_play"`
	HookOnPublish              string `json:"hook.on_publish"`
	HookOnRecordMp4            string `json:"hook.on_record_mp4"`
	HookOnRtspAuth             string `json:"hook.on_rtsp_auth"`
	HookOnRtspRealm            string `json:"hook.on_rtsp_realm"`
	HookOnShellLogin           string `json:"hook.on_shell_login"`
	HookOnStreamChanged        string `json:"hook.on_stream_changed"`
	HookOnStreamNoneReader     string `json:"hook.on_stream_none_reader"`
	HookOnStreamNotFound       string `json:"hook.on_stream_not_found"`
	HookTimeoutSec             string `json:"hook.timeoutSec"`
	HttpCharSet                string `json:"http.charSet"`
	HttpKeepAliveSecond        string `json:"http.keepAliveSecond"`
	HttpMaxReqCount            string `json:"http.maxReqCount"`
	HttpMaxReqSize             string `json:"http.maxReqSize"`
	HttpNotFound               string `json:"http.notFound"`
	HttpPort                   string `json:"http.port"`
	HttpRootPath               string `json:"http.rootPath"`
	HttpSendBufSize            string `json:"http.sendBufSize"`
	HttpSslport                string `json:"http.sslport"`
	MulticastAddrMax           string `json:"multicast.addrMax"`
	MulticastAddrMin           string `json:"multicast.addrMin"`
	MulticastUdpTTL            string `json:"multicast.udpTTL"`
	RecordAppName              string `json:"record.appName"`
	RecordFilePath             string `json:"record.filePath"`
	RecordFileSecond           string `json:"record.fileSecond"`
	RecordSampleMs             string `json:"record.sampleMS"`
	RtmpHandshakeSecond        string `json:"rtmp.handshakeSecond"`
	RtmpKeepAliveSedond        string `json:"rtmp.keepAliveSecond"`
	RtmpModifyStamp            string `json:"rtmp.modifyStamp"`
	RtmpPort                   string `json:"rtmp.port"`
	RtpAutoMtuSize             string `json:"rtp.audioMtuSize"`
	RtpClearCount              string `json:"rtp.clearCount"`
	RtpCycleMs                 string `json:"rtp.cycleMS"`
	RtpMaxRtpCount             string `json:"rtp.maxRtpCount"`
	RtpVideoMtuSize            string `json:"rtp.videoMtuSize"`
	RtspAuthBasic              string `json:"rtsp.authBasic"`
	RtspHandshakeSecond        string `json:"rtsp.handshakeSecond"`
	RtspKeepAliveSecond        string `json:"rtsp.keepAliveSecond"`
	RtspPort                   string `json:"rtsp.port"`
	RtspSslpPort               string `json:"rtsp.sslport"`
	ShellMaxReqSize            string `json:"shell.maxReqSize"`
	ShellPort                  string `json:"shell.port"`
}

type IndexApiServerConfigResp struct {
	Code int64                  `json:"code"`
	Data []IndexApiServerConfig `json:"data"`
}

type IndexApiSetServerConfigResp struct {
	Changed int64 `json:"changed"`
	Code    int64 `json:"code"`
}

type IndexApiRestartServerResp struct {
	Code int64 `json:"code"`
	Msg  int64 `json:"msg"`
}

type IndexApiOriginSock struct {
	Identifier string `json:"identifier"`
	LocalIp    string `json:"local_ip"`
	LocalPort  int64  `json:"local_port""`
	PeerIp     string `json:"peer_ip"`
	PeerPort   int64  `json:"peer_port"`
}

type IndexApiStreamTrack struct {
	Channels    int64  `json:"channels"`
	CodecId     int64  `json:"codec_id"`
	CodecIdName string `json:"codec_id_name"`
	CodecType   bool   `json:"codec_type"`
	Ready       bool   `json:"ready"`
	Sample_bit  int64  `json:"sample_bit"`
	Sample_rate int64  `json:"sample_rate"`
	Fps         bool   `json:"fps"`
	Height      int64  `json:"height"`
	Width       int64  `json:"width"`
}

type IndexApiMediaList struct {
	App              string                `json:"app"`
	ReaderCount      int64                 `json:"readerCount"`
	TotalReaderCount int64                 `json:"totalReaderCount"`
	Schema           string                `json:"schema"`
	Stream           string                `json:"stream"`
	OriginSock       IndexApiOriginSock    `json:"originSock"`
	OriginType       int64                 `json:"originType"`
	OriginTypeStr    string                `json:"originTypeStr"`
	OriginUrl        string                `json:"originUrl"`
	CreateStamp      string                `json:"createStamp"`
	AliveSecond      string                `json:"aliveSecond"`
	BytesSpeed       int64                 `json:"bytesSpeed"`
	Tracks           []IndexApiStreamTrack `json:"tracks"`
	Vhost            string                `json:"vhost"`
}

type IndexApiMediaListResp struct {
	Code int64               `json:"code"`
	Data []IndexApiMediaList `json:"data"`
}

type IndexApiCloseStreamResp struct {
	Code   int64  `json:"code"`
	Result int64  `json:"result"`
	Msg    string `json:"msg"`
}

type IndexApiCloseStreamsResp struct {
	Code        int64 `json:"code"`
	CountHit    int64 `json:"count_hit"`
	CountClosed int64 `json:"count_closed"`
}

type IndexApiAllSession struct {
	Id        string `json:"id"`
	LocalIp   string `json:"local_ip"`
	LocalPort int64  `json:"local_port""`
	PeerIp    string `json:"peer_ip"`
	PeerPort  int64  `json:"peer_port"`
	Typeid    string `json:"typeid"`
}

type IndexApiAllSessionResp struct {
	Code int64                `json:"code"`
	Data []IndexApiAllSession `json:"data"`
}

type IndexApiKickSessionResp struct {
	Code int64  `json:"code"`
	Msg  string `json:"msg"`
}

type IndexApiKickSessionsResp struct {
	Code     int64  `json:"code"`
	CountHit int64  `json:"count_hit"`
	Msg      string `json:"msg"`
}

type IndexApiAddStreamKey struct {
	Key string `json:"key"`
}

type IndexApiAddStreamProxyResp struct {
	Code int64                `json:"code"`
	Data IndexApiAddStreamKey `json:"data"`
}

type IndexApiAddStreamFlag struct {
	Flag bool `json:"flag"`
}

type IndexApiDelStreamProxyResp struct {
	Code int64                 `json:"code"`
	Data IndexApiAddStreamFlag `json:"data"`
}

type IndexApiAddFFmpegSourceResp struct {
	Code int64                `json:"code"`
	Data IndexApiAddStreamKey `json:"data"`
}

type IndexApiDelFFmpegSourceResp struct {
	Code int64                 `json:"code"`
	Data IndexApiAddStreamFlag `json:"data"`
}

type IndexApiIsMediaOnlineResp struct {
	Code   int64 `json:"code"`
	Online bool  `json:"online"`
}

type IndexApiMediaInfoResp struct {
	Code             int64                 `json:"code"`
	Online           bool                  `json:"online"`
	ReaderCount      int64                 `json:"readerCount"`
	TotalReaderCount int64                 `json:"totalReaderCount"`
	Tracks           []IndexApiStreamTrack `json:"tracks"`
}

type IndexApiRtpInfoResp struct {
	Code      int64  `json:"code"`
	Exist     bool   `json:"exist"`
	PeerIp    string `json:"peer_ip"`
	PeerPort  int64  `json:"peer_port"`
	LocalIp   string `json:"local_ip"`
	LocalPort int64  `json:"local_port"`
}

type IndexApiRecord struct {
	Paths    []string `json:"paths"`
	RootPath string   `json:"rootPath"`
}

type IndexApiMp4RecordFileResp struct {
	Code int64          `json:"code"`
	Data IndexApiRecord `json:"data"`
}

type IndexApiStartRecordResp struct {
	Code   int64 `json:"code"`
	Result bool  `json:"result"`
}

type IndexApiStopRecordResp struct {
	Code   int64 `json:"code"`
	Result bool  `json:"result"`
}

type IndexApiIsRecordingResp struct {
	Code   int64 `json:"code"`
	Status bool  `json:"status"`
}

type IndexApiSnapResp struct {
	Data []byte `json:"Data"`
}

type IndexApiOpenRtpServerResp struct {
	Code int64 `json:"code"`
	Port int64 `json:"port"`
}

type IndexApiCloseRtpServerResp struct {
	Code int64 `json:"code"`
	Hit  int64 `json:"hit"`
}

type IndexApiRtp struct {
	Port     int64  `json:"port"`
	StreamId string `json:"stream_id"`
}

type IndexApiListRtpServerResp struct {
	Code int64         `json:"code"`
	Data []IndexApiRtp `json:"data"`
}

type IndexApiStartSendRtpResp struct {
	Code      int64 `json:"code"`
	LocalProt int64 `json:"local_port"`
}

type IndexApiStartSendRtpPassiveResp struct {
	Code      int64 `json:"code"`
	LocalProt int64 `json:"local_port"`
}

type IndexApiStopSendRtpResp struct {
	Code int64 `json:"code"`
}

type IndexApiStatistic struct {
	Buffer                int `json:"Buffer"`
	BufferLikeString      int `json:"BufferLikeString"`
	BufferList            int `json:"BufferList"`
	BufferRaw             int `json:"BufferRaw"`
	Frame                 int `json:"Frame"`
	FrameImp              int `json:"FrameImp"`
	MediaSource           int `json:"MediaSource"`
	MultiMediaSourceMuxer int `json:"MultiMediaSourceMuxer"`
	RtmpPacket            int `json:"RtmpPacket"`
	RtpPacket             int `json:"RtpPacket"`
	Socket                int `json:"Socket"`
	TcpClient             int `json:"TcpClient"`
	TcpServer             int `json:"TcpServer"`
	TcpSession            int `json:"TcpSession"`
	UdpServer             int `json:"UdpServer"`
	UdpSession            int `json:"UdpSession"`
}

type IndexApiStatisticResp struct {
	Code int64             `json:"code"`
	Data IndexApiStatistic `json:"data"`
}

type IndexApiAddStreamPusherProxyResp struct {
	Code int64                `json:"code"`
	Data IndexApiAddStreamKey `json:"data"`
}

type IndexDelStreamPusherProxyResp struct {
	Code int64                 `json:"code"`
	Data IndexApiAddStreamFlag `json:"data"`
}

type IndexApiVersion struct {
	BranchName string `json:"branchName"`
	BuildTime  string `json:"buildTime"`
	CommitHash string `json:"commitHash"`
}

type IndexApiVersionResp struct {
	Code int64           `json:"code"`
	Data IndexApiVersion `json:"data"`
}

type IndexApiMediaPlayer struct {
	IndexApiOriginSock
	Typeid string `json:"typeid"`
}

type IndexApiMediaPlayerListResp struct {
	Code int64               `json:"code"`
	Data IndexApiMediaPlayer `json:"data"`
}

type IndexApiResp struct {
	Data string `json:"data"`
}
