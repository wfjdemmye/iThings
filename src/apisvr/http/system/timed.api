syntax = "v1"

info(
    title: "定时器相关功能"
    desc: "type desc here"
    author: "yl"
    email: "type email here"
    version: "type version here"
)
import "common.api"  //公共结构体定义

@server(
    group: system/timed/task
    prefix: /api/v1/system/timed/task
    middleware: SetupWare, CheckTokenWare, DataAuthWare, TeardownWare
)
service api {
    @doc "发送延时请求,如果任务不存在,则会自动创建,但是自动创建的需要填写param"
    @handler send
    post /send (TimedTaskSendReq) returns ()

    @handler infoCreate
    post /info/create (TimedTaskInfo) returns ()
    @handler infoUpdate
    post /info/update (TimedTaskInfo) returns ()
    @handler infoDelete
    post /info/delete (CodeReq) returns ()
    @handler infoIndex
    post /info/index (TimedTaskInfoIndexReq) returns (TimedTaskInfoIndexResp)
    @handler infoRead
    post /info/read (CodeReq) returns (TimedTaskInfo)

    @handler groupCreate
    post /group/create (TimedTaskGroup) returns ()
    @handler groupUpdate
    post /group/update (TimedTaskGroup) returns ()
    @handler groupDelete
    post /group/delete (CodeReq) returns ()
    @handler groupIndex
    post /group/index (TimedTaskGroupIndexReq) returns (TimedTaskGroupIndexResp)
    @handler groupRead
    post /group/read (CodeReq) returns (TimedTaskGroup)
}

type (
    TimedTaskGroup{
        Code     string            `json:"code"`                                                                                       //任务组编码
        Name     string            `json:"name,optional"`                                                                                       // 组名
        Type     string            `json:"type,optional"`                                                                                       //组类型:queue(消息队列消息发送)  sql(执行sql) email(邮件发送) http(http请求)
        SubType  string            `json:"subType,optional"`                                                                                 //组子类型 natsJs nats         normal js
        Priority int64             `json:"priority,optional"`                                                                              //组优先级: 6:critical 最高优先级  3: default 普通优先级 1:low 低优先级
        Env      map[string]string `json:"env,optional"` //环境变量
    /* 组的配置, sql类型配置格式如下,key若为select,则select默认会选择该配置,exec:exec执行sql默认会选择这个,执行sql的函数也可以指定连接
     database: map[string]TaskGroupDBConfig*/
        Config string `json:"config,optional"`
    }
    TimedTaskGroupIndexReq{
        Page *PageInfo `json:"page,optional"` //分页信息,只获取一个则不填
    }
    TimedTaskGroupIndexResp{
        List []*TimedTaskGroup `json:"list"`
        Total int64 `json:"total"`
    }
    TimedTaskInfo {
        GroupCode string `json:"groupCode"` //组编码
        Type      int64  `json:"type,optional"`          //任务类型 1 定时任务 2 延时任务
        Name      string `json:"name,optional"`           // 任务名称
        Code      string `json:"code"`           //任务编码
        Params    string `json:"params,optional"`       // 任务参数,延时任务如果没有传任务参数会拿数据库的参数来执行
        CronExpr  string `json:"cronExpr,optional"`   // cron执行表达式
        Status    int64  `json:"status,optional"`      // 状态
        Priority  int64  `json:"priority,optional"`  //优先级: 10:critical 最高优先级  3: default 普通优先级 1:low 低优先级
    }
    TimedTaskInfoIndexReq{
        Page *PageInfo `json:"page,optional"` //分页信息,只获取一个则不填
    }
    TimedTaskInfoIndexResp{
        List []*TimedTaskInfo `json:"list"`
        Total int64 `json:"total"`
    }
)

type (
    TimedTaskOption struct {
        Priority int64 `json:"priority,optional"`   //优先级: 6:critical 最高优先级  3: default 普通优先级 1:low 低优先级//以下两个参数优先使用ProcessIn
        ProcessIn int64 `json:"processIn,optional"` //多久之后发 秒数
        ProcessAt int64 `json:"processAt,optional"` // 固定时间发 秒时间戳
        Timeout int64 `json:"timeout,optional"`     //超时时间 优先使用 秒数
        Deadline int64 `json:"deadline,optional"`   //截止时间  秒时间戳
    }
    TimedTaskParamQueue struct {
        Topic string `json:"topic"`
        Payload string `json:"payload"`
    }
    TimedTaskParamSql struct {
        Param map[string ]string `json:"param"`
        ExecContent string `json:"execContent"`        //如果是normal,填写执行的sql,如果是脚本,填写脚本内容,如果不填,则会使用数据库中第一次初始化的参数
    }
    TimedTaskSendReq struct {
        GroupCode string `json:"groupCode"`                 //组需要提前创建好
        Code string `json:"code"`                      //任务code
        Option *TimedTaskOption `json:"option,optional"`       //选项
        ParamQueue *TimedTaskParamQueue `json:"paramQueue,optional"`//消息队列发送类型配置,如果不传则使用数据库定义的
        ParamSql *TimedTaskParamSql `json:"paramSql,optional"`      //数据库执行类型配置,如果不传则使用数据库定义的
    }
)