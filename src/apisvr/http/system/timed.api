syntax = "v1"

info(
    title: "定时器相关功能"
    desc: "type desc here"
    author: "yl"
    email: "type email here"
    version: "type version here"
)
import "common.api"  //公共结构体定义

@server(
    group: system/timed/task
    prefix: /api/v1/system/timed/task
    middleware: SetupWare, CheckTokenWare, DataAuthWare, TeardownWare
)
service api {
    @doc "发送延时请求,如果任务不存在,则会自动创建,但是自动创建的需要填写param"
    @handler sendDelay
    post /send-delay (TimedTaskSendDelayReq) returns ()
}
type (
    TimedTaskDelayOption struct {
        Priority int64 `json:"priority,optional"`   //优先级: 6:critical 最高优先级  3: default 普通优先级 1:low 低优先级//以下两个参数优先使用ProcessIn
        ProcessIn int64 `json:"processIn,optional"` //多久之后发 秒数
        ProcessAt int64 `json:"processAt,optional"` // 固定时间发 秒时间戳
        Timeout int64 `json:"timeout,optional"`     //超时时间 优先使用 秒数
        Deadline int64 `json:"deadline,optional"`   //截止时间  秒时间戳
    }
    TimedTaskDelayQueue struct {
        Topic string `json:"topic"`
        Payload string `json:"payload"`
    }
    TimedTaskDelaySql struct {
        Param map[string ]string `json:"param"`
        ExecContent string `json:"execContent"`        //如果是normal,填写执行的sql,如果是脚本,填写脚本内容,如果不填,则会使用数据库中第一次初始化的参数
    }
    TimedTaskSendDelayReq struct {
        GroupCode string `json:"groupCode"`                 //组需要提前创建好
        Code string `json:"code"`                      //任务code
        Option *TimedTaskDelayOption `json:"option,optional"`       //选项
        ParamQueue *TimedTaskDelayQueue `json:"paramQueue,optional"`//消息队列发送类型配置,如果不传则使用数据库定义的
        ParamSql *TimedTaskDelaySql `json:"paramSql,optional"`      //数据库执行类型配置,如果不传则使用数据库定义的
    }
)