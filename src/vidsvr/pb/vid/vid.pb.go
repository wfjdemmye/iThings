// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: proto/vid.proto

package vid

import (
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{0}
}

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	//排序信息
	Orders []*PageInfo_OrderBy `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{1}
}

func (x *PageInfo) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PageInfo) GetOrders() []*PageInfo_OrderBy {
	if x != nil {
		return x.Orders
	}
	return nil
}

type VidmgrInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime  int64                 `protobuf:"varint,1,opt,name=createdTime,proto3" json:"createdTime,omitempty"`                                                                           //创建时间 只读
	VidmgrID     string                `protobuf:"bytes,2,opt,name=vidmgrID,proto3" json:"vidmgrID,omitempty"`                                                                                  //服务id 只读
	VidmgrName   string                `protobuf:"bytes,3,opt,name=vidmgrName,proto3" json:"vidmgrName,omitempty"`                                                                              //服务名称
	VidmgrIpV4   string                `protobuf:"bytes,4,opt,name=vidmgrIpV4,proto3" json:"vidmgrIpV4,omitempty"`                                                                              //服务IP
	VidmgrPort   int64                 `protobuf:"varint,5,opt,name=vidmgrPort,proto3" json:"vidmgrPort,omitempty"`                                                                             //服务端口
	VidmgrType   int64                 `protobuf:"varint,6,opt,name=vidmgrType,proto3" json:"vidmgrType,omitempty"`                                                                             //服务类型:1:zlmediakit,2:srs,3:monibuca
	VidmgrSecret string                `protobuf:"bytes,7,opt,name=vidmgrSecret,proto3" json:"vidmgrSecret,omitempty"`                                                                          //服务秘钥
	VidmgrStatus int64                 `protobuf:"varint,8,opt,name=vidmgrStatus,proto3" json:"vidmgrStatus,omitempty"`                                                                         //服务状态: 0：未激活  1：在线  2：离线
	FirstLogin   int64                 `protobuf:"varint,9,opt,name=firstLogin,proto3" json:"firstLogin,omitempty"`                                                                             //激活时间 只读
	LastLogin    int64                 `protobuf:"varint,10,opt,name=lastLogin,proto3" json:"lastLogin,omitempty"`                                                                              //最后上线时间 只读
	Desc         *wrappers.StringValue `protobuf:"bytes,11,opt,name=desc,proto3" json:"desc,omitempty"`                                                                                         //描述
	Tags         map[string]string     `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //产品标签
}

func (x *VidmgrInfo) Reset() {
	*x = VidmgrInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrInfo) ProtoMessage() {}

func (x *VidmgrInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrInfo.ProtoReflect.Descriptor instead.
func (*VidmgrInfo) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{2}
}

func (x *VidmgrInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *VidmgrInfo) GetVidmgrID() string {
	if x != nil {
		return x.VidmgrID
	}
	return ""
}

func (x *VidmgrInfo) GetVidmgrName() string {
	if x != nil {
		return x.VidmgrName
	}
	return ""
}

func (x *VidmgrInfo) GetVidmgrIpV4() string {
	if x != nil {
		return x.VidmgrIpV4
	}
	return ""
}

func (x *VidmgrInfo) GetVidmgrPort() int64 {
	if x != nil {
		return x.VidmgrPort
	}
	return 0
}

func (x *VidmgrInfo) GetVidmgrType() int64 {
	if x != nil {
		return x.VidmgrType
	}
	return 0
}

func (x *VidmgrInfo) GetVidmgrSecret() string {
	if x != nil {
		return x.VidmgrSecret
	}
	return ""
}

func (x *VidmgrInfo) GetVidmgrStatus() int64 {
	if x != nil {
		return x.VidmgrStatus
	}
	return 0
}

func (x *VidmgrInfo) GetFirstLogin() int64 {
	if x != nil {
		return x.FirstLogin
	}
	return 0
}

func (x *VidmgrInfo) GetLastLogin() int64 {
	if x != nil {
		return x.LastLogin
	}
	return 0
}

func (x *VidmgrInfo) GetDesc() *wrappers.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *VidmgrInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VidmgrInfoDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VidmgrtID string `protobuf:"bytes,1,opt,name=vidmgrtID,proto3" json:"vidmgrtID,omitempty"` //产品id
}

func (x *VidmgrInfoDeleteReq) Reset() {
	*x = VidmgrInfoDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrInfoDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrInfoDeleteReq) ProtoMessage() {}

func (x *VidmgrInfoDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrInfoDeleteReq.ProtoReflect.Descriptor instead.
func (*VidmgrInfoDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{3}
}

func (x *VidmgrInfoDeleteReq) GetVidmgrtID() string {
	if x != nil {
		return x.VidmgrtID
	}
	return ""
}

type VidmgrInfoReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VidmgrtID string `protobuf:"bytes,1,opt,name=vidmgrtID,proto3" json:"vidmgrtID,omitempty"` //产品id
}

func (x *VidmgrInfoReadReq) Reset() {
	*x = VidmgrInfoReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrInfoReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrInfoReadReq) ProtoMessage() {}

func (x *VidmgrInfoReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrInfoReadReq.ProtoReflect.Descriptor instead.
func (*VidmgrInfoReadReq) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{4}
}

func (x *VidmgrInfoReadReq) GetVidmgrtID() string {
	if x != nil {
		return x.VidmgrtID
	}
	return ""
}

type VidmgrInfoIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        *PageInfo         `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`                                                                                         //分页信息 只获取一个则不填
	VidmgrType  int64             `protobuf:"varint,2,opt,name=vidmgrType,proto3" json:"vidmgrType,omitempty"`                                                                            //vidmgrType = 6; //服务类型:1:zlmediakit,2:srs,3:monibuca
	VidmgrtName string            `protobuf:"bytes,3,opt,name=vidmgrtName,proto3" json:"vidmgrtName,omitempty"`                                                                           //过滤条件: 服务名称
	VidmgrIDs   []string          `protobuf:"bytes,4,rep,name=vidmgrIDs,proto3" json:"vidmgrIDs,omitempty"`                                                                               //过滤服务id列表
	Tags        map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
}

func (x *VidmgrInfoIndexReq) Reset() {
	*x = VidmgrInfoIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrInfoIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrInfoIndexReq) ProtoMessage() {}

func (x *VidmgrInfoIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrInfoIndexReq.ProtoReflect.Descriptor instead.
func (*VidmgrInfoIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{5}
}

func (x *VidmgrInfoIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VidmgrInfoIndexReq) GetVidmgrType() int64 {
	if x != nil {
		return x.VidmgrType
	}
	return 0
}

func (x *VidmgrInfoIndexReq) GetVidmgrtName() string {
	if x != nil {
		return x.VidmgrtName
	}
	return ""
}

func (x *VidmgrInfoIndexReq) GetVidmgrIDs() []string {
	if x != nil {
		return x.VidmgrIDs
	}
	return nil
}

func (x *VidmgrInfoIndexReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VidmgrInfoIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*VidmgrInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`    //产品信息
	Total int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *VidmgrInfoIndexResp) Reset() {
	*x = VidmgrInfoIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrInfoIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrInfoIndexResp) ProtoMessage() {}

func (x *VidmgrInfoIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrInfoIndexResp.ProtoReflect.Descriptor instead.
func (*VidmgrInfoIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{6}
}

func (x *VidmgrInfoIndexResp) GetList() []*VidmgrInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *VidmgrInfoIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type VidmgrInfoCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int64 `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"` // 查询区间 开始
	EndTime   int64 `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`     // 查询区间 结束
}

func (x *VidmgrInfoCountReq) Reset() {
	*x = VidmgrInfoCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrInfoCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrInfoCountReq) ProtoMessage() {}

func (x *VidmgrInfoCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrInfoCountReq.ProtoReflect.Descriptor instead.
func (*VidmgrInfoCountReq) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{7}
}

func (x *VidmgrInfoCountReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VidmgrInfoCountReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type VidmgrInfoCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online   int64 `protobuf:"varint,1,opt,name=online,proto3" json:"online,omitempty"`
	Offline  int64 `protobuf:"varint,2,opt,name=offline,proto3" json:"offline,omitempty"`
	Inactive int64 `protobuf:"varint,3,opt,name=inactive,proto3" json:"inactive,omitempty"`
}

func (x *VidmgrInfoCountResp) Reset() {
	*x = VidmgrInfoCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrInfoCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrInfoCountResp) ProtoMessage() {}

func (x *VidmgrInfoCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrInfoCountResp.ProtoReflect.Descriptor instead.
func (*VidmgrInfoCountResp) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{8}
}

func (x *VidmgrInfoCountResp) GetOnline() int64 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *VidmgrInfoCountResp) GetOffline() int64 {
	if x != nil {
		return x.Offline
	}
	return 0
}

func (x *VidmgrInfoCountResp) GetInactive() int64 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

// 设经纬度信息
type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Longitude float64 `protobuf:"fixed64,1,opt,name=longitude,proto3" json:"longitude,omitempty"` //经度
	Latitude  float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`   //纬度
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{9}
}

func (x *Point) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Point) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

type VidstreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamID       int64                 `protobuf:"varint,1,opt,name=streamID,proto3" json:"streamID,omitempty"` //流ID
	StreamName     string                `protobuf:"bytes,2,opt,name=streamName,proto3" json:"streamName,omitempty"`
	NetType        int64                 `protobuf:"varint,3,opt,name=netType,proto3" json:"netType,omitempty"`
	DevTye         int64                 `protobuf:"varint,4,opt,name=devTye,proto3" json:"devTye,omitempty"`
	DevsteamType   int64                 `protobuf:"varint,5,opt,name=devsteamType,proto3" json:"devsteamType,omitempty"`
	DevUrl         string                `protobuf:"bytes,6,opt,name=devUrl,proto3" json:"devUrl,omitempty"`
	ChannelID      string                `protobuf:"bytes,7,opt,name=channelID,proto3" json:"channelID,omitempty"`
	ChannelName    string                `protobuf:"bytes,8,opt,name=channelName,proto3" json:"channelName,omitempty"`
	LownetType     int64                 `protobuf:"varint,9,opt,name=lownetType,proto3" json:"lownetType,omitempty"`
	IsShareChannel bool                  `protobuf:"varint,10,opt,name=isShareChannel,proto3" json:"isShareChannel,omitempty"`
	IsAutoPush     bool                  `protobuf:"varint,11,opt,name=isAutoPush,proto3" json:"isAutoPush,omitempty"`
	IsAutoRecord   bool                  `protobuf:"varint,12,opt,name=isAutoRecord,proto3" json:"isAutoRecord,omitempty"`
	IsPTZ          bool                  `protobuf:"varint,13,opt,name=isPTZ,proto3" json:"isPTZ,omitempty"`
	IsOnline       bool                  `protobuf:"varint,14,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	VidmgrID       string                `protobuf:"bytes,15,opt,name=vidmgrID,proto3" json:"vidmgrID,omitempty"`                                                                                 //流媒体服务器ID
	CreatedTime    int64                 `protobuf:"varint,17,opt,name=createdTime,proto3" json:"createdTime,omitempty"`                                                                          //创建时间 只读
	Desc           *wrappers.StringValue `protobuf:"bytes,18,opt,name=desc,proto3" json:"desc,omitempty"`                                                                                         //描述
	Tags           map[string]string     `protobuf:"bytes,19,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //产品标签
}

func (x *VidstreamInfo) Reset() {
	*x = VidstreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidstreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidstreamInfo) ProtoMessage() {}

func (x *VidstreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidstreamInfo.ProtoReflect.Descriptor instead.
func (*VidstreamInfo) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{10}
}

func (x *VidstreamInfo) GetStreamID() int64 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *VidstreamInfo) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *VidstreamInfo) GetNetType() int64 {
	if x != nil {
		return x.NetType
	}
	return 0
}

func (x *VidstreamInfo) GetDevTye() int64 {
	if x != nil {
		return x.DevTye
	}
	return 0
}

func (x *VidstreamInfo) GetDevsteamType() int64 {
	if x != nil {
		return x.DevsteamType
	}
	return 0
}

func (x *VidstreamInfo) GetDevUrl() string {
	if x != nil {
		return x.DevUrl
	}
	return ""
}

func (x *VidstreamInfo) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

func (x *VidstreamInfo) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *VidstreamInfo) GetLownetType() int64 {
	if x != nil {
		return x.LownetType
	}
	return 0
}

func (x *VidstreamInfo) GetIsShareChannel() bool {
	if x != nil {
		return x.IsShareChannel
	}
	return false
}

func (x *VidstreamInfo) GetIsAutoPush() bool {
	if x != nil {
		return x.IsAutoPush
	}
	return false
}

func (x *VidstreamInfo) GetIsAutoRecord() bool {
	if x != nil {
		return x.IsAutoRecord
	}
	return false
}

func (x *VidstreamInfo) GetIsPTZ() bool {
	if x != nil {
		return x.IsPTZ
	}
	return false
}

func (x *VidstreamInfo) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *VidstreamInfo) GetVidmgrID() string {
	if x != nil {
		return x.VidmgrID
	}
	return ""
}

func (x *VidstreamInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *VidstreamInfo) GetDesc() *wrappers.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *VidstreamInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VidPlanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanID       int64                 `protobuf:"varint,1,opt,name=planID,proto3" json:"planID,omitempty"`
	Name         string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Enable       bool                  `protobuf:"varint,3,opt,name=enable,proto3" json:"enable,omitempty"`
	LimitSpace   int64                 `protobuf:"varint,4,opt,name=limitSpace,proto3" json:"limitSpace,omitempty"`
	LimitDays    int64                 `protobuf:"varint,5,opt,name=limitDays,proto3" json:"limitDays,omitempty"`
	OverStepPlan int64                 `protobuf:"varint,6,opt,name=overStepPlan,proto3" json:"overStepPlan,omitempty"`
	WeekDays     int64                 `protobuf:"varint,7,opt,name=weekDays,proto3" json:"weekDays,omitempty"`
	StartTime    int64                 `protobuf:"varint,8,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime      int64                 `protobuf:"varint,9,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Desc         *wrappers.StringValue `protobuf:"bytes,10,opt,name=desc,proto3" json:"desc,omitempty"`                                                                                         //描述
	Tags         map[string]string     `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //产品标签
}

func (x *VidPlanInfo) Reset() {
	*x = VidPlanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidPlanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidPlanInfo) ProtoMessage() {}

func (x *VidPlanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidPlanInfo.ProtoReflect.Descriptor instead.
func (*VidPlanInfo) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{11}
}

func (x *VidPlanInfo) GetPlanID() int64 {
	if x != nil {
		return x.PlanID
	}
	return 0
}

func (x *VidPlanInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VidPlanInfo) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *VidPlanInfo) GetLimitSpace() int64 {
	if x != nil {
		return x.LimitSpace
	}
	return 0
}

func (x *VidPlanInfo) GetLimitDays() int64 {
	if x != nil {
		return x.LimitDays
	}
	return 0
}

func (x *VidPlanInfo) GetOverStepPlan() int64 {
	if x != nil {
		return x.OverStepPlan
	}
	return 0
}

func (x *VidPlanInfo) GetWeekDays() int64 {
	if x != nil {
		return x.WeekDays
	}
	return 0
}

func (x *VidPlanInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VidPlanInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *VidPlanInfo) GetDesc() *wrappers.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *VidPlanInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VidrecordfileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileID      int64  `protobuf:"varint,1,opt,name=fileID,proto3" json:"fileID,omitempty"`
	PlanID      int64  `protobuf:"varint,2,opt,name=planID,proto3" json:"planID,omitempty"`
	ViddevID    int64  `protobuf:"varint,3,opt,name=viddevID,proto3" json:"viddevID,omitempty"`
	VidmgrID    string `protobuf:"bytes,4,opt,name=vidmgrID,proto3" json:"vidmgrID,omitempty"`
	StartTime   int64  `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime     int64  `protobuf:"varint,6,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Duration    int64  `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	Filesize    int64  `protobuf:"varint,8,opt,name=filesize,proto3" json:"filesize,omitempty"`
	VideoPath   string `protobuf:"bytes,9,opt,name=videoPath,proto3" json:"videoPath,omitempty"`
	DownLoadUrl string `protobuf:"bytes,10,opt,name=downLoadUrl,proto3" json:"downLoadUrl,omitempty"`
	CreateTime  int64  `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  int64  `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	RecordTime  int64  `protobuf:"varint,13,opt,name=recordTime,proto3" json:"recordTime,omitempty"`
}

func (x *VidrecordfileInfo) Reset() {
	*x = VidrecordfileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidrecordfileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidrecordfileInfo) ProtoMessage() {}

func (x *VidrecordfileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidrecordfileInfo.ProtoReflect.Descriptor instead.
func (*VidrecordfileInfo) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{12}
}

func (x *VidrecordfileInfo) GetFileID() int64 {
	if x != nil {
		return x.FileID
	}
	return 0
}

func (x *VidrecordfileInfo) GetPlanID() int64 {
	if x != nil {
		return x.PlanID
	}
	return 0
}

func (x *VidrecordfileInfo) GetViddevID() int64 {
	if x != nil {
		return x.ViddevID
	}
	return 0
}

func (x *VidrecordfileInfo) GetVidmgrID() string {
	if x != nil {
		return x.VidmgrID
	}
	return ""
}

func (x *VidrecordfileInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VidrecordfileInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *VidrecordfileInfo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VidrecordfileInfo) GetFilesize() int64 {
	if x != nil {
		return x.Filesize
	}
	return 0
}

func (x *VidrecordfileInfo) GetVideoPath() string {
	if x != nil {
		return x.VideoPath
	}
	return ""
}

func (x *VidrecordfileInfo) GetDownLoadUrl() string {
	if x != nil {
		return x.DownLoadUrl
	}
	return ""
}

func (x *VidrecordfileInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *VidrecordfileInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *VidrecordfileInfo) GetRecordTime() int64 {
	if x != nil {
		return x.RecordTime
	}
	return 0
}

type PageInfo_OrderBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//排序的字段名
	Filed string `protobuf:"bytes,1,opt,name=filed,proto3" json:"filed,omitempty"`
	//排序方式：0 aes, 1 desc
	Sort int64 `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *PageInfo_OrderBy) Reset() {
	*x = PageInfo_OrderBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo_OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo_OrderBy) ProtoMessage() {}

func (x *PageInfo_OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo_OrderBy.ProtoReflect.Descriptor instead.
func (*PageInfo_OrderBy) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PageInfo_OrderBy) GetFiled() string {
	if x != nil {
		return x.Filed
	}
	return ""
}

func (x *PageInfo_OrderBy) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

var File_proto_vid_proto protoreflect.FileDescriptor

var file_proto_vid_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x76, 0x69, 0x64, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x06,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x33, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xea, 0x03, 0x0a, 0x0a,
	0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x6d,
	0x67, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x6d,
	0x67, 0x72, 0x49, 0x70, 0x56, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x49, 0x70, 0x56, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x6d,
	0x67, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x6d,
	0x67, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x6d,
	0x67, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x30,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x2d, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a,
	0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x6d,
	0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x74, 0x49, 0x44, 0x22, 0x31, 0x0a,
	0x11, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x74, 0x49, 0x44,
	0x22, 0x87, 0x02, 0x0a, 0x12, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56,
	0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x13, 0x56, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4c, 0x0a, 0x12,
	0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x13, 0x56, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22,
	0x41, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x22, 0x92, 0x05, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x54, 0x79, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x76, 0x54,
	0x79, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x55, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x55, 0x72, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f,
	0x50, 0x75, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x50, 0x75, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73,
	0x50, 0x54, 0x5a, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x50, 0x54, 0x5a,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x30, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x64,
	0x2e, 0x56, 0x69, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x03, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x79, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x65, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x77, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x77, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8b, 0x03, 0x0a,
	0x11, 0x56, 0x69, 0x64, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c,
	0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x64, 0x65, 0x76, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x76, 0x69, 0x64, 0x64, 0x65, 0x76, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e,
	0x4c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x6f, 0x77, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0xf9, 0x02, 0x0a, 0x0b, 0x56,
	0x69, 0x64, 0x6d, 0x67, 0x72, 0x4d, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x10, 0x76, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0f,
	0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x0d, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x10, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x0f, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x0d, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x10, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64,
	0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x0d, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x17, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x76, 0x69,
	0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x0f, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x44, 0x0a, 0x0f, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x76,
	0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0x0d, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x64, 0x65, 0x76,
	0x4d, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x08, 0x5a, 0x06, 0x70, 0x62, 0x2f, 0x76, 0x69, 0x64, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_vid_proto_rawDescOnce sync.Once
	file_proto_vid_proto_rawDescData = file_proto_vid_proto_rawDesc
)

func file_proto_vid_proto_rawDescGZIP() []byte {
	file_proto_vid_proto_rawDescOnce.Do(func() {
		file_proto_vid_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_vid_proto_rawDescData)
	})
	return file_proto_vid_proto_rawDescData
}

var file_proto_vid_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_proto_vid_proto_goTypes = []interface{}{
	(*Response)(nil),             // 0: vid.Response
	(*PageInfo)(nil),             // 1: vid.PageInfo
	(*VidmgrInfo)(nil),           // 2: vid.VidmgrInfo
	(*VidmgrInfoDeleteReq)(nil),  // 3: vid.VidmgrInfoDeleteReq
	(*VidmgrInfoReadReq)(nil),    // 4: vid.VidmgrInfoReadReq
	(*VidmgrInfoIndexReq)(nil),   // 5: vid.VidmgrInfoIndexReq
	(*VidmgrInfoIndexResp)(nil),  // 6: vid.VidmgrInfoIndexResp
	(*VidmgrInfoCountReq)(nil),   // 7: vid.VidmgrInfoCountReq
	(*VidmgrInfoCountResp)(nil),  // 8: vid.VidmgrInfoCountResp
	(*Point)(nil),                // 9: vid.Point
	(*VidstreamInfo)(nil),        // 10: vid.VidstreamInfo
	(*VidPlanInfo)(nil),          // 11: vid.VidPlanInfo
	(*VidrecordfileInfo)(nil),    // 12: vid.VidrecordfileInfo
	(*PageInfo_OrderBy)(nil),     // 13: vid.PageInfo.OrderBy
	nil,                          // 14: vid.VidmgrInfo.TagsEntry
	nil,                          // 15: vid.VidmgrInfoIndexReq.TagsEntry
	nil,                          // 16: vid.VidstreamInfo.TagsEntry
	nil,                          // 17: vid.VidPlanInfo.TagsEntry
	(*wrappers.StringValue)(nil), // 18: google.protobuf.StringValue
}
var file_proto_vid_proto_depIdxs = []int32{
	13, // 0: vid.PageInfo.orders:type_name -> vid.PageInfo.OrderBy
	18, // 1: vid.VidmgrInfo.desc:type_name -> google.protobuf.StringValue
	14, // 2: vid.VidmgrInfo.tags:type_name -> vid.VidmgrInfo.TagsEntry
	1,  // 3: vid.VidmgrInfoIndexReq.page:type_name -> vid.PageInfo
	15, // 4: vid.VidmgrInfoIndexReq.tags:type_name -> vid.VidmgrInfoIndexReq.TagsEntry
	2,  // 5: vid.VidmgrInfoIndexResp.list:type_name -> vid.VidmgrInfo
	18, // 6: vid.VidstreamInfo.desc:type_name -> google.protobuf.StringValue
	16, // 7: vid.VidstreamInfo.tags:type_name -> vid.VidstreamInfo.TagsEntry
	18, // 8: vid.VidPlanInfo.desc:type_name -> google.protobuf.StringValue
	17, // 9: vid.VidPlanInfo.tags:type_name -> vid.VidPlanInfo.TagsEntry
	2,  // 10: vid.VidmgrMange.vidmgrInfoCreate:input_type -> vid.VidmgrInfo
	2,  // 11: vid.VidmgrMange.vidmgrInfoUpdate:input_type -> vid.VidmgrInfo
	3,  // 12: vid.VidmgrMange.vidmgrInfoDelete:input_type -> vid.VidmgrInfoDeleteReq
	5,  // 13: vid.VidmgrMange.vidmgrInfoIndex:input_type -> vid.VidmgrInfoIndexReq
	4,  // 14: vid.VidmgrMange.vidmgrInfoRead:input_type -> vid.VidmgrInfoReadReq
	7,  // 15: vid.VidmgrMange.vidmgrInfoCount:input_type -> vid.VidmgrInfoCountReq
	0,  // 16: vid.VidmgrMange.vidmgrInfoCreate:output_type -> vid.Response
	0,  // 17: vid.VidmgrMange.vidmgrInfoUpdate:output_type -> vid.Response
	0,  // 18: vid.VidmgrMange.vidmgrInfoDelete:output_type -> vid.Response
	6,  // 19: vid.VidmgrMange.vidmgrInfoIndex:output_type -> vid.VidmgrInfoIndexResp
	2,  // 20: vid.VidmgrMange.vidmgrInfoRead:output_type -> vid.VidmgrInfo
	8,  // 21: vid.VidmgrMange.vidmgrInfoCount:output_type -> vid.VidmgrInfoCountResp
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_proto_vid_proto_init() }
func file_proto_vid_proto_init() {
	if File_proto_vid_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_vid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrInfoDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrInfoReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrInfoIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrInfoIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrInfoCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrInfoCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidstreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidPlanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidrecordfileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo_OrderBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_vid_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_vid_proto_goTypes,
		DependencyIndexes: file_proto_vid_proto_depIdxs,
		MessageInfos:      file_proto_vid_proto_msgTypes,
	}.Build()
	File_proto_vid_proto = out.File
	file_proto_vid_proto_rawDesc = nil
	file_proto_vid_proto_goTypes = nil
	file_proto_vid_proto_depIdxs = nil
}
