// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: proto/vid.proto

package vid

import (
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{0}
}

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// 排序信息
	Orders []*PageInfo_OrderBy `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{1}
}

func (x *PageInfo) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PageInfo) GetOrders() []*PageInfo_OrderBy {
	if x != nil {
		return x.Orders
	}
	return nil
}

type VidmgrInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime  int64                 `protobuf:"varint,1,opt,name=createdTime,proto3" json:"createdTime,omitempty"`                                                                           //创建时间 只读
	VidmgrID     string                `protobuf:"bytes,2,opt,name=vidmgrID,proto3" json:"vidmgrID,omitempty"`                                                                                  //服务id 只读
	VidmgrName   string                `protobuf:"bytes,3,opt,name=vidmgrName,proto3" json:"vidmgrName,omitempty"`                                                                              //服务名称
	VidmgrIpV4   string                `protobuf:"bytes,4,opt,name=vidmgrIpV4,proto3" json:"vidmgrIpV4,omitempty"`                                                                              //服务IP
	VidmgrPort   int64                 `protobuf:"varint,5,opt,name=vidmgrPort,proto3" json:"vidmgrPort,omitempty"`                                                                             //服务端口
	VidmgrType   int64                 `protobuf:"varint,6,opt,name=vidmgrType,proto3" json:"vidmgrType,omitempty"`                                                                             //服务类型:1:zlmediakit,2:srs,3:monibuca
	VidmgrSecret string                `protobuf:"bytes,7,opt,name=vidmgrSecret,proto3" json:"vidmgrSecret,omitempty"`                                                                          //服务秘钥
	VidmgrStatus int64                 `protobuf:"varint,8,opt,name=vidmgrStatus,proto3" json:"vidmgrStatus,omitempty"`                                                                         //服务状态: 0：未激活  1：在线  2：离线
	FirstLogin   int64                 `protobuf:"varint,9,opt,name=firstLogin,proto3" json:"firstLogin,omitempty"`                                                                             //激活时间 只读
	LastLogin    int64                 `protobuf:"varint,10,opt,name=lastLogin,proto3" json:"lastLogin,omitempty"`                                                                              //最后上线时间 只读
	Desc         *wrappers.StringValue `protobuf:"bytes,11,opt,name=desc,proto3" json:"desc,omitempty"`                                                                                         //描述
	Tags         map[string]string     `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //产品标签
}

func (x *VidmgrInfo) Reset() {
	*x = VidmgrInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrInfo) ProtoMessage() {}

func (x *VidmgrInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrInfo.ProtoReflect.Descriptor instead.
func (*VidmgrInfo) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{2}
}

func (x *VidmgrInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *VidmgrInfo) GetVidmgrID() string {
	if x != nil {
		return x.VidmgrID
	}
	return ""
}

func (x *VidmgrInfo) GetVidmgrName() string {
	if x != nil {
		return x.VidmgrName
	}
	return ""
}

func (x *VidmgrInfo) GetVidmgrIpV4() string {
	if x != nil {
		return x.VidmgrIpV4
	}
	return ""
}

func (x *VidmgrInfo) GetVidmgrPort() int64 {
	if x != nil {
		return x.VidmgrPort
	}
	return 0
}

func (x *VidmgrInfo) GetVidmgrType() int64 {
	if x != nil {
		return x.VidmgrType
	}
	return 0
}

func (x *VidmgrInfo) GetVidmgrSecret() string {
	if x != nil {
		return x.VidmgrSecret
	}
	return ""
}

func (x *VidmgrInfo) GetVidmgrStatus() int64 {
	if x != nil {
		return x.VidmgrStatus
	}
	return 0
}

func (x *VidmgrInfo) GetFirstLogin() int64 {
	if x != nil {
		return x.FirstLogin
	}
	return 0
}

func (x *VidmgrInfo) GetLastLogin() int64 {
	if x != nil {
		return x.LastLogin
	}
	return 0
}

func (x *VidmgrInfo) GetDesc() *wrappers.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *VidmgrInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VidmgrInfoDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VidmgrtID string `protobuf:"bytes,1,opt,name=vidmgrtID,proto3" json:"vidmgrtID,omitempty"` //产品id
}

func (x *VidmgrInfoDeleteReq) Reset() {
	*x = VidmgrInfoDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrInfoDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrInfoDeleteReq) ProtoMessage() {}

func (x *VidmgrInfoDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrInfoDeleteReq.ProtoReflect.Descriptor instead.
func (*VidmgrInfoDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{3}
}

func (x *VidmgrInfoDeleteReq) GetVidmgrtID() string {
	if x != nil {
		return x.VidmgrtID
	}
	return ""
}

type VidmgrInfoReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VidmgrtID string `protobuf:"bytes,1,opt,name=vidmgrtID,proto3" json:"vidmgrtID,omitempty"` //产品id
}

func (x *VidmgrInfoReadReq) Reset() {
	*x = VidmgrInfoReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrInfoReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrInfoReadReq) ProtoMessage() {}

func (x *VidmgrInfoReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrInfoReadReq.ProtoReflect.Descriptor instead.
func (*VidmgrInfoReadReq) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{4}
}

func (x *VidmgrInfoReadReq) GetVidmgrtID() string {
	if x != nil {
		return x.VidmgrtID
	}
	return ""
}

type VidmgrInfoIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        *PageInfo         `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`                                                                                         //分页信息 只获取一个则不填
	VidmgrType  int64             `protobuf:"varint,2,opt,name=vidmgrType,proto3" json:"vidmgrType,omitempty"`                                                                            //vidmgrType = 6; //服务类型:1:zlmediakit,2:srs,3:monibuca
	VidmgrtName string            `protobuf:"bytes,3,opt,name=vidmgrtName,proto3" json:"vidmgrtName,omitempty"`                                                                           //过滤条件: 服务名称
	VidmgrIDs   []string          `protobuf:"bytes,4,rep,name=vidmgrIDs,proto3" json:"vidmgrIDs,omitempty"`                                                                               //过滤服务id列表
	Tags        map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
}

func (x *VidmgrInfoIndexReq) Reset() {
	*x = VidmgrInfoIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrInfoIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrInfoIndexReq) ProtoMessage() {}

func (x *VidmgrInfoIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrInfoIndexReq.ProtoReflect.Descriptor instead.
func (*VidmgrInfoIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{5}
}

func (x *VidmgrInfoIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VidmgrInfoIndexReq) GetVidmgrType() int64 {
	if x != nil {
		return x.VidmgrType
	}
	return 0
}

func (x *VidmgrInfoIndexReq) GetVidmgrtName() string {
	if x != nil {
		return x.VidmgrtName
	}
	return ""
}

func (x *VidmgrInfoIndexReq) GetVidmgrIDs() []string {
	if x != nil {
		return x.VidmgrIDs
	}
	return nil
}

func (x *VidmgrInfoIndexReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VidmgrInfoIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*VidmgrInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`    //产品信息
	Total int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *VidmgrInfoIndexResp) Reset() {
	*x = VidmgrInfoIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrInfoIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrInfoIndexResp) ProtoMessage() {}

func (x *VidmgrInfoIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrInfoIndexResp.ProtoReflect.Descriptor instead.
func (*VidmgrInfoIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{6}
}

func (x *VidmgrInfoIndexResp) GetList() []*VidmgrInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *VidmgrInfoIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type VidmgrInfoCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int64 `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"` // 查询区间 开始
	EndTime   int64 `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`     // 查询区间 结束
}

func (x *VidmgrInfoCountReq) Reset() {
	*x = VidmgrInfoCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrInfoCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrInfoCountReq) ProtoMessage() {}

func (x *VidmgrInfoCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrInfoCountReq.ProtoReflect.Descriptor instead.
func (*VidmgrInfoCountReq) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{7}
}

func (x *VidmgrInfoCountReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VidmgrInfoCountReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type VidmgrInfoCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online   int64 `protobuf:"varint,1,opt,name=online,proto3" json:"online,omitempty"`
	Offline  int64 `protobuf:"varint,2,opt,name=offline,proto3" json:"offline,omitempty"`
	Inactive int64 `protobuf:"varint,3,opt,name=inactive,proto3" json:"inactive,omitempty"`
}

func (x *VidmgrInfoCountResp) Reset() {
	*x = VidmgrInfoCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrInfoCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrInfoCountResp) ProtoMessage() {}

func (x *VidmgrInfoCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrInfoCountResp.ProtoReflect.Descriptor instead.
func (*VidmgrInfoCountResp) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{8}
}

func (x *VidmgrInfoCountResp) GetOnline() int64 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *VidmgrInfoCountResp) GetOffline() int64 {
	if x != nil {
		return x.Offline
	}
	return 0
}

func (x *VidmgrInfoCountResp) GetInactive() int64 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

type VidmgrStreamCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int64 `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"` // 查询区间 开始
	EndTime   int64 `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`     // 查询区间 结束
}

func (x *VidmgrStreamCountReq) Reset() {
	*x = VidmgrStreamCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrStreamCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrStreamCountReq) ProtoMessage() {}

func (x *VidmgrStreamCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrStreamCountReq.ProtoReflect.Descriptor instead.
func (*VidmgrStreamCountReq) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{9}
}

func (x *VidmgrStreamCountReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VidmgrStreamCountReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type VidmgrStreamIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*VidmgrInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`    //产品信息
	Total int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *VidmgrStreamIndexResp) Reset() {
	*x = VidmgrStreamIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrStreamIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrStreamIndexResp) ProtoMessage() {}

func (x *VidmgrStreamIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrStreamIndexResp.ProtoReflect.Descriptor instead.
func (*VidmgrStreamIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{10}
}

func (x *VidmgrStreamIndexResp) GetList() []*VidmgrInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *VidmgrStreamIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type VidmgrStreamCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online   int64 `protobuf:"varint,1,opt,name=online,proto3" json:"online,omitempty"`
	Offline  int64 `protobuf:"varint,2,opt,name=offline,proto3" json:"offline,omitempty"`
	Inactive int64 `protobuf:"varint,3,opt,name=inactive,proto3" json:"inactive,omitempty"`
}

func (x *VidmgrStreamCountResp) Reset() {
	*x = VidmgrStreamCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrStreamCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrStreamCountResp) ProtoMessage() {}

func (x *VidmgrStreamCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrStreamCountResp.ProtoReflect.Descriptor instead.
func (*VidmgrStreamCountResp) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{11}
}

func (x *VidmgrStreamCountResp) GetOnline() int64 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *VidmgrStreamCountResp) GetOffline() int64 {
	if x != nil {
		return x.Offline
	}
	return 0
}

func (x *VidmgrStreamCountResp) GetInactive() int64 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

type VidmgrStreamDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamID string `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"` //流ID
}

func (x *VidmgrStreamDeleteReq) Reset() {
	*x = VidmgrStreamDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrStreamDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrStreamDeleteReq) ProtoMessage() {}

func (x *VidmgrStreamDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrStreamDeleteReq.ProtoReflect.Descriptor instead.
func (*VidmgrStreamDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{12}
}

func (x *VidmgrStreamDeleteReq) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

type VidmgrStreamReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamID string `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"` //流ID
}

func (x *VidmgrStreamReadReq) Reset() {
	*x = VidmgrStreamReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrStreamReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrStreamReadReq) ProtoMessage() {}

func (x *VidmgrStreamReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrStreamReadReq.ProtoReflect.Descriptor instead.
func (*VidmgrStreamReadReq) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{13}
}

func (x *VidmgrStreamReadReq) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

type VidmgrStreamIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      *PageInfo         `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`           //分页信息 只获取一个则不填
	VidmgrID  string            `protobuf:"bytes,2,opt,name=vidmgrID,proto3" json:"vidmgrID,omitempty"`   //过滤条件: 根据流服务ID来查流
	StreamIDs []string          `protobuf:"bytes,3,rep,name=streamIDs,proto3" json:"streamIDs,omitempty"` //过滤服务id列表
	App       string            `protobuf:"bytes,4,opt,name=app,proto3" json:"app,omitempty"`
	Schema    string            `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	Stream    string            `protobuf:"bytes,6,opt,name=stream,proto3" json:"stream,omitempty"`
	Vhost     string            `protobuf:"bytes,7,opt,name=vhost,proto3" json:"vhost,omitempty"`
	Tags      map[string]string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
}

func (x *VidmgrStreamIndexReq) Reset() {
	*x = VidmgrStreamIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrStreamIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrStreamIndexReq) ProtoMessage() {}

func (x *VidmgrStreamIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrStreamIndexReq.ProtoReflect.Descriptor instead.
func (*VidmgrStreamIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{14}
}

func (x *VidmgrStreamIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VidmgrStreamIndexReq) GetVidmgrID() string {
	if x != nil {
		return x.VidmgrID
	}
	return ""
}

func (x *VidmgrStreamIndexReq) GetStreamIDs() []string {
	if x != nil {
		return x.StreamIDs
	}
	return nil
}

func (x *VidmgrStreamIndexReq) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *VidmgrStreamIndexReq) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *VidmgrStreamIndexReq) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *VidmgrStreamIndexReq) GetVhost() string {
	if x != nil {
		return x.Vhost
	}
	return ""
}

func (x *VidmgrStreamIndexReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type StreamTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels    int64   `protobuf:"varint,1,opt,name=channels,proto3" json:"channels,omitempty"`
	CodecId     int64   `protobuf:"varint,2,opt,name=codecId,proto3" json:"codecId,omitempty"`
	CodecIdName string  `protobuf:"bytes,3,opt,name=codecIdName,proto3" json:"codecIdName,omitempty"`
	CodecType   bool    `protobuf:"varint,4,opt,name=codecType,proto3" json:"codecType,omitempty"`
	Ready       bool    `protobuf:"varint,5,opt,name=ready,proto3" json:"ready,omitempty"`
	Loss        float64 `protobuf:"fixed64,6,opt,name=loss,proto3" json:"loss,omitempty"`
	SampleBit   int64   `protobuf:"varint,7,opt,name=sampleBit,proto3" json:"sampleBit,omitempty"`
	SampleRate  int64   `protobuf:"varint,8,opt,name=sampleRate,proto3" json:"sampleRate,omitempty"`
	Fps         int64   `protobuf:"varint,9,opt,name=fps,proto3" json:"fps,omitempty"`
	Height      int64   `protobuf:"varint,10,opt,name=height,proto3" json:"height,omitempty"`
	Width       int64   `protobuf:"varint,11,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *StreamTrack) Reset() {
	*x = StreamTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTrack) ProtoMessage() {}

func (x *StreamTrack) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTrack.ProtoReflect.Descriptor instead.
func (*StreamTrack) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{15}
}

func (x *StreamTrack) GetChannels() int64 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *StreamTrack) GetCodecId() int64 {
	if x != nil {
		return x.CodecId
	}
	return 0
}

func (x *StreamTrack) GetCodecIdName() string {
	if x != nil {
		return x.CodecIdName
	}
	return ""
}

func (x *StreamTrack) GetCodecType() bool {
	if x != nil {
		return x.CodecType
	}
	return false
}

func (x *StreamTrack) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *StreamTrack) GetLoss() float64 {
	if x != nil {
		return x.Loss
	}
	return 0
}

func (x *StreamTrack) GetSampleBit() int64 {
	if x != nil {
		return x.SampleBit
	}
	return 0
}

func (x *StreamTrack) GetSampleRate() int64 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *StreamTrack) GetFps() int64 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *StreamTrack) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *StreamTrack) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

type VidmgrStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamID         string                `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"` //流ID
	StreamName       string                `protobuf:"bytes,2,opt,name=streamName,proto3" json:"streamName,omitempty"`
	App              string                `protobuf:"bytes,3,opt,name=app,proto3" json:"app,omitempty"`
	Schema           string                `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	Stream           string                `protobuf:"bytes,5,opt,name=stream,proto3" json:"stream,omitempty"`
	Vhost            string                `protobuf:"bytes,6,opt,name=vhost,proto3" json:"vhost,omitempty"`
	Identifier       string                `protobuf:"bytes,7,opt,name=identifier,proto3" json:"identifier,omitempty"`
	LocalIP          string                `protobuf:"bytes,8,opt,name=localIP,proto3" json:"localIP,omitempty"`
	LocalPort        int64                 `protobuf:"varint,9,opt,name=localPort,proto3" json:"localPort,omitempty"`
	PeerIP           string                `protobuf:"bytes,10,opt,name=peerIP,proto3" json:"peerIP,omitempty"`
	PeerPort         string                `protobuf:"bytes,11,opt,name=peerPort,proto3" json:"peerPort,omitempty"`
	OriginType       int64                 `protobuf:"varint,12,opt,name=originType,proto3" json:"originType,omitempty"`
	OriginStr        string                `protobuf:"bytes,13,opt,name=originStr,proto3" json:"originStr,omitempty"`
	OriginUrl        string                `protobuf:"bytes,14,opt,name=originUrl,proto3" json:"originUrl,omitempty"`
	ReaderCount      int64                 `protobuf:"varint,15,opt,name=readerCount,proto3" json:"readerCount,omitempty"`
	TotalReaderCount int64                 `protobuf:"varint,16,opt,name=totalReaderCount,proto3" json:"totalReaderCount,omitempty"`
	Tracks           []*StreamTrack        `protobuf:"bytes,17,rep,name=tracks,proto3" json:"tracks,omitempty"`
	IsRecordingMp4   bool                  `protobuf:"varint,18,opt,name=isRecordingMp4,proto3" json:"isRecordingMp4,omitempty"`
	IsRecordingHLS   bool                  `protobuf:"varint,19,opt,name=isRecordingHLS,proto3" json:"isRecordingHLS,omitempty"`
	IsShareChannel   bool                  `protobuf:"varint,20,opt,name=isShareChannel,proto3" json:"isShareChannel,omitempty"`
	IsAutoPush       bool                  `protobuf:"varint,21,opt,name=isAutoPush,proto3" json:"isAutoPush,omitempty"`
	IsAutoRecord     bool                  `protobuf:"varint,22,opt,name=isAutoRecord,proto3" json:"isAutoRecord,omitempty"`
	IsPTZ            bool                  `protobuf:"varint,23,opt,name=isPTZ,proto3" json:"isPTZ,omitempty"`
	IsOnline         bool                  `protobuf:"varint,24,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	VidmgrID         string                `protobuf:"bytes,25,opt,name=vidmgrID,proto3" json:"vidmgrID,omitempty"`
	Desc             *wrappers.StringValue `protobuf:"bytes,26,opt,name=desc,proto3" json:"desc,omitempty"`                                                                                         //描述
	Tags             map[string]string     `protobuf:"bytes,27,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //产品标签
}

func (x *VidmgrStream) Reset() {
	*x = VidmgrStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrStream) ProtoMessage() {}

func (x *VidmgrStream) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrStream.ProtoReflect.Descriptor instead.
func (*VidmgrStream) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{16}
}

func (x *VidmgrStream) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

func (x *VidmgrStream) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *VidmgrStream) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *VidmgrStream) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *VidmgrStream) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *VidmgrStream) GetVhost() string {
	if x != nil {
		return x.Vhost
	}
	return ""
}

func (x *VidmgrStream) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *VidmgrStream) GetLocalIP() string {
	if x != nil {
		return x.LocalIP
	}
	return ""
}

func (x *VidmgrStream) GetLocalPort() int64 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *VidmgrStream) GetPeerIP() string {
	if x != nil {
		return x.PeerIP
	}
	return ""
}

func (x *VidmgrStream) GetPeerPort() string {
	if x != nil {
		return x.PeerPort
	}
	return ""
}

func (x *VidmgrStream) GetOriginType() int64 {
	if x != nil {
		return x.OriginType
	}
	return 0
}

func (x *VidmgrStream) GetOriginStr() string {
	if x != nil {
		return x.OriginStr
	}
	return ""
}

func (x *VidmgrStream) GetOriginUrl() string {
	if x != nil {
		return x.OriginUrl
	}
	return ""
}

func (x *VidmgrStream) GetReaderCount() int64 {
	if x != nil {
		return x.ReaderCount
	}
	return 0
}

func (x *VidmgrStream) GetTotalReaderCount() int64 {
	if x != nil {
		return x.TotalReaderCount
	}
	return 0
}

func (x *VidmgrStream) GetTracks() []*StreamTrack {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *VidmgrStream) GetIsRecordingMp4() bool {
	if x != nil {
		return x.IsRecordingMp4
	}
	return false
}

func (x *VidmgrStream) GetIsRecordingHLS() bool {
	if x != nil {
		return x.IsRecordingHLS
	}
	return false
}

func (x *VidmgrStream) GetIsShareChannel() bool {
	if x != nil {
		return x.IsShareChannel
	}
	return false
}

func (x *VidmgrStream) GetIsAutoPush() bool {
	if x != nil {
		return x.IsAutoPush
	}
	return false
}

func (x *VidmgrStream) GetIsAutoRecord() bool {
	if x != nil {
		return x.IsAutoRecord
	}
	return false
}

func (x *VidmgrStream) GetIsPTZ() bool {
	if x != nil {
		return x.IsPTZ
	}
	return false
}

func (x *VidmgrStream) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *VidmgrStream) GetVidmgrID() string {
	if x != nil {
		return x.VidmgrID
	}
	return ""
}

func (x *VidmgrStream) GetDesc() *wrappers.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *VidmgrStream) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VidPlanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanID       int64                 `protobuf:"varint,1,opt,name=planID,proto3" json:"planID,omitempty"`
	Name         string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Enable       bool                  `protobuf:"varint,3,opt,name=enable,proto3" json:"enable,omitempty"`
	LimitSpace   int64                 `protobuf:"varint,4,opt,name=limitSpace,proto3" json:"limitSpace,omitempty"`
	LimitDays    int64                 `protobuf:"varint,5,opt,name=limitDays,proto3" json:"limitDays,omitempty"`
	OverStepPlan int64                 `protobuf:"varint,6,opt,name=overStepPlan,proto3" json:"overStepPlan,omitempty"`
	WeekDays     int64                 `protobuf:"varint,7,opt,name=weekDays,proto3" json:"weekDays,omitempty"`
	StartTime    int64                 `protobuf:"varint,8,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime      int64                 `protobuf:"varint,9,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Desc         *wrappers.StringValue `protobuf:"bytes,10,opt,name=desc,proto3" json:"desc,omitempty"`                                                                                         //描述
	Tags         map[string]string     `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //产品标签
}

func (x *VidPlanInfo) Reset() {
	*x = VidPlanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidPlanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidPlanInfo) ProtoMessage() {}

func (x *VidPlanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidPlanInfo.ProtoReflect.Descriptor instead.
func (*VidPlanInfo) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{17}
}

func (x *VidPlanInfo) GetPlanID() int64 {
	if x != nil {
		return x.PlanID
	}
	return 0
}

func (x *VidPlanInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VidPlanInfo) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *VidPlanInfo) GetLimitSpace() int64 {
	if x != nil {
		return x.LimitSpace
	}
	return 0
}

func (x *VidPlanInfo) GetLimitDays() int64 {
	if x != nil {
		return x.LimitDays
	}
	return 0
}

func (x *VidPlanInfo) GetOverStepPlan() int64 {
	if x != nil {
		return x.OverStepPlan
	}
	return 0
}

func (x *VidPlanInfo) GetWeekDays() int64 {
	if x != nil {
		return x.WeekDays
	}
	return 0
}

func (x *VidPlanInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VidPlanInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *VidPlanInfo) GetDesc() *wrappers.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *VidPlanInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VidrecordfileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileID      int64  `protobuf:"varint,1,opt,name=fileID,proto3" json:"fileID,omitempty"`
	PlanID      int64  `protobuf:"varint,2,opt,name=planID,proto3" json:"planID,omitempty"`
	ViddevID    int64  `protobuf:"varint,3,opt,name=viddevID,proto3" json:"viddevID,omitempty"`
	VidmgrID    string `protobuf:"bytes,4,opt,name=vidmgrID,proto3" json:"vidmgrID,omitempty"`
	StartTime   int64  `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime     int64  `protobuf:"varint,6,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Duration    int64  `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	Filesize    int64  `protobuf:"varint,8,opt,name=filesize,proto3" json:"filesize,omitempty"`
	VideoPath   string `protobuf:"bytes,9,opt,name=videoPath,proto3" json:"videoPath,omitempty"`
	DownLoadUrl string `protobuf:"bytes,10,opt,name=downLoadUrl,proto3" json:"downLoadUrl,omitempty"`
	CreateTime  int64  `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  int64  `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	RecordTime  int64  `protobuf:"varint,13,opt,name=recordTime,proto3" json:"recordTime,omitempty"`
}

func (x *VidrecordfileInfo) Reset() {
	*x = VidrecordfileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidrecordfileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidrecordfileInfo) ProtoMessage() {}

func (x *VidrecordfileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidrecordfileInfo.ProtoReflect.Descriptor instead.
func (*VidrecordfileInfo) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{18}
}

func (x *VidrecordfileInfo) GetFileID() int64 {
	if x != nil {
		return x.FileID
	}
	return 0
}

func (x *VidrecordfileInfo) GetPlanID() int64 {
	if x != nil {
		return x.PlanID
	}
	return 0
}

func (x *VidrecordfileInfo) GetViddevID() int64 {
	if x != nil {
		return x.ViddevID
	}
	return 0
}

func (x *VidrecordfileInfo) GetVidmgrID() string {
	if x != nil {
		return x.VidmgrID
	}
	return ""
}

func (x *VidrecordfileInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VidrecordfileInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *VidrecordfileInfo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VidrecordfileInfo) GetFilesize() int64 {
	if x != nil {
		return x.Filesize
	}
	return 0
}

func (x *VidrecordfileInfo) GetVideoPath() string {
	if x != nil {
		return x.VideoPath
	}
	return ""
}

func (x *VidrecordfileInfo) GetDownLoadUrl() string {
	if x != nil {
		return x.DownLoadUrl
	}
	return ""
}

func (x *VidrecordfileInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *VidrecordfileInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *VidrecordfileInfo) GetRecordTime() int64 {
	if x != nil {
		return x.RecordTime
	}
	return 0
}

type VidmgrConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiDebug                       string `protobuf:"bytes,1,opt,name=apiDebug,proto3" json:"apiDebug,omitempty"`
	ApiDefaultSnap                 string `protobuf:"bytes,2,opt,name=apiDefaultSnap,proto3" json:"apiDefaultSnap,omitempty"`
	ApiSecret                      string `protobuf:"bytes,3,opt,name=apiSecret,proto3" json:"apiSecret,omitempty"`
	ApiSnapRoot                    string `protobuf:"bytes,4,opt,name=apiSnapRoot,proto3" json:"apiSnapRoot,omitempty"`
	ClusterOriginUrl               string `protobuf:"bytes,5,opt,name=clusterOriginUrl,proto3" json:"clusterOriginUrl,omitempty"`
	ClusterRetryCount              string `protobuf:"bytes,6,opt,name=clusterRetryCount,proto3" json:"clusterRetryCount,omitempty"`
	ClusterTimeoutSec              string `protobuf:"bytes,7,opt,name=clusterTimeoutSec,proto3" json:"clusterTimeoutSec,omitempty"`
	FfmpegBin                      string `protobuf:"bytes,8,opt,name=ffmpegBin,proto3" json:"ffmpegBin,omitempty"`
	FfmpegCmd                      string `protobuf:"bytes,9,opt,name=ffmpegCmd,proto3" json:"ffmpegCmd,omitempty"`
	FfmpegLog                      string `protobuf:"bytes,10,opt,name=ffmpegLog,proto3" json:"ffmpegLog,omitempty"`
	FfmpegRestartSec               string `protobuf:"bytes,11,opt,name=ffmpegRestartSec,proto3" json:"ffmpegRestartSec,omitempty"`
	FfmpegSnap                     string `protobuf:"bytes,12,opt,name=ffmpegSnap,proto3" json:"ffmpegSnap,omitempty"`
	GeneralCheckNvidiaDev          string `protobuf:"bytes,13,opt,name=generalCheckNvidiaDev,proto3" json:"generalCheckNvidiaDev,omitempty"`
	GeneralEnableVhost             string `protobuf:"bytes,14,opt,name=generalEnableVhost,proto3" json:"generalEnableVhost,omitempty"`
	GeneralEnableFfmpegLog         string `protobuf:"bytes,15,opt,name=generalEnableFfmpegLog,proto3" json:"generalEnableFfmpegLog,omitempty"`
	GeneralFlowThreshold           string `protobuf:"bytes,16,opt,name=generalFlowThreshold,proto3" json:"generalFlowThreshold,omitempty"`
	GeneralMaxStreamWaitMS         string `protobuf:"bytes,17,opt,name=generalMaxStreamWaitMS,proto3" json:"generalMaxStreamWaitMS,omitempty"`
	GeneralMediaServerId           string `protobuf:"bytes,18,opt,name=generalMediaServerId,proto3" json:"generalMediaServerId,omitempty"`
	GeneralMergeWriteMS            string `protobuf:"bytes,19,opt,name=generalMergeWriteMS,proto3" json:"generalMergeWriteMS,omitempty"`
	GeneralResetWhenRePlay         string `protobuf:"bytes,20,opt,name=generalResetWhenRePlay,proto3" json:"generalResetWhenRePlay,omitempty"`
	GeneralStreamNoneReaderDelayMS string `protobuf:"bytes,21,opt,name=generalStreamNoneReaderDelayMS,proto3" json:"generalStreamNoneReaderDelayMS,omitempty"`
	GeneralUnreadyFrameCache       string `protobuf:"bytes,22,opt,name=generalUnreadyFrameCache,proto3" json:"generalUnreadyFrameCache,omitempty"`
	GeneralWaitAddTrackMs          string `protobuf:"bytes,23,opt,name=generalWaitAddTrackMs,proto3" json:"generalWaitAddTrackMs,omitempty"`
	GeneralWaitTrackReadyMs        string `protobuf:"bytes,24,opt,name=generalWaitTrackReadyMs,proto3" json:"generalWaitTrackReadyMs,omitempty"`
	HlsBroadcastRecordTs           string `protobuf:"bytes,25,opt,name=hlsBroadcastRecordTs,proto3" json:"hlsBroadcastRecordTs,omitempty"`
	HlsDeleteDelaySec              string `protobuf:"bytes,26,opt,name=hlsDeleteDelaySec,proto3" json:"hlsDeleteDelaySec,omitempty"`
	HlsFileBufSize                 string `protobuf:"bytes,27,opt,name=hlsFileBufSize,proto3" json:"hlsFileBufSize,omitempty"`
	HlsSegDur                      string `protobuf:"bytes,28,opt,name=hlsSegDur,proto3" json:"hlsSegDur,omitempty"`
	HlsSegKeep                     string `protobuf:"bytes,29,opt,name=hlsSegKeep,proto3" json:"hlsSegKeep,omitempty"`
	HlsSegNum                      string `protobuf:"bytes,30,opt,name=hlsSegNum,proto3" json:"hlsSegNum,omitempty"`
	HlsSegRetain                   string `protobuf:"bytes,31,opt,name=hlsSegRetain,proto3" json:"hlsSegRetain,omitempty"`
	HookAliveInterval              string `protobuf:"bytes,32,opt,name=hookAliveInterval,proto3" json:"hookAliveInterval,omitempty"`
	HookEnable                     string `protobuf:"bytes,33,opt,name=hookEnable,proto3" json:"hookEnable,omitempty"`
	HookOnFlowReport               string `protobuf:"bytes,34,opt,name=hookOnFlowReport,proto3" json:"hookOnFlowReport,omitempty"`
	HookOnHttpAccess               string `protobuf:"bytes,35,opt,name=hookOnHttpAccess,proto3" json:"hookOnHttpAccess,omitempty"`
	HookOnPlay                     string `protobuf:"bytes,36,opt,name=hookOnPlay,proto3" json:"hookOnPlay,omitempty"`
	HookOnPublish                  string `protobuf:"bytes,37,opt,name=hookOnPublish,proto3" json:"hookOnPublish,omitempty"`
	HookOnRecordMp4                string `protobuf:"bytes,38,opt,name=hookOnRecordMp4,proto3" json:"hookOnRecordMp4,omitempty"`
	HookOnRecordTs                 string `protobuf:"bytes,39,opt,name=hookOnRecordTs,proto3" json:"hookOnRecordTs,omitempty"`
	HookOnRtpServerTimeout         string `protobuf:"bytes,40,opt,name=hookOnRtpServerTimeout,proto3" json:"hookOnRtpServerTimeout,omitempty"`
	HookOnRtspAuth                 string `protobuf:"bytes,41,opt,name=hookOnRtspAuth,proto3" json:"hookOnRtspAuth,omitempty"`
	HookOnRtspRealm                string `protobuf:"bytes,42,opt,name=hookOnRtspRealm,proto3" json:"hookOnRtspRealm,omitempty"`
	HookOnSendRtpStopped           string `protobuf:"bytes,43,opt,name=hookOnSendRtpStopped,proto3" json:"hookOnSendRtpStopped,omitempty"`
	HookOnServerExited             string `protobuf:"bytes,44,opt,name=hookOnServerExited,proto3" json:"hookOnServerExited,omitempty"`
	HookOnServerKeepalive          string `protobuf:"bytes,45,opt,name=hookOnServerKeepalive,proto3" json:"hookOnServerKeepalive,omitempty"`
	HookOnServerStarted            string `protobuf:"bytes,46,opt,name=hookOnServerStarted,proto3" json:"hookOnServerStarted,omitempty"`
	HookOnShellLogin               string `protobuf:"bytes,47,opt,name=hookOnShellLogin,proto3" json:"hookOnShellLogin,omitempty"`
	HookOnStreamChanged            string `protobuf:"bytes,48,opt,name=hookOnStreamChanged,proto3" json:"hookOnStreamChanged,omitempty"`
	HookOnStreamNoneReader         string `protobuf:"bytes,49,opt,name=hookOnStreamNoneReader,proto3" json:"hookOnStreamNoneReader,omitempty"`
	HookOnStreamNotFound           string `protobuf:"bytes,50,opt,name=hookOnStreamNotFound,proto3" json:"hookOnStreamNotFound,omitempty"`
	HookRetry                      string `protobuf:"bytes,51,opt,name=hookRetry,proto3" json:"hookRetry,omitempty"`
	HookRetryDelay                 string `protobuf:"bytes,52,opt,name=hookRetryDelay,proto3" json:"hookRetryDelay,omitempty"`
	HookStreamChangedSchemas       string `protobuf:"bytes,53,opt,name=hookStreamChangedSchemas,proto3" json:"hookStreamChangedSchemas,omitempty"`
	HookTimeoutSec                 string `protobuf:"bytes,54,opt,name=hookTimeoutSec,proto3" json:"hookTimeoutSec,omitempty"`
	HttpAllowCrossDomains          string `protobuf:"bytes,55,opt,name=httpAllowCrossDomains,proto3" json:"httpAllowCrossDomains,omitempty"`
	HttpAllowIpRange               string `protobuf:"bytes,56,opt,name=httpAllowIpRange,proto3" json:"httpAllowIpRange,omitempty"`
	HttpCharSet                    string `protobuf:"bytes,57,opt,name=httpCharSet,proto3" json:"httpCharSet,omitempty"`
	HttpDirMenu                    string `protobuf:"bytes,58,opt,name=httpDirMenu,proto3" json:"httpDirMenu,omitempty"`
	HttpForbidCacheSuffix          string `protobuf:"bytes,59,opt,name=httpForbidCacheSuffix,proto3" json:"httpForbidCacheSuffix,omitempty"`
	HttpForwardedIpHeader          string `protobuf:"bytes,60,opt,name=httpForwardedIpHeader,proto3" json:"httpForwardedIpHeader,omitempty"`
	HttpKeepAliveSecond            string `protobuf:"bytes,61,opt,name=httpKeepAliveSecond,proto3" json:"httpKeepAliveSecond,omitempty"`
	HttpMaxReqSize                 string `protobuf:"bytes,62,opt,name=httpMaxReqSize,proto3" json:"httpMaxReqSize,omitempty"`
	HttpNotFound                   string `protobuf:"bytes,63,opt,name=httpNotFound,proto3" json:"httpNotFound,omitempty"`
	HttpPort                       string `protobuf:"bytes,64,opt,name=httpPort,proto3" json:"httpPort,omitempty"`
	HttpRootPath                   string `protobuf:"bytes,65,opt,name=httpRootPath,proto3" json:"httpRootPath,omitempty"`
	HttpSendBufSize                string `protobuf:"bytes,66,opt,name=httpSendBufSize,proto3" json:"httpSendBufSize,omitempty"`
	HttpSslport                    string `protobuf:"bytes,67,opt,name=httpSslport,proto3" json:"httpSslport,omitempty"`
	HttpVirtualPath                string `protobuf:"bytes,68,opt,name=httpVirtualPath,proto3" json:"httpVirtualPath,omitempty"`
	MulticastAddrMax               string `protobuf:"bytes,69,opt,name=multicastAddrMax,proto3" json:"multicastAddrMax,omitempty"`
	MulticastAddrMin               string `protobuf:"bytes,70,opt,name=multicastAddrMin,proto3" json:"multicastAddrMin,omitempty"`
	MulticastUdpTTL                string `protobuf:"bytes,71,opt,name=multicastUdpTTL,proto3" json:"multicastUdpTTL,omitempty"`
	ProtocolAddMuteAudio           string `protobuf:"bytes,72,opt,name=protocolAddMuteAudio,proto3" json:"protocolAddMuteAudio,omitempty"`
	ProtocolAutoClose              string `protobuf:"bytes,73,opt,name=protocolAutoClose,proto3" json:"protocolAutoClose,omitempty"`
	ProtocolContinuePushMs         string `protobuf:"bytes,74,opt,name=protocolContinuePushMs,proto3" json:"protocolContinuePushMs,omitempty"`
	ProtocolEnableAudio            string `protobuf:"bytes,75,opt,name=protocolEnableAudio,proto3" json:"protocolEnableAudio,omitempty"`
	ProtocolEnableFmp4             string `protobuf:"bytes,76,opt,name=protocolEnableFmp4,proto3" json:"protocolEnableFmp4,omitempty"`
	ProtocolEnableHls              string `protobuf:"bytes,77,opt,name=protocolEnableHls,proto3" json:"protocolEnableHls,omitempty"`
	ProtocolEnableHlsFmp4          string `protobuf:"bytes,78,opt,name=protocolEnableHlsFmp4,proto3" json:"protocolEnableHlsFmp4,omitempty"`
	ProtocolEnableMp4              string `protobuf:"bytes,79,opt,name=protocolEnableMp4,proto3" json:"protocolEnableMp4,omitempty"`
	ProtocolEnableRtmp             string `protobuf:"bytes,80,opt,name=protocolEnableRtmp,proto3" json:"protocolEnableRtmp,omitempty"`
	ProtocolEnableRtsp             string `protobuf:"bytes,81,opt,name=protocolEnableRtsp,proto3" json:"protocolEnableRtsp,omitempty"`
	ProtocolEnableTs               string `protobuf:"bytes,82,opt,name=protocolEnableTs,proto3" json:"protocolEnableTs,omitempty"`
	ProtocolFmp4Demand             string `protobuf:"bytes,83,opt,name=protocolFmp4Demand,proto3" json:"protocolFmp4Demand,omitempty"`
	ProtocolHlsDemand              string `protobuf:"bytes,84,opt,name=protocolHlsDemand,proto3" json:"protocolHlsDemand,omitempty"`
	ProtocolHlsSavePath            string `protobuf:"bytes,85,opt,name=protocolHlsSavePath,proto3" json:"protocolHlsSavePath,omitempty"`
	ProtocolModifyStamp            string `protobuf:"bytes,86,opt,name=protocolModifyStamp,proto3" json:"protocolModifyStamp,omitempty"`
	ProtocolMp4AsPlayer            string `protobuf:"bytes,87,opt,name=protocolMp4AsPlayer,proto3" json:"protocolMp4AsPlayer,omitempty"`
	ProtocolMp4MaxSecond           string `protobuf:"bytes,88,opt,name=protocolMp4MaxSecond,proto3" json:"protocolMp4MaxSecond,omitempty"`
	ProtocolMp4SavePath            string `protobuf:"bytes,89,opt,name=protocolMp4SavePath,proto3" json:"protocolMp4SavePath,omitempty"`
	ProtocolRtmpDemand             string `protobuf:"bytes,90,opt,name=protocolRtmpDemand,proto3" json:"protocolRtmpDemand,omitempty"`
	ProtocolRtspDemand             string `protobuf:"bytes,91,opt,name=protocolRtspDemand,proto3" json:"protocolRtspDemand,omitempty"`
	ProtocolTsDemand               string `protobuf:"bytes,92,opt,name=protocolTsDemand,proto3" json:"protocolTsDemand,omitempty"`
	RecordAppName                  string `protobuf:"bytes,93,opt,name=recordAppName,proto3" json:"recordAppName,omitempty"`
	RecordFastStart                string `protobuf:"bytes,94,opt,name=recordFastStart,proto3" json:"recordFastStart,omitempty"`
	RecordFileBufSize              string `protobuf:"bytes,95,opt,name=recordFileBufSize,proto3" json:"recordFileBufSize,omitempty"`
	RecordFileRepeat               string `protobuf:"bytes,96,opt,name=recordFileRepeat,proto3" json:"recordFileRepeat,omitempty"`
	RecordSampleMS                 string `protobuf:"bytes,97,opt,name=recordSampleMS,proto3" json:"recordSampleMS,omitempty"`
	RtcExternIP                    string `protobuf:"bytes,98,opt,name=rtcExternIP,proto3" json:"rtcExternIP,omitempty"`
	RtcPort                        string `protobuf:"bytes,99,opt,name=rtcPort,proto3" json:"rtcPort,omitempty"`
	RtcPreferredCodecA             string `protobuf:"bytes,100,opt,name=rtcPreferredCodecA,proto3" json:"rtcPreferredCodecA,omitempty"`
	RtcPreferredCodecV             string `protobuf:"bytes,101,opt,name=rtcPreferredCodecV,proto3" json:"rtcPreferredCodecV,omitempty"`
	RtcRembBitRate                 string `protobuf:"bytes,102,opt,name=rtcRembBitRate,proto3" json:"rtcRembBitRate,omitempty"`
	RtcTcpPort                     string `protobuf:"bytes,103,opt,name=rtcTcpPort,proto3" json:"rtcTcpPort,omitempty"`
	RtcTimeoutSec                  string `protobuf:"bytes,104,opt,name=rtcTimeoutSec,proto3" json:"rtcTimeoutSec,omitempty"`
	RtmpHandshakeSecond            string `protobuf:"bytes,105,opt,name=rtmpHandshakeSecond,proto3" json:"rtmpHandshakeSecond,omitempty"`
	RtmpKeepAliveSecond            string `protobuf:"bytes,106,opt,name=rtmpKeepAliveSecond,proto3" json:"rtmpKeepAliveSecond,omitempty"`
	RtmpPort                       string `protobuf:"bytes,107,opt,name=rtmpPort,proto3" json:"rtmpPort,omitempty"`
	RtmpSslport                    string `protobuf:"bytes,108,opt,name=rtmpSslport,proto3" json:"rtmpSslport,omitempty"`
	RtpAudioMtuSize                string `protobuf:"bytes,109,opt,name=rtpAudioMtuSize,proto3" json:"rtpAudioMtuSize,omitempty"`
	RtpH264StapA                   string `protobuf:"bytes,110,opt,name=rtpH264StapA,proto3" json:"rtpH264StapA,omitempty"`
	RtpLowLatency                  string `protobuf:"bytes,111,opt,name=rtpLowLatency,proto3" json:"rtpLowLatency,omitempty"`
	RtpRtpMaxSize                  string `protobuf:"bytes,112,opt,name=rtpRtpMaxSize,proto3" json:"rtpRtpMaxSize,omitempty"`
	RtpVideoMtuSize                string `protobuf:"bytes,113,opt,name=rtpVideoMtuSize,proto3" json:"rtpVideoMtuSize,omitempty"`
	RtpProxyDumpDir                string `protobuf:"bytes,114,opt,name=rtpProxyDumpDir,proto3" json:"rtpProxyDumpDir,omitempty"`
	RtpProxyGopCache               string `protobuf:"bytes,115,opt,name=rtpProxyGopCache,proto3" json:"rtpProxyGopCache,omitempty"`
	RtpProxyH264Pt                 string `protobuf:"bytes,116,opt,name=rtpProxyH264Pt,proto3" json:"rtpProxyH264Pt,omitempty"`
	RtpProxyH265Pt                 string `protobuf:"bytes,117,opt,name=rtpProxyH265Pt,proto3" json:"rtpProxyH265Pt,omitempty"`
	RtpProxyOpusPt                 string `protobuf:"bytes,118,opt,name=rtpProxyOpusPt,proto3" json:"rtpProxyOpusPt,omitempty"`
	RtpProxyPort                   string `protobuf:"bytes,119,opt,name=rtpProxyPort,proto3" json:"rtpProxyPort,omitempty"`
	RtpProxyPortRange              string `protobuf:"bytes,120,opt,name=rtpProxyPortRange,proto3" json:"rtpProxyPortRange,omitempty"`
	RtpProxyPsPt                   string `protobuf:"bytes,121,opt,name=rtpProxyPsPt,proto3" json:"rtpProxyPsPt,omitempty"`
	RtpProxyTimeoutSec             string `protobuf:"bytes,122,opt,name=rtpProxyTimeoutSec,proto3" json:"rtpProxyTimeoutSec,omitempty"`
	RtspAuthBasic                  string `protobuf:"bytes,123,opt,name=rtspAuthBasic,proto3" json:"rtspAuthBasic,omitempty"`
	RtspDirectProxy                string `protobuf:"bytes,124,opt,name=rtspDirectProxy,proto3" json:"rtspDirectProxy,omitempty"`
	RtspHandshakeSecond            string `protobuf:"bytes,125,opt,name=rtspHandshakeSecond,proto3" json:"rtspHandshakeSecond,omitempty"`
	RtspKeepAliveSecond            string `protobuf:"bytes,126,opt,name=rtspKeepAliveSecond,proto3" json:"rtspKeepAliveSecond,omitempty"`
	RtspLowLatency                 string `protobuf:"bytes,127,opt,name=rtspLowLatency,proto3" json:"rtspLowLatency,omitempty"`
	RtspPort                       string `protobuf:"bytes,128,opt,name=rtspPort,proto3" json:"rtspPort,omitempty"`
	RtspRtpTransportType           string `protobuf:"bytes,129,opt,name=rtspRtpTransportType,proto3" json:"rtspRtpTransportType,omitempty"`
	RtspSslport                    string `protobuf:"bytes,130,opt,name=rtspSslport,proto3" json:"rtspSslport,omitempty"`
	ShellMaxReqSize                string `protobuf:"bytes,131,opt,name=shellMaxReqSize,proto3" json:"shellMaxReqSize,omitempty"`
	ShellPort                      string `protobuf:"bytes,132,opt,name=shellPort,proto3" json:"shellPort,omitempty"`
	SrtLatencyMul                  string `protobuf:"bytes,133,opt,name=srtLatencyMul,proto3" json:"srtLatencyMul,omitempty"`
	SrtPktBufSize                  string `protobuf:"bytes,134,opt,name=srtPktBufSize,proto3" json:"srtPktBufSize,omitempty"`
	SrtPort                        string `protobuf:"bytes,135,opt,name=srtPort,proto3" json:"srtPort,omitempty"`
	SrtTimeoutSec                  string `protobuf:"bytes,136,opt,name=srtTimeoutSec,proto3" json:"srtTimeoutSec,omitempty"`
	CreatedTime                    int64  `protobuf:"varint,137,opt,name=createdTime,proto3" json:"createdTime,omitempty"` //创建时间 只读
}

func (x *VidmgrConfig) Reset() {
	*x = VidmgrConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrConfig) ProtoMessage() {}

func (x *VidmgrConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrConfig.ProtoReflect.Descriptor instead.
func (*VidmgrConfig) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{19}
}

func (x *VidmgrConfig) GetApiDebug() string {
	if x != nil {
		return x.ApiDebug
	}
	return ""
}

func (x *VidmgrConfig) GetApiDefaultSnap() string {
	if x != nil {
		return x.ApiDefaultSnap
	}
	return ""
}

func (x *VidmgrConfig) GetApiSecret() string {
	if x != nil {
		return x.ApiSecret
	}
	return ""
}

func (x *VidmgrConfig) GetApiSnapRoot() string {
	if x != nil {
		return x.ApiSnapRoot
	}
	return ""
}

func (x *VidmgrConfig) GetClusterOriginUrl() string {
	if x != nil {
		return x.ClusterOriginUrl
	}
	return ""
}

func (x *VidmgrConfig) GetClusterRetryCount() string {
	if x != nil {
		return x.ClusterRetryCount
	}
	return ""
}

func (x *VidmgrConfig) GetClusterTimeoutSec() string {
	if x != nil {
		return x.ClusterTimeoutSec
	}
	return ""
}

func (x *VidmgrConfig) GetFfmpegBin() string {
	if x != nil {
		return x.FfmpegBin
	}
	return ""
}

func (x *VidmgrConfig) GetFfmpegCmd() string {
	if x != nil {
		return x.FfmpegCmd
	}
	return ""
}

func (x *VidmgrConfig) GetFfmpegLog() string {
	if x != nil {
		return x.FfmpegLog
	}
	return ""
}

func (x *VidmgrConfig) GetFfmpegRestartSec() string {
	if x != nil {
		return x.FfmpegRestartSec
	}
	return ""
}

func (x *VidmgrConfig) GetFfmpegSnap() string {
	if x != nil {
		return x.FfmpegSnap
	}
	return ""
}

func (x *VidmgrConfig) GetGeneralCheckNvidiaDev() string {
	if x != nil {
		return x.GeneralCheckNvidiaDev
	}
	return ""
}

func (x *VidmgrConfig) GetGeneralEnableVhost() string {
	if x != nil {
		return x.GeneralEnableVhost
	}
	return ""
}

func (x *VidmgrConfig) GetGeneralEnableFfmpegLog() string {
	if x != nil {
		return x.GeneralEnableFfmpegLog
	}
	return ""
}

func (x *VidmgrConfig) GetGeneralFlowThreshold() string {
	if x != nil {
		return x.GeneralFlowThreshold
	}
	return ""
}

func (x *VidmgrConfig) GetGeneralMaxStreamWaitMS() string {
	if x != nil {
		return x.GeneralMaxStreamWaitMS
	}
	return ""
}

func (x *VidmgrConfig) GetGeneralMediaServerId() string {
	if x != nil {
		return x.GeneralMediaServerId
	}
	return ""
}

func (x *VidmgrConfig) GetGeneralMergeWriteMS() string {
	if x != nil {
		return x.GeneralMergeWriteMS
	}
	return ""
}

func (x *VidmgrConfig) GetGeneralResetWhenRePlay() string {
	if x != nil {
		return x.GeneralResetWhenRePlay
	}
	return ""
}

func (x *VidmgrConfig) GetGeneralStreamNoneReaderDelayMS() string {
	if x != nil {
		return x.GeneralStreamNoneReaderDelayMS
	}
	return ""
}

func (x *VidmgrConfig) GetGeneralUnreadyFrameCache() string {
	if x != nil {
		return x.GeneralUnreadyFrameCache
	}
	return ""
}

func (x *VidmgrConfig) GetGeneralWaitAddTrackMs() string {
	if x != nil {
		return x.GeneralWaitAddTrackMs
	}
	return ""
}

func (x *VidmgrConfig) GetGeneralWaitTrackReadyMs() string {
	if x != nil {
		return x.GeneralWaitTrackReadyMs
	}
	return ""
}

func (x *VidmgrConfig) GetHlsBroadcastRecordTs() string {
	if x != nil {
		return x.HlsBroadcastRecordTs
	}
	return ""
}

func (x *VidmgrConfig) GetHlsDeleteDelaySec() string {
	if x != nil {
		return x.HlsDeleteDelaySec
	}
	return ""
}

func (x *VidmgrConfig) GetHlsFileBufSize() string {
	if x != nil {
		return x.HlsFileBufSize
	}
	return ""
}

func (x *VidmgrConfig) GetHlsSegDur() string {
	if x != nil {
		return x.HlsSegDur
	}
	return ""
}

func (x *VidmgrConfig) GetHlsSegKeep() string {
	if x != nil {
		return x.HlsSegKeep
	}
	return ""
}

func (x *VidmgrConfig) GetHlsSegNum() string {
	if x != nil {
		return x.HlsSegNum
	}
	return ""
}

func (x *VidmgrConfig) GetHlsSegRetain() string {
	if x != nil {
		return x.HlsSegRetain
	}
	return ""
}

func (x *VidmgrConfig) GetHookAliveInterval() string {
	if x != nil {
		return x.HookAliveInterval
	}
	return ""
}

func (x *VidmgrConfig) GetHookEnable() string {
	if x != nil {
		return x.HookEnable
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnFlowReport() string {
	if x != nil {
		return x.HookOnFlowReport
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnHttpAccess() string {
	if x != nil {
		return x.HookOnHttpAccess
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnPlay() string {
	if x != nil {
		return x.HookOnPlay
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnPublish() string {
	if x != nil {
		return x.HookOnPublish
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnRecordMp4() string {
	if x != nil {
		return x.HookOnRecordMp4
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnRecordTs() string {
	if x != nil {
		return x.HookOnRecordTs
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnRtpServerTimeout() string {
	if x != nil {
		return x.HookOnRtpServerTimeout
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnRtspAuth() string {
	if x != nil {
		return x.HookOnRtspAuth
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnRtspRealm() string {
	if x != nil {
		return x.HookOnRtspRealm
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnSendRtpStopped() string {
	if x != nil {
		return x.HookOnSendRtpStopped
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnServerExited() string {
	if x != nil {
		return x.HookOnServerExited
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnServerKeepalive() string {
	if x != nil {
		return x.HookOnServerKeepalive
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnServerStarted() string {
	if x != nil {
		return x.HookOnServerStarted
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnShellLogin() string {
	if x != nil {
		return x.HookOnShellLogin
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnStreamChanged() string {
	if x != nil {
		return x.HookOnStreamChanged
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnStreamNoneReader() string {
	if x != nil {
		return x.HookOnStreamNoneReader
	}
	return ""
}

func (x *VidmgrConfig) GetHookOnStreamNotFound() string {
	if x != nil {
		return x.HookOnStreamNotFound
	}
	return ""
}

func (x *VidmgrConfig) GetHookRetry() string {
	if x != nil {
		return x.HookRetry
	}
	return ""
}

func (x *VidmgrConfig) GetHookRetryDelay() string {
	if x != nil {
		return x.HookRetryDelay
	}
	return ""
}

func (x *VidmgrConfig) GetHookStreamChangedSchemas() string {
	if x != nil {
		return x.HookStreamChangedSchemas
	}
	return ""
}

func (x *VidmgrConfig) GetHookTimeoutSec() string {
	if x != nil {
		return x.HookTimeoutSec
	}
	return ""
}

func (x *VidmgrConfig) GetHttpAllowCrossDomains() string {
	if x != nil {
		return x.HttpAllowCrossDomains
	}
	return ""
}

func (x *VidmgrConfig) GetHttpAllowIpRange() string {
	if x != nil {
		return x.HttpAllowIpRange
	}
	return ""
}

func (x *VidmgrConfig) GetHttpCharSet() string {
	if x != nil {
		return x.HttpCharSet
	}
	return ""
}

func (x *VidmgrConfig) GetHttpDirMenu() string {
	if x != nil {
		return x.HttpDirMenu
	}
	return ""
}

func (x *VidmgrConfig) GetHttpForbidCacheSuffix() string {
	if x != nil {
		return x.HttpForbidCacheSuffix
	}
	return ""
}

func (x *VidmgrConfig) GetHttpForwardedIpHeader() string {
	if x != nil {
		return x.HttpForwardedIpHeader
	}
	return ""
}

func (x *VidmgrConfig) GetHttpKeepAliveSecond() string {
	if x != nil {
		return x.HttpKeepAliveSecond
	}
	return ""
}

func (x *VidmgrConfig) GetHttpMaxReqSize() string {
	if x != nil {
		return x.HttpMaxReqSize
	}
	return ""
}

func (x *VidmgrConfig) GetHttpNotFound() string {
	if x != nil {
		return x.HttpNotFound
	}
	return ""
}

func (x *VidmgrConfig) GetHttpPort() string {
	if x != nil {
		return x.HttpPort
	}
	return ""
}

func (x *VidmgrConfig) GetHttpRootPath() string {
	if x != nil {
		return x.HttpRootPath
	}
	return ""
}

func (x *VidmgrConfig) GetHttpSendBufSize() string {
	if x != nil {
		return x.HttpSendBufSize
	}
	return ""
}

func (x *VidmgrConfig) GetHttpSslport() string {
	if x != nil {
		return x.HttpSslport
	}
	return ""
}

func (x *VidmgrConfig) GetHttpVirtualPath() string {
	if x != nil {
		return x.HttpVirtualPath
	}
	return ""
}

func (x *VidmgrConfig) GetMulticastAddrMax() string {
	if x != nil {
		return x.MulticastAddrMax
	}
	return ""
}

func (x *VidmgrConfig) GetMulticastAddrMin() string {
	if x != nil {
		return x.MulticastAddrMin
	}
	return ""
}

func (x *VidmgrConfig) GetMulticastUdpTTL() string {
	if x != nil {
		return x.MulticastUdpTTL
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolAddMuteAudio() string {
	if x != nil {
		return x.ProtocolAddMuteAudio
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolAutoClose() string {
	if x != nil {
		return x.ProtocolAutoClose
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolContinuePushMs() string {
	if x != nil {
		return x.ProtocolContinuePushMs
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolEnableAudio() string {
	if x != nil {
		return x.ProtocolEnableAudio
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolEnableFmp4() string {
	if x != nil {
		return x.ProtocolEnableFmp4
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolEnableHls() string {
	if x != nil {
		return x.ProtocolEnableHls
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolEnableHlsFmp4() string {
	if x != nil {
		return x.ProtocolEnableHlsFmp4
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolEnableMp4() string {
	if x != nil {
		return x.ProtocolEnableMp4
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolEnableRtmp() string {
	if x != nil {
		return x.ProtocolEnableRtmp
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolEnableRtsp() string {
	if x != nil {
		return x.ProtocolEnableRtsp
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolEnableTs() string {
	if x != nil {
		return x.ProtocolEnableTs
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolFmp4Demand() string {
	if x != nil {
		return x.ProtocolFmp4Demand
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolHlsDemand() string {
	if x != nil {
		return x.ProtocolHlsDemand
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolHlsSavePath() string {
	if x != nil {
		return x.ProtocolHlsSavePath
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolModifyStamp() string {
	if x != nil {
		return x.ProtocolModifyStamp
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolMp4AsPlayer() string {
	if x != nil {
		return x.ProtocolMp4AsPlayer
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolMp4MaxSecond() string {
	if x != nil {
		return x.ProtocolMp4MaxSecond
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolMp4SavePath() string {
	if x != nil {
		return x.ProtocolMp4SavePath
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolRtmpDemand() string {
	if x != nil {
		return x.ProtocolRtmpDemand
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolRtspDemand() string {
	if x != nil {
		return x.ProtocolRtspDemand
	}
	return ""
}

func (x *VidmgrConfig) GetProtocolTsDemand() string {
	if x != nil {
		return x.ProtocolTsDemand
	}
	return ""
}

func (x *VidmgrConfig) GetRecordAppName() string {
	if x != nil {
		return x.RecordAppName
	}
	return ""
}

func (x *VidmgrConfig) GetRecordFastStart() string {
	if x != nil {
		return x.RecordFastStart
	}
	return ""
}

func (x *VidmgrConfig) GetRecordFileBufSize() string {
	if x != nil {
		return x.RecordFileBufSize
	}
	return ""
}

func (x *VidmgrConfig) GetRecordFileRepeat() string {
	if x != nil {
		return x.RecordFileRepeat
	}
	return ""
}

func (x *VidmgrConfig) GetRecordSampleMS() string {
	if x != nil {
		return x.RecordSampleMS
	}
	return ""
}

func (x *VidmgrConfig) GetRtcExternIP() string {
	if x != nil {
		return x.RtcExternIP
	}
	return ""
}

func (x *VidmgrConfig) GetRtcPort() string {
	if x != nil {
		return x.RtcPort
	}
	return ""
}

func (x *VidmgrConfig) GetRtcPreferredCodecA() string {
	if x != nil {
		return x.RtcPreferredCodecA
	}
	return ""
}

func (x *VidmgrConfig) GetRtcPreferredCodecV() string {
	if x != nil {
		return x.RtcPreferredCodecV
	}
	return ""
}

func (x *VidmgrConfig) GetRtcRembBitRate() string {
	if x != nil {
		return x.RtcRembBitRate
	}
	return ""
}

func (x *VidmgrConfig) GetRtcTcpPort() string {
	if x != nil {
		return x.RtcTcpPort
	}
	return ""
}

func (x *VidmgrConfig) GetRtcTimeoutSec() string {
	if x != nil {
		return x.RtcTimeoutSec
	}
	return ""
}

func (x *VidmgrConfig) GetRtmpHandshakeSecond() string {
	if x != nil {
		return x.RtmpHandshakeSecond
	}
	return ""
}

func (x *VidmgrConfig) GetRtmpKeepAliveSecond() string {
	if x != nil {
		return x.RtmpKeepAliveSecond
	}
	return ""
}

func (x *VidmgrConfig) GetRtmpPort() string {
	if x != nil {
		return x.RtmpPort
	}
	return ""
}

func (x *VidmgrConfig) GetRtmpSslport() string {
	if x != nil {
		return x.RtmpSslport
	}
	return ""
}

func (x *VidmgrConfig) GetRtpAudioMtuSize() string {
	if x != nil {
		return x.RtpAudioMtuSize
	}
	return ""
}

func (x *VidmgrConfig) GetRtpH264StapA() string {
	if x != nil {
		return x.RtpH264StapA
	}
	return ""
}

func (x *VidmgrConfig) GetRtpLowLatency() string {
	if x != nil {
		return x.RtpLowLatency
	}
	return ""
}

func (x *VidmgrConfig) GetRtpRtpMaxSize() string {
	if x != nil {
		return x.RtpRtpMaxSize
	}
	return ""
}

func (x *VidmgrConfig) GetRtpVideoMtuSize() string {
	if x != nil {
		return x.RtpVideoMtuSize
	}
	return ""
}

func (x *VidmgrConfig) GetRtpProxyDumpDir() string {
	if x != nil {
		return x.RtpProxyDumpDir
	}
	return ""
}

func (x *VidmgrConfig) GetRtpProxyGopCache() string {
	if x != nil {
		return x.RtpProxyGopCache
	}
	return ""
}

func (x *VidmgrConfig) GetRtpProxyH264Pt() string {
	if x != nil {
		return x.RtpProxyH264Pt
	}
	return ""
}

func (x *VidmgrConfig) GetRtpProxyH265Pt() string {
	if x != nil {
		return x.RtpProxyH265Pt
	}
	return ""
}

func (x *VidmgrConfig) GetRtpProxyOpusPt() string {
	if x != nil {
		return x.RtpProxyOpusPt
	}
	return ""
}

func (x *VidmgrConfig) GetRtpProxyPort() string {
	if x != nil {
		return x.RtpProxyPort
	}
	return ""
}

func (x *VidmgrConfig) GetRtpProxyPortRange() string {
	if x != nil {
		return x.RtpProxyPortRange
	}
	return ""
}

func (x *VidmgrConfig) GetRtpProxyPsPt() string {
	if x != nil {
		return x.RtpProxyPsPt
	}
	return ""
}

func (x *VidmgrConfig) GetRtpProxyTimeoutSec() string {
	if x != nil {
		return x.RtpProxyTimeoutSec
	}
	return ""
}

func (x *VidmgrConfig) GetRtspAuthBasic() string {
	if x != nil {
		return x.RtspAuthBasic
	}
	return ""
}

func (x *VidmgrConfig) GetRtspDirectProxy() string {
	if x != nil {
		return x.RtspDirectProxy
	}
	return ""
}

func (x *VidmgrConfig) GetRtspHandshakeSecond() string {
	if x != nil {
		return x.RtspHandshakeSecond
	}
	return ""
}

func (x *VidmgrConfig) GetRtspKeepAliveSecond() string {
	if x != nil {
		return x.RtspKeepAliveSecond
	}
	return ""
}

func (x *VidmgrConfig) GetRtspLowLatency() string {
	if x != nil {
		return x.RtspLowLatency
	}
	return ""
}

func (x *VidmgrConfig) GetRtspPort() string {
	if x != nil {
		return x.RtspPort
	}
	return ""
}

func (x *VidmgrConfig) GetRtspRtpTransportType() string {
	if x != nil {
		return x.RtspRtpTransportType
	}
	return ""
}

func (x *VidmgrConfig) GetRtspSslport() string {
	if x != nil {
		return x.RtspSslport
	}
	return ""
}

func (x *VidmgrConfig) GetShellMaxReqSize() string {
	if x != nil {
		return x.ShellMaxReqSize
	}
	return ""
}

func (x *VidmgrConfig) GetShellPort() string {
	if x != nil {
		return x.ShellPort
	}
	return ""
}

func (x *VidmgrConfig) GetSrtLatencyMul() string {
	if x != nil {
		return x.SrtLatencyMul
	}
	return ""
}

func (x *VidmgrConfig) GetSrtPktBufSize() string {
	if x != nil {
		return x.SrtPktBufSize
	}
	return ""
}

func (x *VidmgrConfig) GetSrtPort() string {
	if x != nil {
		return x.SrtPort
	}
	return ""
}

func (x *VidmgrConfig) GetSrtTimeoutSec() string {
	if x != nil {
		return x.SrtTimeoutSec
	}
	return ""
}

func (x *VidmgrConfig) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type VidmgrConfigDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeneralMediaServerId string `protobuf:"bytes,1,opt,name=generalMediaServerId,proto3" json:"generalMediaServerId,omitempty"` //产品id
}

func (x *VidmgrConfigDeleteReq) Reset() {
	*x = VidmgrConfigDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrConfigDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrConfigDeleteReq) ProtoMessage() {}

func (x *VidmgrConfigDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrConfigDeleteReq.ProtoReflect.Descriptor instead.
func (*VidmgrConfigDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{20}
}

func (x *VidmgrConfigDeleteReq) GetGeneralMediaServerId() string {
	if x != nil {
		return x.GeneralMediaServerId
	}
	return ""
}

type VidmgrConfigReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaServerId string `protobuf:"bytes,1,opt,name=MediaServerId,proto3" json:"MediaServerId,omitempty"` //产品id
}

func (x *VidmgrConfigReadReq) Reset() {
	*x = VidmgrConfigReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrConfigReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrConfigReadReq) ProtoMessage() {}

func (x *VidmgrConfigReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrConfigReadReq.ProtoReflect.Descriptor instead.
func (*VidmgrConfigReadReq) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{21}
}

func (x *VidmgrConfigReadReq) GetMediaServerId() string {
	if x != nil {
		return x.MediaServerId
	}
	return ""
}

type VidmgrConfigIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`                   //分页信息 只获取一个则不填
	MediaServerId []string  `protobuf:"bytes,2,rep,name=MediaServerId,proto3" json:"MediaServerId,omitempty"` //产品id
}

func (x *VidmgrConfigIndexReq) Reset() {
	*x = VidmgrConfigIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrConfigIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrConfigIndexReq) ProtoMessage() {}

func (x *VidmgrConfigIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrConfigIndexReq.ProtoReflect.Descriptor instead.
func (*VidmgrConfigIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{22}
}

func (x *VidmgrConfigIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VidmgrConfigIndexReq) GetMediaServerId() []string {
	if x != nil {
		return x.MediaServerId
	}
	return nil
}

type VidmgrConfigIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*VidmgrConfig `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`    //产品信息
	Total int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *VidmgrConfigIndexResp) Reset() {
	*x = VidmgrConfigIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VidmgrConfigIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VidmgrConfigIndexResp) ProtoMessage() {}

func (x *VidmgrConfigIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VidmgrConfigIndexResp.ProtoReflect.Descriptor instead.
func (*VidmgrConfigIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{23}
}

func (x *VidmgrConfigIndexResp) GetList() []*VidmgrConfig {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *VidmgrConfigIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type PageInfo_OrderBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 排序的字段名
	Filed string `protobuf:"bytes,1,opt,name=filed,proto3" json:"filed,omitempty"`
	// 排序方式：0 aes, 1 desc
	Sort int64 `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *PageInfo_OrderBy) Reset() {
	*x = PageInfo_OrderBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_vid_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo_OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo_OrderBy) ProtoMessage() {}

func (x *PageInfo_OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vid_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo_OrderBy.ProtoReflect.Descriptor instead.
func (*PageInfo_OrderBy) Descriptor() ([]byte, []int) {
	return file_proto_vid_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PageInfo_OrderBy) GetFiled() string {
	if x != nil {
		return x.Filed
	}
	return ""
}

func (x *PageInfo_OrderBy) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

var File_proto_vid_proto protoreflect.FileDescriptor

var file_proto_vid_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x76, 0x69, 0x64, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x06,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x33, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xea, 0x03, 0x0a, 0x0a,
	0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x6d,
	0x67, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x6d,
	0x67, 0x72, 0x49, 0x70, 0x56, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x49, 0x70, 0x56, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x6d,
	0x67, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x6d,
	0x67, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x6d,
	0x67, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x30,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x2d, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a,
	0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x6d,
	0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x74, 0x49, 0x44, 0x22, 0x31, 0x0a,
	0x11, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x74, 0x49, 0x44,
	0x22, 0x87, 0x02, 0x0a, 0x12, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56,
	0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x13, 0x56, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4c, 0x0a, 0x12,
	0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x13, 0x56, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22,
	0x4e, 0x0a, 0x14, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x52, 0x0a, 0x15, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64,
	0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x65, 0x0a, 0x15, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x33, 0x0a, 0x15, 0x56, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x22,
	0x31, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x44, 0x22, 0xbd, 0x02, 0x0a, 0x14, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x69, 0x64, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xab, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x6f,
	0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x69, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x66,
	0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x22, 0xa8, 0x07, 0x0a, 0x0c, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x50, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x65, 0x65, 0x72, 0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x69,
	0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x70, 0x34, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x70, 0x34, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x4c, 0x53, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x48, 0x4c, 0x53, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x75, 0x73, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x75, 0x73, 0x68, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x50, 0x54, 0x5a, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x73, 0x50, 0x54, 0x5a, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x12,
	0x30, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x03, 0x0a, 0x0b,
	0x56, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x79, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x8b, 0x03, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x70, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x64, 0x65, 0x76,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x76, 0x69, 0x64, 0x64, 0x65, 0x76,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x6f, 0x77, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xba,
	0x2e, 0x0a, 0x0c, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x61,
	0x70, 0x69, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x69, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53,
	0x6e, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x53, 0x6e, 0x61, 0x70, 0x52, 0x6f, 0x6f, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x53, 0x6e, 0x61, 0x70, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12,
	0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x66, 0x6d, 0x70, 0x65, 0x67, 0x42, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x66, 0x6d, 0x70, 0x65, 0x67, 0x42, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x66, 0x6d,
	0x70, 0x65, 0x67, 0x43, 0x6d, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x66,
	0x6d, 0x70, 0x65, 0x67, 0x43, 0x6d, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x66, 0x6d, 0x70, 0x65,
	0x67, 0x4c, 0x6f, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x66, 0x6d, 0x70,
	0x65, 0x67, 0x4c, 0x6f, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x66, 0x6d, 0x70, 0x65, 0x67, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x66, 0x66, 0x6d, 0x70, 0x65, 0x67, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65,
	0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x66, 0x6d, 0x70, 0x65, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x66, 0x6d, 0x70, 0x65, 0x67, 0x53, 0x6e, 0x61,
	0x70, 0x12, 0x34, 0x0a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x44, 0x65, 0x76, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x44, 0x65, 0x76, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x66, 0x6d, 0x70, 0x65, 0x67, 0x4c, 0x6f,
	0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x66, 0x6d, 0x70, 0x65, 0x67, 0x4c, 0x6f, 0x67, 0x12,
	0x32, 0x0a, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x61,
	0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x61, 0x69, 0x74, 0x4d, 0x53, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x61, 0x69, 0x74, 0x4d, 0x53, 0x12, 0x32, 0x0a, 0x14, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x4d, 0x53, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d,
	0x53, 0x12, 0x36, 0x0a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x57, 0x68, 0x65, 0x6e, 0x52, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x57,
	0x68, 0x65, 0x6e, 0x52, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x46, 0x0a, 0x1e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x53, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d,
	0x53, 0x12, 0x3a, 0x0a, 0x18, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x41, 0x64, 0x64, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x4d, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x4d, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x57, 0x61,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x57, 0x61, 0x69,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x68, 0x6c, 0x73, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x68, 0x6c, 0x73,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x6c, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x6c,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x12,
	0x26, 0x0a, 0x0e, 0x68, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x75, 0x66, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x65,
	0x42, 0x75, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6c, 0x73, 0x53, 0x65,
	0x67, 0x44, 0x75, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6c, 0x73, 0x53,
	0x65, 0x67, 0x44, 0x75, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6c, 0x73, 0x53, 0x65, 0x67, 0x4b,
	0x65, 0x65, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6c, 0x73, 0x53, 0x65,
	0x67, 0x4b, 0x65, 0x65, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6c, 0x73, 0x53, 0x65, 0x67, 0x4e,
	0x75, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6c, 0x73, 0x53, 0x65, 0x67,
	0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6c, 0x73, 0x53, 0x65, 0x67, 0x52, 0x65, 0x74,
	0x61, 0x69, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6c, 0x73, 0x53, 0x65,
	0x67, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x6f, 0x6f, 0x6b, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x68, 0x6f, 0x6f, 0x6b, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6f, 0x6b, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x48, 0x74, 0x74, 0x70, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x6f, 0x6f,
	0x6b, 0x4f, 0x6e, 0x48, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4d, 0x70, 0x34, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x6f,
	0x6f, 0x6b, 0x4f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x70, 0x34, 0x12, 0x26, 0x0a,
	0x0e, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x73, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x52,
	0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x52, 0x74, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x52, 0x74, 0x73, 0x70, 0x41, 0x75, 0x74, 0x68, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x52, 0x74, 0x73,
	0x70, 0x41, 0x75, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x52,
	0x74, 0x73, 0x70, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x52, 0x74, 0x73, 0x70, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x12,
	0x32, 0x0a, 0x14, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x74, 0x70,
	0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x68,
	0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x74, 0x70, 0x53, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x65, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x69,
	0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x6f, 0x6f,
	0x6b, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x68,
	0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x6f, 0x6f, 0x6b, 0x4f,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x68, 0x6f, 0x6f,
	0x6b, 0x4f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x68, 0x6f, 0x6f, 0x6b, 0x4f,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x14, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x68, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x68,
	0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x68,
	0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x6f, 0x6f, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12,
	0x34, 0x0a, 0x15, 0x68, 0x74, 0x74, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x68, 0x74, 0x74, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x74, 0x74, 0x70, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x68, 0x74, 0x74, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x43, 0x68, 0x61, 0x72, 0x53, 0x65, 0x74,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x43, 0x68, 0x61, 0x72,
	0x53, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x44, 0x69, 0x72, 0x4d, 0x65,
	0x6e, 0x75, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x44, 0x69,
	0x72, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x34, 0x0a, 0x15, 0x68, 0x74, 0x74, 0x70, 0x46, 0x6f, 0x72,
	0x62, 0x69, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x68, 0x74, 0x74, 0x70, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x34, 0x0a, 0x15, 0x68,
	0x74, 0x74, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x49, 0x70, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x68, 0x74, 0x74, 0x70,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x49, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x74, 0x74, 0x70, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x68, 0x74, 0x74, 0x70, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x71, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x74, 0x74,
	0x70, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x68,
	0x74, 0x74, 0x70, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x68,
	0x74, 0x74, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x41, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x28, 0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x53, 0x65,
	0x6e, 0x64, 0x42, 0x75, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x74, 0x74,
	0x70, 0x53, 0x73, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x68, 0x74, 0x74, 0x70, 0x53, 0x73, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x68,
	0x74, 0x74, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x44,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x61, 0x78, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x61,
	0x78, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x28, 0x0a,
	0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x55, 0x64, 0x70, 0x54, 0x54, 0x4c,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x55, 0x64, 0x70, 0x54, 0x54, 0x4c, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x4d, 0x75, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41,
	0x64, 0x64, 0x4d, 0x75, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x50, 0x75, 0x73,
	0x68, 0x4d, 0x73, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4d,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6d, 0x70, 0x34, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x6d, 0x70, 0x34, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x6c, 0x73, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x6c,
	0x73, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x48, 0x6c, 0x73, 0x46, 0x6d, 0x70, 0x34, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x48, 0x6c, 0x73, 0x46, 0x6d, 0x70, 0x34, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x70, 0x34, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x70, 0x34, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x74, 0x6d, 0x70, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x74, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x74, 0x73, 0x70, 0x18, 0x51, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x74, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x6d, 0x70,
	0x34, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x6d, 0x70, 0x34, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x6c, 0x73,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x6c, 0x73, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x6c, 0x73, 0x53, 0x61,
	0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x6c, 0x73, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d,
	0x70, 0x34, 0x41, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x70, 0x34, 0x41, 0x73, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x4d, 0x70, 0x34, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x58, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x70, 0x34,
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x70, 0x34, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x4d, 0x70, 0x34, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x74, 0x6d, 0x70, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x74, 0x6d, 0x70, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x74, 0x73, 0x70, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x74, 0x73, 0x70, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x73, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x5c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54,
	0x73, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x61,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x75, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x5f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x75,
	0x66, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x4d, 0x53, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x74, 0x63,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x50, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x74, 0x63, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x74, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x74,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x74, 0x63, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x41, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x72, 0x74, 0x63, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x41, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x74, 0x63, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x56, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x72, 0x74, 0x63, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x56, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x74, 0x63, 0x52, 0x65, 0x6d, 0x62,
	0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x74, 0x63, 0x52, 0x65, 0x6d, 0x62, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x74, 0x63, 0x54, 0x63, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x74, 0x63, 0x54, 0x63, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x74, 0x6d, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x72, 0x74, 0x6d, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x74, 0x6d, 0x70, 0x4b, 0x65, 0x65,
	0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x72, 0x74, 0x6d, 0x70, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x74, 0x6d, 0x70, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x74, 0x6d, 0x70, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x74, 0x6d, 0x70, 0x53, 0x73, 0x6c, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x74, 0x6d, 0x70, 0x53, 0x73,
	0x6c, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x74, 0x70, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x4d, 0x74, 0x75, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x74, 0x70, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x74, 0x75, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x74, 0x70, 0x48, 0x32, 0x36, 0x34, 0x53, 0x74, 0x61, 0x70, 0x41, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x74, 0x70, 0x48, 0x32, 0x36, 0x34, 0x53, 0x74,
	0x61, 0x70, 0x41, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x74, 0x70, 0x4c, 0x6f, 0x77, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x74, 0x70, 0x4c,
	0x6f, 0x77, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x74, 0x70,
	0x52, 0x74, 0x70, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x74, 0x70, 0x52, 0x74, 0x70, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x72, 0x74, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x74, 0x75, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x74, 0x70, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x4d, 0x74, 0x75, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x74, 0x70,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x75, 0x6d, 0x70, 0x44, 0x69, 0x72, 0x18, 0x72, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x75, 0x6d, 0x70,
	0x44, 0x69, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x47,
	0x6f, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x47, 0x6f, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x32, 0x36, 0x34, 0x50,
	0x74, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x48, 0x32, 0x36, 0x34, 0x50, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x74, 0x70, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x48, 0x32, 0x36, 0x35, 0x50, 0x74, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x32, 0x36, 0x35, 0x50, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x70, 0x75, 0x73, 0x50,
	0x74, 0x18, 0x76, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x4f, 0x70, 0x75, 0x73, 0x50, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x74, 0x70, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72,
	0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x74, 0x70,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x73, 0x50, 0x74, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x73, 0x50, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x72, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x74, 0x70, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x74, 0x73, 0x70, 0x41, 0x75, 0x74, 0x68, 0x42, 0x61, 0x73, 0x69, 0x63, 0x18, 0x7b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x74, 0x73, 0x70, 0x41, 0x75, 0x74, 0x68, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x74, 0x73, 0x70, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x74,
	0x73, 0x70, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x30, 0x0a,
	0x13, 0x72, 0x74, 0x73, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x74, 0x73, 0x70,
	0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12,
	0x30, 0x0a, 0x13, 0x72, 0x74, 0x73, 0x70, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x74,
	0x73, 0x70, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x74, 0x73, 0x70, 0x4c, 0x6f, 0x77, 0x4c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x74, 0x73, 0x70, 0x4c,
	0x6f, 0x77, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x08, 0x72, 0x74, 0x73,
	0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x74,
	0x73, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x72, 0x74, 0x73, 0x70, 0x52, 0x74,
	0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x81,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x74, 0x73, 0x70, 0x52, 0x74, 0x70, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x72,
	0x74, 0x73, 0x70, 0x53, 0x73, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x74, 0x73, 0x70, 0x53, 0x73, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x29,
	0x0a, 0x0f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x4d,
	0x61, 0x78, 0x52, 0x65, 0x71, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x68, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x75, 0x6c, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x72, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x75, 0x6c, 0x12,
	0x25, 0x0a, 0x0d, 0x73, 0x72, 0x74, 0x50, 0x6b, 0x74, 0x42, 0x75, 0x66, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72, 0x74, 0x50, 0x6b, 0x74, 0x42,
	0x75, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x73, 0x72, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x15, 0x56,
	0x69, 0x64, 0x6d, 0x67, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x6d,
	0x67, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x14, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x69,
	0x64, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x15, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xfe, 0x02, 0x0a,
	0x10, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x10, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d,
	0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0d, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x10, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x76, 0x69, 0x64, 0x2e,
	0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0d, 0x2e, 0x76, 0x69, 0x64,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x10, 0x76, 0x69, 0x64,
	0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x2e,
	0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x2e, 0x76, 0x69, 0x64, 0x2e,
	0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x71, 0x1a, 0x18, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0e,
	0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x12, 0x16,
	0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64,
	0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0f, 0x76, 0x69, 0x64, 0x6d, 0x67,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x76, 0x69, 0x64,
	0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0x9e, 0x03,
	0x0a, 0x12, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x12, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x76, 0x69, 0x64,
	0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x0d, 0x2e,
	0x76, 0x69, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x12,
	0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x11, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x0d, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x12, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x76, 0x69, 0x64,
	0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x2e, 0x76, 0x69, 0x64,
	0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d,
	0x67, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3f, 0x0a, 0x10, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x61, 0x64, 0x12, 0x18, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d,
	0x67, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x4a, 0x0a, 0x11, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69,
	0x64, 0x6d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xd2,
	0x02, 0x0a, 0x12, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x12, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x76, 0x69,
	0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0d,
	0x2e, 0x76, 0x69, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x12, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x0d, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x12, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0d, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x2e, 0x76, 0x69,
	0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64,
	0x6d, 0x67, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3f, 0x0a, 0x10, 0x76, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x61, 0x64, 0x12, 0x18, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64,
	0x6d, 0x67, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x11, 0x2e, 0x76, 0x69, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x08, 0x5a, 0x06, 0x70, 0x62, 0x2f, 0x76, 0x69, 0x64, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_vid_proto_rawDescOnce sync.Once
	file_proto_vid_proto_rawDescData = file_proto_vid_proto_rawDesc
)

func file_proto_vid_proto_rawDescGZIP() []byte {
	file_proto_vid_proto_rawDescOnce.Do(func() {
		file_proto_vid_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_vid_proto_rawDescData)
	})
	return file_proto_vid_proto_rawDescData
}

var file_proto_vid_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_proto_vid_proto_goTypes = []interface{}{
	(*Response)(nil),              // 0: vid.Response
	(*PageInfo)(nil),              // 1: vid.PageInfo
	(*VidmgrInfo)(nil),            // 2: vid.VidmgrInfo
	(*VidmgrInfoDeleteReq)(nil),   // 3: vid.VidmgrInfoDeleteReq
	(*VidmgrInfoReadReq)(nil),     // 4: vid.VidmgrInfoReadReq
	(*VidmgrInfoIndexReq)(nil),    // 5: vid.VidmgrInfoIndexReq
	(*VidmgrInfoIndexResp)(nil),   // 6: vid.VidmgrInfoIndexResp
	(*VidmgrInfoCountReq)(nil),    // 7: vid.VidmgrInfoCountReq
	(*VidmgrInfoCountResp)(nil),   // 8: vid.VidmgrInfoCountResp
	(*VidmgrStreamCountReq)(nil),  // 9: vid.VidmgrStreamCountReq
	(*VidmgrStreamIndexResp)(nil), // 10: vid.VidmgrStreamIndexResp
	(*VidmgrStreamCountResp)(nil), // 11: vid.VidmgrStreamCountResp
	(*VidmgrStreamDeleteReq)(nil), // 12: vid.VidmgrStreamDeleteReq
	(*VidmgrStreamReadReq)(nil),   // 13: vid.VidmgrStreamReadReq
	(*VidmgrStreamIndexReq)(nil),  // 14: vid.VidmgrStreamIndexReq
	(*StreamTrack)(nil),           // 15: vid.StreamTrack
	(*VidmgrStream)(nil),          // 16: vid.VidmgrStream
	(*VidPlanInfo)(nil),           // 17: vid.VidPlanInfo
	(*VidrecordfileInfo)(nil),     // 18: vid.VidrecordfileInfo
	(*VidmgrConfig)(nil),          // 19: vid.VidmgrConfig
	(*VidmgrConfigDeleteReq)(nil), // 20: vid.VidmgrConfigDeleteReq
	(*VidmgrConfigReadReq)(nil),   // 21: vid.VidmgrConfigReadReq
	(*VidmgrConfigIndexReq)(nil),  // 22: vid.VidmgrConfigIndexReq
	(*VidmgrConfigIndexResp)(nil), // 23: vid.VidmgrConfigIndexResp
	(*PageInfo_OrderBy)(nil),      // 24: vid.PageInfo.OrderBy
	nil,                           // 25: vid.VidmgrInfo.TagsEntry
	nil,                           // 26: vid.VidmgrInfoIndexReq.TagsEntry
	nil,                           // 27: vid.VidmgrStreamIndexReq.TagsEntry
	nil,                           // 28: vid.VidmgrStream.TagsEntry
	nil,                           // 29: vid.VidPlanInfo.TagsEntry
	(*wrappers.StringValue)(nil),  // 30: google.protobuf.StringValue
}
var file_proto_vid_proto_depIdxs = []int32{
	24, // 0: vid.PageInfo.orders:type_name -> vid.PageInfo.OrderBy
	30, // 1: vid.VidmgrInfo.desc:type_name -> google.protobuf.StringValue
	25, // 2: vid.VidmgrInfo.tags:type_name -> vid.VidmgrInfo.TagsEntry
	1,  // 3: vid.VidmgrInfoIndexReq.page:type_name -> vid.PageInfo
	26, // 4: vid.VidmgrInfoIndexReq.tags:type_name -> vid.VidmgrInfoIndexReq.TagsEntry
	2,  // 5: vid.VidmgrInfoIndexResp.list:type_name -> vid.VidmgrInfo
	2,  // 6: vid.VidmgrStreamIndexResp.list:type_name -> vid.VidmgrInfo
	1,  // 7: vid.VidmgrStreamIndexReq.page:type_name -> vid.PageInfo
	27, // 8: vid.VidmgrStreamIndexReq.tags:type_name -> vid.VidmgrStreamIndexReq.TagsEntry
	15, // 9: vid.VidmgrStream.tracks:type_name -> vid.StreamTrack
	30, // 10: vid.VidmgrStream.desc:type_name -> google.protobuf.StringValue
	28, // 11: vid.VidmgrStream.tags:type_name -> vid.VidmgrStream.TagsEntry
	30, // 12: vid.VidPlanInfo.desc:type_name -> google.protobuf.StringValue
	29, // 13: vid.VidPlanInfo.tags:type_name -> vid.VidPlanInfo.TagsEntry
	1,  // 14: vid.VidmgrConfigIndexReq.page:type_name -> vid.PageInfo
	19, // 15: vid.VidmgrConfigIndexResp.list:type_name -> vid.VidmgrConfig
	2,  // 16: vid.VidmgrInfoManage.vidmgrInfoCreate:input_type -> vid.VidmgrInfo
	2,  // 17: vid.VidmgrInfoManage.vidmgrInfoUpdate:input_type -> vid.VidmgrInfo
	3,  // 18: vid.VidmgrInfoManage.vidmgrInfoDelete:input_type -> vid.VidmgrInfoDeleteReq
	5,  // 19: vid.VidmgrInfoManage.vidmgrInfoIndex:input_type -> vid.VidmgrInfoIndexReq
	4,  // 20: vid.VidmgrInfoManage.vidmgrInfoRead:input_type -> vid.VidmgrInfoReadReq
	7,  // 21: vid.VidmgrInfoManage.vidmgrInfoCount:input_type -> vid.VidmgrInfoCountReq
	16, // 22: vid.VidmgrStreamManage.vidmgrStreamCreate:input_type -> vid.VidmgrStream
	16, // 23: vid.VidmgrStreamManage.vidmgrStreamUpdate:input_type -> vid.VidmgrStream
	12, // 24: vid.VidmgrStreamManage.vidmgrStreamDelete:input_type -> vid.VidmgrStreamDeleteReq
	14, // 25: vid.VidmgrStreamManage.vidmgrStreamIndex:input_type -> vid.VidmgrStreamIndexReq
	13, // 26: vid.VidmgrStreamManage.vidmgrStreamRead:input_type -> vid.VidmgrStreamReadReq
	9,  // 27: vid.VidmgrStreamManage.vidmgrStreamCount:input_type -> vid.VidmgrStreamCountReq
	19, // 28: vid.VidmgrConfigManage.vidmgrConfigCreate:input_type -> vid.VidmgrConfig
	20, // 29: vid.VidmgrConfigManage.vidmgrConfigDelete:input_type -> vid.VidmgrConfigDeleteReq
	19, // 30: vid.VidmgrConfigManage.vidmgrConfigUpdate:input_type -> vid.VidmgrConfig
	22, // 31: vid.VidmgrConfigManage.vidmgrConfigIndex:input_type -> vid.VidmgrConfigIndexReq
	21, // 32: vid.VidmgrConfigManage.vidmgrConfigRead:input_type -> vid.VidmgrConfigReadReq
	0,  // 33: vid.VidmgrInfoManage.vidmgrInfoCreate:output_type -> vid.Response
	0,  // 34: vid.VidmgrInfoManage.vidmgrInfoUpdate:output_type -> vid.Response
	0,  // 35: vid.VidmgrInfoManage.vidmgrInfoDelete:output_type -> vid.Response
	6,  // 36: vid.VidmgrInfoManage.vidmgrInfoIndex:output_type -> vid.VidmgrInfoIndexResp
	2,  // 37: vid.VidmgrInfoManage.vidmgrInfoRead:output_type -> vid.VidmgrInfo
	8,  // 38: vid.VidmgrInfoManage.vidmgrInfoCount:output_type -> vid.VidmgrInfoCountResp
	0,  // 39: vid.VidmgrStreamManage.vidmgrStreamCreate:output_type -> vid.Response
	0,  // 40: vid.VidmgrStreamManage.vidmgrStreamUpdate:output_type -> vid.Response
	0,  // 41: vid.VidmgrStreamManage.vidmgrStreamDelete:output_type -> vid.Response
	10, // 42: vid.VidmgrStreamManage.vidmgrStreamIndex:output_type -> vid.VidmgrStreamIndexResp
	16, // 43: vid.VidmgrStreamManage.vidmgrStreamRead:output_type -> vid.VidmgrStream
	11, // 44: vid.VidmgrStreamManage.vidmgrStreamCount:output_type -> vid.VidmgrStreamCountResp
	0,  // 45: vid.VidmgrConfigManage.vidmgrConfigCreate:output_type -> vid.Response
	0,  // 46: vid.VidmgrConfigManage.vidmgrConfigDelete:output_type -> vid.Response
	0,  // 47: vid.VidmgrConfigManage.vidmgrConfigUpdate:output_type -> vid.Response
	23, // 48: vid.VidmgrConfigManage.vidmgrConfigIndex:output_type -> vid.VidmgrConfigIndexResp
	19, // 49: vid.VidmgrConfigManage.vidmgrConfigRead:output_type -> vid.VidmgrConfig
	33, // [33:50] is the sub-list for method output_type
	16, // [16:33] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_proto_vid_proto_init() }
func file_proto_vid_proto_init() {
	if File_proto_vid_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_vid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrInfoDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrInfoReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrInfoIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrInfoIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrInfoCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrInfoCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrStreamCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrStreamIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrStreamCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrStreamDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrStreamReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrStreamIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidPlanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidrecordfileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrConfigDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrConfigReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrConfigIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VidmgrConfigIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_vid_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo_OrderBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_vid_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_proto_vid_proto_goTypes,
		DependencyIndexes: file_proto_vid_proto_depIdxs,
		MessageInfos:      file_proto_vid_proto_msgTypes,
	}.Build()
	File_proto_vid_proto = out.File
	file_proto_vid_proto_rawDesc = nil
	file_proto_vid_proto_goTypes = nil
	file_proto_vid_proto_depIdxs = nil
}
